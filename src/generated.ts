// Generated by @wagmi/cli@1.3.0 on 8/29/2023 at 6:57:46 PM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AccessControl
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const accessControlABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'previousAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'newAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleRevoked',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BasePaymaster
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const basePaymasterABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'CALLDATA_SIZE_LIMIT',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'FORWARDER_HUB_OVERHEAD',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'PAYMASTER_ACCEPTANCE_BUDGET',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'POST_RELAYED_CALL_GAS_LIMIT',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'PRE_RELAYED_CALL_GAS_LIMIT',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getGasAndDataLimits',
    outputs: [
      {
        name: 'limits',
        internalType: 'struct IPaymaster.GasAndDataLimits',
        type: 'tuple',
        components: [
          {
            name: 'acceptanceBudget',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preRelayedCallGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'postRelayedCallGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'calldataSizeLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getRelayHub',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTrustedForwarder',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'context', internalType: 'bytes', type: 'bytes' },
      { name: 'success', internalType: 'bool', type: 'bool' },
      { name: 'gasUseWithoutPost', internalType: 'uint256', type: 'uint256' },
      {
        name: 'relayData',
        internalType: 'struct GsnTypes.RelayData',
        type: 'tuple',
        components: [
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'transactionCalldataGasUsed',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'relayWorker', internalType: 'address', type: 'address' },
          { name: 'paymaster', internalType: 'address', type: 'address' },
          { name: 'forwarder', internalType: 'address', type: 'address' },
          { name: 'paymasterData', internalType: 'bytes', type: 'bytes' },
          { name: 'clientId', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'postRelayedCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'relayRequest',
        internalType: 'struct GsnTypes.RelayRequest',
        type: 'tuple',
        components: [
          {
            name: 'request',
            internalType: 'struct IForwarder.ForwardRequest',
            type: 'tuple',
            components: [
              { name: 'from', internalType: 'address', type: 'address' },
              { name: 'to', internalType: 'address', type: 'address' },
              { name: 'value', internalType: 'uint256', type: 'uint256' },
              { name: 'gas', internalType: 'uint256', type: 'uint256' },
              { name: 'nonce', internalType: 'uint256', type: 'uint256' },
              { name: 'data', internalType: 'bytes', type: 'bytes' },
              {
                name: 'validUntilTime',
                internalType: 'uint256',
                type: 'uint256',
              },
            ],
          },
          {
            name: 'relayData',
            internalType: 'struct GsnTypes.RelayData',
            type: 'tuple',
            components: [
              {
                name: 'maxFeePerGas',
                internalType: 'uint256',
                type: 'uint256',
              },
              {
                name: 'maxPriorityFeePerGas',
                internalType: 'uint256',
                type: 'uint256',
              },
              {
                name: 'transactionCalldataGasUsed',
                internalType: 'uint256',
                type: 'uint256',
              },
              { name: 'relayWorker', internalType: 'address', type: 'address' },
              { name: 'paymaster', internalType: 'address', type: 'address' },
              { name: 'forwarder', internalType: 'address', type: 'address' },
              { name: 'paymasterData', internalType: 'bytes', type: 'bytes' },
              { name: 'clientId', internalType: 'uint256', type: 'uint256' },
            ],
          },
        ],
      },
      { name: 'signature', internalType: 'bytes', type: 'bytes' },
      { name: 'approvalData', internalType: 'bytes', type: 'bytes' },
      { name: 'maxPossibleGas', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'preRelayedCall',
    outputs: [
      { name: '', internalType: 'bytes', type: 'bytes' },
      { name: '', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'hub', internalType: 'contract IRelayHub', type: 'address' },
    ],
    name: 'setRelayHub',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'forwarder', internalType: 'address', type: 'address' }],
    name: 'setTrustedForwarder',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'versionPaymaster',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'target', internalType: 'address payable', type: 'address' },
    ],
    name: 'withdrawRelayHubDepositTo',
    outputs: [],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ContextUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const contextUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Counter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const counterABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'increment',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'number',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'setNumber',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC165
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc165ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC1967UpgradeUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc1967UpgradeUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC2771Recipient
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc2771RecipientABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTrustedForwarder',
    outputs: [{ name: 'forwarder', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'forwarder', internalType: 'address', type: 'address' }],
    name: 'isTrustedForwarder',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721ABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'name_', internalType: 'string', type: 'string' },
      { name: 'symbol_', internalType: 'string', type: 'string' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC2771ContextUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc2771ContextUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'forwarder', internalType: 'address', type: 'address' }],
    name: 'isTrustedForwarder',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721Base
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721BaseABI = [
  { type: 'error', inputs: [], name: 'InvalidManager' },
  { type: 'error', inputs: [], name: 'ManagerDoesNotExist' },
  { type: 'error', inputs: [], name: 'ManagerRemoveBlocked' },
  { type: 'error', inputs: [], name: 'ManagerSwapBlocked' },
  { type: 'error', inputs: [], name: 'MinterRegistrationInvalid' },
  { type: 'error', inputs: [], name: 'NotMinter' },
  { type: 'error', inputs: [], name: 'RoyaltyBPSInvalid' },
  { type: 'error', inputs: [], name: 'RoyaltySetBlocked' },
  { type: 'error', inputs: [], name: 'Unauthorized' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'recipientAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'royaltyPercentageBPS',
        internalType: 'uint16',
        type: 'uint16',
        indexed: true,
      },
    ],
    name: 'DefaultRoyaltySet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newDefaultTokenManager',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DefaultTokenManagerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'ids',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: '_newRoyalties',
        internalType: 'struct IRoyaltyManager.Royalty[]',
        type: 'tuple[]',
        components: [
          {
            name: 'recipientAddress',
            internalType: 'address',
            type: 'address',
          },
          {
            name: 'royaltyPercentageBPS',
            internalType: 'uint16',
            type: 'uint16',
          },
        ],
        indexed: false,
      },
    ],
    name: 'GranularRoyaltiesSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_ids',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'GranularTokenManagersRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_ids',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: '_tokenManagers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'GranularTokenManagersSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'minter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'registered', internalType: 'bool', type: 'bool', indexed: true },
    ],
    name: 'MinterRegistrationChanged',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'MintsFrozen' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newRoyaltyManager',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoyaltyManagerChanged',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'defaultManager',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'freezeMints',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'forwarder', internalType: 'address', type: 'address' }],
    name: 'isTrustedForwarder',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minters',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'observability',
    outputs: [
      { name: '', internalType: 'contract IObservability', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'minter', internalType: 'address', type: 'address' }],
    name: 'registerMinter',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'removeDefaultTokenManager',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_ids', internalType: 'uint256[]', type: 'uint256[]' }],
    name: 'removeGranularTokenManagers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'removeRoyaltyManager',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_tokenGroupingId', internalType: 'uint256', type: 'uint256' },
      { name: '_salePrice', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'royaltyInfo',
    outputs: [
      { name: 'receiver', internalType: 'address', type: 'address' },
      { name: 'royaltyAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'royaltyManager',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_royalty',
        internalType: 'struct IRoyaltyManager.Royalty',
        type: 'tuple',
        components: [
          {
            name: 'recipientAddress',
            internalType: 'address',
            type: 'address',
          },
          {
            name: 'royaltyPercentageBPS',
            internalType: 'uint16',
            type: 'uint16',
          },
        ],
      },
    ],
    name: 'setDefaultRoyalty',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_defaultTokenManager',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'setDefaultTokenManager',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      {
        name: '_newRoyalties',
        internalType: 'struct IRoyaltyManager.Royalty[]',
        type: 'tuple[]',
        components: [
          {
            name: 'recipientAddress',
            internalType: 'address',
            type: 'address',
          },
          {
            name: 'royaltyPercentageBPS',
            internalType: 'uint16',
            type: 'uint16',
          },
        ],
      },
    ],
    name: 'setGranularRoyalties',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_tokenManagers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setGranularTokenManagers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_royaltyManager', internalType: 'address', type: 'address' },
    ],
    name: 'setRoyaltyManager',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenManager',
    outputs: [{ name: 'manager', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'minter', internalType: 'address', type: 'address' }],
    name: 'unregisterMinter',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721AUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721AUpgradeableABI = [
  { type: 'error', inputs: [], name: 'ApprovalCallerNotOwnerNorApproved' },
  { type: 'error', inputs: [], name: 'ApprovalQueryForNonexistentToken' },
  { type: 'error', inputs: [], name: 'BalanceQueryForZeroAddress' },
  { type: 'error', inputs: [], name: 'MintERC2309QuantityExceedsLimit' },
  { type: 'error', inputs: [], name: 'MintToZeroAddress' },
  { type: 'error', inputs: [], name: 'MintZeroQuantity' },
  { type: 'error', inputs: [], name: 'OwnerQueryForNonexistentToken' },
  { type: 'error', inputs: [], name: 'OwnershipNotInitializedForExtraData' },
  { type: 'error', inputs: [], name: 'QuantityTooLarge' },
  { type: 'error', inputs: [], name: 'TokenMintedAlready' },
  { type: 'error', inputs: [], name: 'TransferCallerNotOwnerNorApproved' },
  { type: 'error', inputs: [], name: 'TransferFromIncorrectOwner' },
  { type: 'error', inputs: [], name: 'TransferToNonERC721ReceiverImplementer' },
  { type: 'error', inputs: [], name: 'TransferToZeroAddress' },
  { type: 'error', inputs: [], name: 'URIQueryForNonexistentToken' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721A__IERC721ReceiverUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721AIerc721ReceiverUpgradeableABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721GeneralBase
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721GeneralBaseABI = [
  { type: 'error', inputs: [], name: 'ApprovalCallerNotOwnerNorApproved' },
  { type: 'error', inputs: [], name: 'ApprovalQueryForNonexistentToken' },
  { type: 'error', inputs: [], name: 'BalanceQueryForZeroAddress' },
  { type: 'error', inputs: [], name: 'EmptyString' },
  { type: 'error', inputs: [], name: 'InvalidManager' },
  { type: 'error', inputs: [], name: 'ManagerDoesNotExist' },
  { type: 'error', inputs: [], name: 'ManagerRemoveBlocked' },
  { type: 'error', inputs: [], name: 'ManagerSwapBlocked' },
  { type: 'error', inputs: [], name: 'MintERC2309QuantityExceedsLimit' },
  { type: 'error', inputs: [], name: 'MintFrozen' },
  { type: 'error', inputs: [], name: 'MintToZeroAddress' },
  { type: 'error', inputs: [], name: 'MintZeroQuantity' },
  { type: 'error', inputs: [], name: 'MinterRegistrationInvalid' },
  { type: 'error', inputs: [], name: 'MismatchedArrayLengths' },
  { type: 'error', inputs: [], name: 'NotAContract' },
  { type: 'error', inputs: [], name: 'NotMinter' },
  {
    type: 'error',
    inputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
    name: 'OperatorNotAllowed',
  },
  { type: 'error', inputs: [], name: 'OverLimitSupply' },
  { type: 'error', inputs: [], name: 'OwnerQueryForNonexistentToken' },
  { type: 'error', inputs: [], name: 'OwnershipNotInitializedForExtraData' },
  { type: 'error', inputs: [], name: 'QuantityTooLarge' },
  { type: 'error', inputs: [], name: 'RoyaltyBPSInvalid' },
  { type: 'error', inputs: [], name: 'RoyaltySetBlocked' },
  { type: 'error', inputs: [], name: 'TokenDoesNotExist' },
  { type: 'error', inputs: [], name: 'TokenMintedAlready' },
  { type: 'error', inputs: [], name: 'TokenNotInRange' },
  { type: 'error', inputs: [], name: 'TransferCallerNotOwnerNorApproved' },
  { type: 'error', inputs: [], name: 'TransferFromIncorrectOwner' },
  { type: 'error', inputs: [], name: 'TransferToNonERC721ReceiverImplementer' },
  { type: 'error', inputs: [], name: 'TransferToZeroAddress' },
  { type: 'error', inputs: [], name: 'URIQueryForNonexistentToken' },
  { type: 'error', inputs: [], name: 'Unauthorized' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldBaseUri',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'newBaseURI',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'BaseURISet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'recipientAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'royaltyPercentageBPS',
        internalType: 'uint16',
        type: 'uint16',
        indexed: true,
      },
    ],
    name: 'DefaultRoyaltySet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newDefaultTokenManager',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DefaultTokenManagerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'ids',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: '_newRoyalties',
        internalType: 'struct IRoyaltyManager.Royalty[]',
        type: 'tuple[]',
        components: [
          {
            name: 'recipientAddress',
            internalType: 'address',
            type: 'address',
          },
          {
            name: 'royaltyPercentageBPS',
            internalType: 'uint16',
            type: 'uint16',
          },
        ],
        indexed: false,
      },
    ],
    name: 'GranularRoyaltiesSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_ids',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'GranularTokenManagersRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_ids',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: '_tokenManagers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'GranularTokenManagersSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newLimitSupply',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'LimitSupplySet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'minter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'registered', internalType: 'bool', type: 'bool', indexed: true },
    ],
    name: 'MinterRegistrationChanged',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'MintsFrozen' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newRoyaltyManager',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoyaltyManagerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'ids',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: 'uris',
        internalType: 'string[]',
        type: 'string[]',
        indexed: false,
      },
    ],
    name: 'TokenURIsSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_SUBSCRIPTION',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MARKETPLACE_FILTERER_REGISTRY',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'baseURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'contractURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'defaultManager',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'freezeMints',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'forwarder', internalType: 'address', type: 'address' }],
    name: 'isTrustedForwarder',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'limitSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintAmountToOneRecipient',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipients', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'mintOneToMultipleRecipients',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'recipient', internalType: 'address', type: 'address' }],
    name: 'mintOneToOneRecipient',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipients', internalType: 'address[]', type: 'address[]' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintSameAmountToMultipleRecipients',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintSpecificTokenToOneRecipient',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'tokenIds', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'mintSpecificTokensToOneRecipient',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minters',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'observability',
    outputs: [
      { name: '', internalType: 'contract IObservability', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'operatorFiltererRegistry',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'minter', internalType: 'address', type: 'address' }],
    name: 'registerMinter',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'removeDefaultTokenManager',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_ids', internalType: 'uint256[]', type: 'uint256[]' }],
    name: 'removeGranularTokenManagers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'removeMarketplaceFiltererRegistryAndUnregister',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'removeRoyaltyManager',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_tokenGroupingId', internalType: 'uint256', type: 'uint256' },
      { name: '_salePrice', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'royaltyInfo',
    outputs: [
      { name: 'receiver', internalType: 'address', type: 'address' },
      { name: 'royaltyAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'royaltyManager',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newBaseURI', internalType: 'string', type: 'string' }],
    name: 'setBaseURI',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newName', internalType: 'string', type: 'string' },
      { name: 'newSymbol', internalType: 'string', type: 'string' },
      { name: 'newContractUri', internalType: 'string', type: 'string' },
    ],
    name: 'setContractMetadata',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newRegistry', internalType: 'address', type: 'address' }],
    name: 'setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_royalty',
        internalType: 'struct IRoyaltyManager.Royalty',
        type: 'tuple',
        components: [
          {
            name: 'recipientAddress',
            internalType: 'address',
            type: 'address',
          },
          {
            name: 'royaltyPercentageBPS',
            internalType: 'uint16',
            type: 'uint16',
          },
        ],
      },
    ],
    name: 'setDefaultRoyalty',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_defaultTokenManager',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'setDefaultTokenManager',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      {
        name: '_newRoyalties',
        internalType: 'struct IRoyaltyManager.Royalty[]',
        type: 'tuple[]',
        components: [
          {
            name: 'recipientAddress',
            internalType: 'address',
            type: 'address',
          },
          {
            name: 'royaltyPercentageBPS',
            internalType: 'uint16',
            type: 'uint16',
          },
        ],
      },
    ],
    name: 'setGranularRoyalties',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_tokenManagers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setGranularTokenManagers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_limitSupply', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setLimitSupply',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'setMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_royaltyManager', internalType: 'address', type: 'address' },
    ],
    name: 'setRoyaltyManager',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'uris', internalType: 'string[]', type: 'string[]' },
    ],
    name: 'setTokenURIs',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenManager',
    outputs: [{ name: 'manager', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'minter', internalType: 'address', type: 'address' }],
    name: 'unregisterMinter',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721URIStorageUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721UriStorageUpgradeableABI = [
  { type: 'error', inputs: [], name: 'ApprovalCallerNotOwnerNorApproved' },
  { type: 'error', inputs: [], name: 'ApprovalQueryForNonexistentToken' },
  { type: 'error', inputs: [], name: 'BalanceQueryForZeroAddress' },
  { type: 'error', inputs: [], name: 'MintERC2309QuantityExceedsLimit' },
  { type: 'error', inputs: [], name: 'MintToZeroAddress' },
  { type: 'error', inputs: [], name: 'MintZeroQuantity' },
  { type: 'error', inputs: [], name: 'OwnerQueryForNonexistentToken' },
  { type: 'error', inputs: [], name: 'OwnershipNotInitializedForExtraData' },
  { type: 'error', inputs: [], name: 'QuantityTooLarge' },
  { type: 'error', inputs: [], name: 'TokenDoesNotExist' },
  { type: 'error', inputs: [], name: 'TokenMintedAlready' },
  { type: 'error', inputs: [], name: 'TransferCallerNotOwnerNorApproved' },
  { type: 'error', inputs: [], name: 'TransferFromIncorrectOwner' },
  { type: 'error', inputs: [], name: 'TransferToNonERC721ReceiverImplementer' },
  { type: 'error', inputs: [], name: 'TransferToZeroAddress' },
  { type: 'error', inputs: [], name: 'URIQueryForNonexistentToken' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldBaseUri',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'newBaseURI',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'BaseURISet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'baseURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GsnEip712Library
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const gsnEip712LibraryABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'EIP712DOMAIN_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'GENERIC_PARAMS',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'RELAYDATA_TYPE',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'RELAYDATA_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'RELAY_REQUEST_NAME',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'RELAY_REQUEST_SUFFIX',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'RELAY_REQUEST_TYPE',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'RELAY_REQUEST_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC721Generative
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc721GenerativeABI = [
  { type: 'error', inputs: [], name: 'ApprovalCallerNotOwnerNorApproved' },
  { type: 'error', inputs: [], name: 'ApprovalQueryForNonexistentToken' },
  { type: 'error', inputs: [], name: 'BalanceQueryForZeroAddress' },
  { type: 'error', inputs: [], name: 'EmptyString' },
  { type: 'error', inputs: [], name: 'InvalidManager' },
  { type: 'error', inputs: [], name: 'ManagerDoesNotExist' },
  { type: 'error', inputs: [], name: 'ManagerRemoveBlocked' },
  { type: 'error', inputs: [], name: 'ManagerSwapBlocked' },
  { type: 'error', inputs: [], name: 'MintERC2309QuantityExceedsLimit' },
  { type: 'error', inputs: [], name: 'MintFrozen' },
  { type: 'error', inputs: [], name: 'MintToZeroAddress' },
  { type: 'error', inputs: [], name: 'MintZeroQuantity' },
  { type: 'error', inputs: [], name: 'MinterRegistrationInvalid' },
  { type: 'error', inputs: [], name: 'MismatchedArrayLengths' },
  { type: 'error', inputs: [], name: 'NotAContract' },
  { type: 'error', inputs: [], name: 'NotMinter' },
  {
    type: 'error',
    inputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
    name: 'OperatorNotAllowed',
  },
  { type: 'error', inputs: [], name: 'OverLimitSupply' },
  { type: 'error', inputs: [], name: 'OwnerQueryForNonexistentToken' },
  { type: 'error', inputs: [], name: 'OwnershipNotInitializedForExtraData' },
  { type: 'error', inputs: [], name: 'QuantityTooLarge' },
  { type: 'error', inputs: [], name: 'RoyaltyBPSInvalid' },
  { type: 'error', inputs: [], name: 'RoyaltySetBlocked' },
  { type: 'error', inputs: [], name: 'TokenDoesNotExist' },
  { type: 'error', inputs: [], name: 'TokenMintedAlready' },
  { type: 'error', inputs: [], name: 'TokenNotInRange' },
  { type: 'error', inputs: [], name: 'TransferCallerNotOwnerNorApproved' },
  { type: 'error', inputs: [], name: 'TransferFromIncorrectOwner' },
  { type: 'error', inputs: [], name: 'TransferToNonERC721ReceiverImplementer' },
  { type: 'error', inputs: [], name: 'TransferToZeroAddress' },
  { type: 'error', inputs: [], name: 'URIQueryForNonexistentToken' },
  { type: 'error', inputs: [], name: 'Unauthorized' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldBaseUri',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'newBaseURI',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'BaseURISet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'recipientAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'royaltyPercentageBPS',
        internalType: 'uint16',
        type: 'uint16',
        indexed: true,
      },
    ],
    name: 'DefaultRoyaltySet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newDefaultTokenManager',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DefaultTokenManagerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'ids',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: '_newRoyalties',
        internalType: 'struct IRoyaltyManager.Royalty[]',
        type: 'tuple[]',
        components: [
          {
            name: 'recipientAddress',
            internalType: 'address',
            type: 'address',
          },
          {
            name: 'royaltyPercentageBPS',
            internalType: 'uint16',
            type: 'uint16',
          },
        ],
        indexed: false,
      },
    ],
    name: 'GranularRoyaltiesSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_ids',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'GranularTokenManagersRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_ids',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: '_tokenManagers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'GranularTokenManagersSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newLimitSupply',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'LimitSupplySet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'minter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'registered', internalType: 'bool', type: 'bool', indexed: true },
    ],
    name: 'MinterRegistrationChanged',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'MintsFrozen' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newRoyaltyManager',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoyaltyManagerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'ids',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: 'uris',
        internalType: 'string[]',
        type: 'string[]',
        indexed: false,
      },
    ],
    name: 'TokenURIsSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_SUBSCRIPTION',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MARKETPLACE_FILTERER_REGISTRY',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'baseURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'contractURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'defaultManager',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'freezeMints',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'generativeCodeUri',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: '_observability', internalType: 'address', type: 'address' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'forwarder', internalType: 'address', type: 'address' }],
    name: 'isTrustedForwarder',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'limitSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintAmountToOneRecipient',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipients', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'mintOneToMultipleRecipients',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'recipient', internalType: 'address', type: 'address' }],
    name: 'mintOneToOneRecipient',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipients', internalType: 'address[]', type: 'address[]' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintSameAmountToMultipleRecipients',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintSpecificTokenToOneRecipient',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'tokenIds', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'mintSpecificTokensToOneRecipient',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minters',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'observability',
    outputs: [
      { name: '', internalType: 'contract IObservability', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'operatorFiltererRegistry',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'minter', internalType: 'address', type: 'address' }],
    name: 'registerMinter',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'removeDefaultTokenManager',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_ids', internalType: 'uint256[]', type: 'uint256[]' }],
    name: 'removeGranularTokenManagers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'removeMarketplaceFiltererRegistryAndUnregister',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'removeRoyaltyManager',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_tokenGroupingId', internalType: 'uint256', type: 'uint256' },
      { name: '_salePrice', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'royaltyInfo',
    outputs: [
      { name: 'receiver', internalType: 'address', type: 'address' },
      { name: 'royaltyAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'royaltyManager',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newBaseURI', internalType: 'string', type: 'string' }],
    name: 'setBaseURI',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newName', internalType: 'string', type: 'string' },
      { name: 'newSymbol', internalType: 'string', type: 'string' },
      { name: 'newContractUri', internalType: 'string', type: 'string' },
    ],
    name: 'setContractMetadata',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newRegistry', internalType: 'address', type: 'address' }],
    name: 'setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_royalty',
        internalType: 'struct IRoyaltyManager.Royalty',
        type: 'tuple',
        components: [
          {
            name: 'recipientAddress',
            internalType: 'address',
            type: 'address',
          },
          {
            name: 'royaltyPercentageBPS',
            internalType: 'uint16',
            type: 'uint16',
          },
        ],
      },
    ],
    name: 'setDefaultRoyalty',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_defaultTokenManager',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'setDefaultTokenManager',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      {
        name: '_newRoyalties',
        internalType: 'struct IRoyaltyManager.Royalty[]',
        type: 'tuple[]',
        components: [
          {
            name: 'recipientAddress',
            internalType: 'address',
            type: 'address',
          },
          {
            name: 'royaltyPercentageBPS',
            internalType: 'uint16',
            type: 'uint16',
          },
        ],
      },
    ],
    name: 'setGranularRoyalties',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_tokenManagers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setGranularTokenManagers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_limitSupply', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setLimitSupply',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'setMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_royaltyManager', internalType: 'address', type: 'address' },
    ],
    name: 'setRoyaltyManager',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'uris', internalType: 'string[]', type: 'string[]' },
    ],
    name: 'setTokenURIs',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenManager',
    outputs: [{ name: 'manager', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'minter', internalType: 'address', type: 'address' }],
    name: 'unregisterMinter',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IBeaconUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iBeaconUpgradeableABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'implementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAccessControl
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAccessControlABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'previousAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'newAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleRevoked',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IEAS
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ieasABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'recipient',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'attester',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'uid', internalType: 'bytes32', type: 'bytes32', indexed: false },
      {
        name: 'schema',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'Attested',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'recipient',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'attester',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'uid', internalType: 'bytes32', type: 'bytes32', indexed: false },
      {
        name: 'schema',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'Revoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'revoker',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'data', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'timestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: true,
      },
    ],
    name: 'RevokedOffchain',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'data', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'timestamp',
        internalType: 'uint64',
        type: 'uint64',
        indexed: true,
      },
    ],
    name: 'Timestamped',
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'request',
        internalType: 'struct AttestationRequest',
        type: 'tuple',
        components: [
          { name: 'schema', internalType: 'bytes32', type: 'bytes32' },
          {
            name: 'data',
            internalType: 'struct AttestationRequestData',
            type: 'tuple',
            components: [
              { name: 'recipient', internalType: 'address', type: 'address' },
              {
                name: 'expirationTime',
                internalType: 'uint64',
                type: 'uint64',
              },
              { name: 'revocable', internalType: 'bool', type: 'bool' },
              { name: 'refUID', internalType: 'bytes32', type: 'bytes32' },
              { name: 'data', internalType: 'bytes', type: 'bytes' },
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
        ],
      },
    ],
    name: 'attest',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'delegatedRequest',
        internalType: 'struct DelegatedAttestationRequest',
        type: 'tuple',
        components: [
          { name: 'schema', internalType: 'bytes32', type: 'bytes32' },
          {
            name: 'data',
            internalType: 'struct AttestationRequestData',
            type: 'tuple',
            components: [
              { name: 'recipient', internalType: 'address', type: 'address' },
              {
                name: 'expirationTime',
                internalType: 'uint64',
                type: 'uint64',
              },
              { name: 'revocable', internalType: 'bool', type: 'bool' },
              { name: 'refUID', internalType: 'bytes32', type: 'bytes32' },
              { name: 'data', internalType: 'bytes', type: 'bytes' },
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'signature',
            internalType: 'struct EIP712Signature',
            type: 'tuple',
            components: [
              { name: 'v', internalType: 'uint8', type: 'uint8' },
              { name: 'r', internalType: 'bytes32', type: 'bytes32' },
              { name: 's', internalType: 'bytes32', type: 'bytes32' },
            ],
          },
          { name: 'attester', internalType: 'address', type: 'address' },
        ],
      },
    ],
    name: 'attestByDelegation',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'uid', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAttestation',
    outputs: [
      {
        name: '',
        internalType: 'struct Attestation',
        type: 'tuple',
        components: [
          { name: 'uid', internalType: 'bytes32', type: 'bytes32' },
          { name: 'schema', internalType: 'bytes32', type: 'bytes32' },
          { name: 'time', internalType: 'uint64', type: 'uint64' },
          { name: 'expirationTime', internalType: 'uint64', type: 'uint64' },
          { name: 'revocationTime', internalType: 'uint64', type: 'uint64' },
          { name: 'refUID', internalType: 'bytes32', type: 'bytes32' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'attester', internalType: 'address', type: 'address' },
          { name: 'revocable', internalType: 'bool', type: 'bool' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'revoker', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'getRevokeOffchain',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSchemaRegistry',
    outputs: [
      { name: '', internalType: 'contract ISchemaRegistry', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getTimestamp',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'uid', internalType: 'bytes32', type: 'bytes32' }],
    name: 'isAttestationValid',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'multiRequests',
        internalType: 'struct MultiAttestationRequest[]',
        type: 'tuple[]',
        components: [
          { name: 'schema', internalType: 'bytes32', type: 'bytes32' },
          {
            name: 'data',
            internalType: 'struct AttestationRequestData[]',
            type: 'tuple[]',
            components: [
              { name: 'recipient', internalType: 'address', type: 'address' },
              {
                name: 'expirationTime',
                internalType: 'uint64',
                type: 'uint64',
              },
              { name: 'revocable', internalType: 'bool', type: 'bool' },
              { name: 'refUID', internalType: 'bytes32', type: 'bytes32' },
              { name: 'data', internalType: 'bytes', type: 'bytes' },
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
        ],
      },
    ],
    name: 'multiAttest',
    outputs: [{ name: '', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'multiDelegatedRequests',
        internalType: 'struct MultiDelegatedAttestationRequest[]',
        type: 'tuple[]',
        components: [
          { name: 'schema', internalType: 'bytes32', type: 'bytes32' },
          {
            name: 'data',
            internalType: 'struct AttestationRequestData[]',
            type: 'tuple[]',
            components: [
              { name: 'recipient', internalType: 'address', type: 'address' },
              {
                name: 'expirationTime',
                internalType: 'uint64',
                type: 'uint64',
              },
              { name: 'revocable', internalType: 'bool', type: 'bool' },
              { name: 'refUID', internalType: 'bytes32', type: 'bytes32' },
              { name: 'data', internalType: 'bytes', type: 'bytes' },
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'signatures',
            internalType: 'struct EIP712Signature[]',
            type: 'tuple[]',
            components: [
              { name: 'v', internalType: 'uint8', type: 'uint8' },
              { name: 'r', internalType: 'bytes32', type: 'bytes32' },
              { name: 's', internalType: 'bytes32', type: 'bytes32' },
            ],
          },
          { name: 'attester', internalType: 'address', type: 'address' },
        ],
      },
    ],
    name: 'multiAttestByDelegation',
    outputs: [{ name: '', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'multiRequests',
        internalType: 'struct MultiRevocationRequest[]',
        type: 'tuple[]',
        components: [
          { name: 'schema', internalType: 'bytes32', type: 'bytes32' },
          {
            name: 'data',
            internalType: 'struct RevocationRequestData[]',
            type: 'tuple[]',
            components: [
              { name: 'uid', internalType: 'bytes32', type: 'bytes32' },
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
        ],
      },
    ],
    name: 'multiRevoke',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'multiDelegatedRequests',
        internalType: 'struct MultiDelegatedRevocationRequest[]',
        type: 'tuple[]',
        components: [
          { name: 'schema', internalType: 'bytes32', type: 'bytes32' },
          {
            name: 'data',
            internalType: 'struct RevocationRequestData[]',
            type: 'tuple[]',
            components: [
              { name: 'uid', internalType: 'bytes32', type: 'bytes32' },
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'signatures',
            internalType: 'struct EIP712Signature[]',
            type: 'tuple[]',
            components: [
              { name: 'v', internalType: 'uint8', type: 'uint8' },
              { name: 'r', internalType: 'bytes32', type: 'bytes32' },
              { name: 's', internalType: 'bytes32', type: 'bytes32' },
            ],
          },
          { name: 'revoker', internalType: 'address', type: 'address' },
        ],
      },
    ],
    name: 'multiRevokeByDelegation',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes32[]', type: 'bytes32[]' }],
    name: 'multiRevokeOffchain',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes32[]', type: 'bytes32[]' }],
    name: 'multiTimestamp',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'request',
        internalType: 'struct RevocationRequest',
        type: 'tuple',
        components: [
          { name: 'schema', internalType: 'bytes32', type: 'bytes32' },
          {
            name: 'data',
            internalType: 'struct RevocationRequestData',
            type: 'tuple',
            components: [
              { name: 'uid', internalType: 'bytes32', type: 'bytes32' },
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
        ],
      },
    ],
    name: 'revoke',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'delegatedRequest',
        internalType: 'struct DelegatedRevocationRequest',
        type: 'tuple',
        components: [
          { name: 'schema', internalType: 'bytes32', type: 'bytes32' },
          {
            name: 'data',
            internalType: 'struct RevocationRequestData',
            type: 'tuple',
            components: [
              { name: 'uid', internalType: 'bytes32', type: 'bytes32' },
              { name: 'value', internalType: 'uint256', type: 'uint256' },
            ],
          },
          {
            name: 'signature',
            internalType: 'struct EIP712Signature',
            type: 'tuple',
            components: [
              { name: 'v', internalType: 'uint8', type: 'uint8' },
              { name: 'r', internalType: 'bytes32', type: 'bytes32' },
              { name: 's', internalType: 'bytes32', type: 'bytes32' },
            ],
          },
          { name: 'revoker', internalType: 'address', type: 'address' },
        ],
      },
    ],
    name: 'revokeByDelegation',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes32', type: 'bytes32' }],
    name: 'revokeOffchain',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes32', type: 'bytes32' }],
    name: 'timestamp',
    outputs: [{ name: '', internalType: 'uint64', type: 'uint64' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1271
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1271ABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'hash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'signature', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'isValidSignature',
    outputs: [{ name: 'magicValue', internalType: 'bytes4', type: 'bytes4' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC165Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc165UpgradeableABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC2981Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc2981UpgradeableABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'salePrice', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'royaltyInfo',
    outputs: [
      { name: 'receiver', internalType: 'address', type: 'address' },
      { name: 'royaltyAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC2771Recipient
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc2771RecipientABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'forwarder', internalType: 'address', type: 'address' }],
    name: 'isTrustedForwarder',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC6551Account
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc6551AccountABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'signer', internalType: 'address', type: 'address' },
      { name: 'context', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'isValidSigner',
    outputs: [{ name: 'magicValue', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'state',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token',
    outputs: [
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'tokenContract', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC6551Executable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc6551ExecutableABI = [
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'operation', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execute',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC6551Registry
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc6551RegistryABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'chainId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'tokenContract',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'salt',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AccountCreated',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'tokenContract', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'salt', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'account',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
      { name: 'chainId', internalType: 'uint256', type: 'uint256' },
      { name: 'tokenContract', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'salt', internalType: 'uint256', type: 'uint256' },
      { name: 'initData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'createAccount',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: '_approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721GeneralMint
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721GeneralMintABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintAmountToOneRecipient',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipients', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'mintOneToMultipleRecipients',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'recipient', internalType: 'address', type: 'address' }],
    name: 'mintOneToOneRecipient',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipients', internalType: 'address[]', type: 'address[]' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintSameAmountToMultipleRecipients',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintSpecificTokenToOneRecipient',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'tokenIds', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'mintSpecificTokensToOneRecipient',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721AUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721AUpgradeableABI = [
  { type: 'error', inputs: [], name: 'ApprovalCallerNotOwnerNorApproved' },
  { type: 'error', inputs: [], name: 'ApprovalQueryForNonexistentToken' },
  { type: 'error', inputs: [], name: 'BalanceQueryForZeroAddress' },
  { type: 'error', inputs: [], name: 'MintERC2309QuantityExceedsLimit' },
  { type: 'error', inputs: [], name: 'MintToZeroAddress' },
  { type: 'error', inputs: [], name: 'MintZeroQuantity' },
  { type: 'error', inputs: [], name: 'OwnerQueryForNonexistentToken' },
  { type: 'error', inputs: [], name: 'OwnershipNotInitializedForExtraData' },
  { type: 'error', inputs: [], name: 'QuantityTooLarge' },
  { type: 'error', inputs: [], name: 'TokenMintedAlready' },
  { type: 'error', inputs: [], name: 'TransferCallerNotOwnerNorApproved' },
  { type: 'error', inputs: [], name: 'TransferFromIncorrectOwner' },
  { type: 'error', inputs: [], name: 'TransferToNonERC721ReceiverImplementer' },
  { type: 'error', inputs: [], name: 'TransferToZeroAddress' },
  { type: 'error', inputs: [], name: 'URIQueryForNonexistentToken' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: '_approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721Receiver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721ReceiverABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC721Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC721Metadata
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc721MetadataABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: '_approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IForwarder
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iForwarderABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'domainSeparator',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'domainValue',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
    ],
    name: 'DomainRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'typeHash',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'typeStr',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'RequestTypeRegistered',
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'forwardRequest',
        internalType: 'struct IForwarder.ForwardRequest',
        type: 'tuple',
        components: [
          { name: 'from', internalType: 'address', type: 'address' },
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'gas', internalType: 'uint256', type: 'uint256' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
          { name: 'validUntilTime', internalType: 'uint256', type: 'uint256' },
        ],
      },
      { name: 'domainSeparator', internalType: 'bytes32', type: 'bytes32' },
      { name: 'requestTypeHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'suffixData', internalType: 'bytes', type: 'bytes' },
      { name: 'signature', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'execute',
    outputs: [
      { name: 'success', internalType: 'bool', type: 'bool' },
      { name: 'ret', internalType: 'bytes', type: 'bytes' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'from', internalType: 'address', type: 'address' }],
    name: 'getNonce',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'version', internalType: 'string', type: 'string' },
    ],
    name: 'registerDomainSeparator',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'typeName', internalType: 'string', type: 'string' },
      { name: 'typeSuffix', internalType: 'string', type: 'string' },
    ],
    name: 'registerRequestType',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'forwardRequest',
        internalType: 'struct IForwarder.ForwardRequest',
        type: 'tuple',
        components: [
          { name: 'from', internalType: 'address', type: 'address' },
          { name: 'to', internalType: 'address', type: 'address' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'gas', internalType: 'uint256', type: 'uint256' },
          { name: 'nonce', internalType: 'uint256', type: 'uint256' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
          { name: 'validUntilTime', internalType: 'uint256', type: 'uint256' },
        ],
      },
      { name: 'domainSeparator', internalType: 'bytes32', type: 'bytes32' },
      { name: 'requestTypeHash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'suffixData', internalType: 'bytes', type: 'bytes' },
      { name: 'signature', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'verify',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IObservability
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iObservabilityABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'contractAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newBaseUri',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'BaseUriSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'contractAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'symbol',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'contractURI',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'ContractMetadataSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'contractAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'recipientAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'royaltyPercentageBPS',
        internalType: 'uint16',
        type: 'uint16',
        indexed: true,
      },
    ],
    name: 'DefaultRoyaltySet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'contractAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newDefaultTokenManager',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DefaultTokenManagerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'deployer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'contractAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'GenerativeSeriesDeployed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'contractAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'ids',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: '_newRoyalties',
        internalType: 'struct IRoyaltyManager.Royalty[]',
        type: 'tuple[]',
        components: [
          {
            name: 'recipientAddress',
            internalType: 'address',
            type: 'address',
          },
          {
            name: 'royaltyPercentageBPS',
            internalType: 'uint16',
            type: 'uint16',
          },
        ],
        indexed: false,
      },
    ],
    name: 'GranularRoyaltiesSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'contractAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: '_ids',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'GranularTokenManagersRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'contractAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: '_ids',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: '_tokenManagers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'GranularTokenManagersSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'contractAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'hashedURIData',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: 'hashedRotationData',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
      {
        name: '_supply',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'HashedMetadataConfigSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'contractAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newLimitSupply',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'LimitSupplySet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'contractAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'minter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'registered', internalType: 'bool', type: 'bool', indexed: true },
    ],
    name: 'MinterRegistrationChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'contractAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MintsFrozen',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'deployer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'contractAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'MultipleEditionsDeployed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'contractAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'key', internalType: 'bytes', type: 'bytes', indexed: false },
      {
        name: 'newRotationKey',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Revealed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'contractAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newRoyaltyManager',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoyaltyManagerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'deployer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'contractAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SeriesDeployed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'deployer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'contractAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'SingleEditionDeployed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'contractAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'ids',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: 'uris',
        internalType: 'string[]',
        type: 'string[]',
        indexed: false,
      },
    ],
    name: 'TokenURIsSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'contractAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: false },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newBaseUri', internalType: 'string', type: 'string' }],
    name: 'emitBaseUriSet',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'symbol', internalType: 'string', type: 'string' },
      { name: 'contractURI', internalType: 'string', type: 'string' },
    ],
    name: 'emitContractMetadataSet',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipientAddress', internalType: 'address', type: 'address' },
      { name: 'royaltyPercentageBPS', internalType: 'uint16', type: 'uint16' },
    ],
    name: 'emitDefaultRoyaltySet',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'newDefaultTokenManager',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'emitDefaultTokenManagerChanged',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'contractAddress', internalType: 'address', type: 'address' },
    ],
    name: 'emitGenerativeSeriesDeployed',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      {
        name: '_newRoyalties',
        internalType: 'struct IRoyaltyManager.Royalty[]',
        type: 'tuple[]',
        components: [
          {
            name: 'recipientAddress',
            internalType: 'address',
            type: 'address',
          },
          {
            name: 'royaltyPercentageBPS',
            internalType: 'uint16',
            type: 'uint16',
          },
        ],
      },
    ],
    name: 'emitGranularRoyaltiesSet',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_ids', internalType: 'uint256[]', type: 'uint256[]' }],
    name: 'emitGranularTokenManagersRemoved',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_tokenManagers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'emitGranularTokenManagersSet',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'hashedURIData', internalType: 'bytes', type: 'bytes' },
      { name: 'hashedRotationData', internalType: 'bytes', type: 'bytes' },
      { name: '_supply', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'emitHashedMetadataConfigSet',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newLimitSupply', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'emitLimitSupplySet',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'minter', internalType: 'address', type: 'address' },
      { name: 'registered', internalType: 'bool', type: 'bool' },
    ],
    name: 'emitMinterRegistrationChanged',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'emitMintsFrozen',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'contractAddress', internalType: 'address', type: 'address' },
    ],
    name: 'emitMultipleEditionsDeployed',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'key', internalType: 'bytes', type: 'bytes' },
      { name: 'newRotationKey', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'emitRevealed',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newRoyaltyManager', internalType: 'address', type: 'address' },
    ],
    name: 'emitRoyaltyManagerChanged',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'contractAddress', internalType: 'address', type: 'address' },
    ],
    name: 'emitSeriesDeployed',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'contractAddress', internalType: 'address', type: 'address' },
    ],
    name: 'emitSingleEditionDeployed',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'uris', internalType: 'string[]', type: 'string[]' },
    ],
    name: 'emitTokenURIsSet',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'emitTransfer',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IPaymaster
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iPaymasterABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getGasAndDataLimits',
    outputs: [
      {
        name: 'limits',
        internalType: 'struct IPaymaster.GasAndDataLimits',
        type: 'tuple',
        components: [
          {
            name: 'acceptanceBudget',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preRelayedCallGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'postRelayedCallGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'calldataSizeLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getRelayHub',
    outputs: [{ name: 'relayHub', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTrustedForwarder',
    outputs: [
      { name: 'trustedForwarder', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'context', internalType: 'bytes', type: 'bytes' },
      { name: 'success', internalType: 'bool', type: 'bool' },
      { name: 'gasUseWithoutPost', internalType: 'uint256', type: 'uint256' },
      {
        name: 'relayData',
        internalType: 'struct GsnTypes.RelayData',
        type: 'tuple',
        components: [
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'transactionCalldataGasUsed',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'relayWorker', internalType: 'address', type: 'address' },
          { name: 'paymaster', internalType: 'address', type: 'address' },
          { name: 'forwarder', internalType: 'address', type: 'address' },
          { name: 'paymasterData', internalType: 'bytes', type: 'bytes' },
          { name: 'clientId', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'postRelayedCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'relayRequest',
        internalType: 'struct GsnTypes.RelayRequest',
        type: 'tuple',
        components: [
          {
            name: 'request',
            internalType: 'struct IForwarder.ForwardRequest',
            type: 'tuple',
            components: [
              { name: 'from', internalType: 'address', type: 'address' },
              { name: 'to', internalType: 'address', type: 'address' },
              { name: 'value', internalType: 'uint256', type: 'uint256' },
              { name: 'gas', internalType: 'uint256', type: 'uint256' },
              { name: 'nonce', internalType: 'uint256', type: 'uint256' },
              { name: 'data', internalType: 'bytes', type: 'bytes' },
              {
                name: 'validUntilTime',
                internalType: 'uint256',
                type: 'uint256',
              },
            ],
          },
          {
            name: 'relayData',
            internalType: 'struct GsnTypes.RelayData',
            type: 'tuple',
            components: [
              {
                name: 'maxFeePerGas',
                internalType: 'uint256',
                type: 'uint256',
              },
              {
                name: 'maxPriorityFeePerGas',
                internalType: 'uint256',
                type: 'uint256',
              },
              {
                name: 'transactionCalldataGasUsed',
                internalType: 'uint256',
                type: 'uint256',
              },
              { name: 'relayWorker', internalType: 'address', type: 'address' },
              { name: 'paymaster', internalType: 'address', type: 'address' },
              { name: 'forwarder', internalType: 'address', type: 'address' },
              { name: 'paymasterData', internalType: 'bytes', type: 'bytes' },
              { name: 'clientId', internalType: 'uint256', type: 'uint256' },
            ],
          },
        ],
      },
      { name: 'signature', internalType: 'bytes', type: 'bytes' },
      { name: 'approvalData', internalType: 'bytes', type: 'bytes' },
      { name: 'maxPossibleGas', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'preRelayedCall',
    outputs: [
      { name: 'context', internalType: 'bytes', type: 'bytes' },
      { name: 'rejectOnRecipientRevert', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'versionPaymaster',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IOperatorFilterRegistry
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iOperatorFilterRegistryABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'codeHashOf',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'registrant', internalType: 'address', type: 'address' },
      { name: 'registrantToCopy', internalType: 'address', type: 'address' },
    ],
    name: 'copyEntriesOf',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'registrant', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'filteredCodeHashAt',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'filteredCodeHashes',
    outputs: [{ name: '', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'registrant', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'filteredOperatorAt',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'filteredOperators',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'registrant', internalType: 'address', type: 'address' },
      { name: 'codeHash', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'isCodeHashFiltered',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'registrant', internalType: 'address', type: 'address' },
      { name: 'operatorWithCode', internalType: 'address', type: 'address' },
    ],
    name: 'isCodeHashOfFiltered',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'registrant', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isOperatorAllowed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'registrant', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isOperatorFiltered',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'isRegistered',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'registrant', internalType: 'address', type: 'address' }],
    name: 'register',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'registrant', internalType: 'address', type: 'address' },
      { name: 'registrantToCopy', internalType: 'address', type: 'address' },
    ],
    name: 'registerAndCopyEntries',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'registrant', internalType: 'address', type: 'address' },
      { name: 'subscription', internalType: 'address', type: 'address' },
    ],
    name: 'registerAndSubscribe',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'registrant', internalType: 'address', type: 'address' },
      {
        name: 'registrantToSubscribe',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'subscribe',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'registrant', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'subscriberAt',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'registrant', internalType: 'address', type: 'address' }],
    name: 'subscribers',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'subscriptionOf',
    outputs: [{ name: 'registrant', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'unregister',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'registrant', internalType: 'address', type: 'address' },
      { name: 'copyExistingEntries', internalType: 'bool', type: 'bool' },
    ],
    name: 'unsubscribe',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'registrant', internalType: 'address', type: 'address' },
      { name: 'codehash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'filtered', internalType: 'bool', type: 'bool' },
    ],
    name: 'updateCodeHash',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'registrant', internalType: 'address', type: 'address' },
      { name: 'codeHashes', internalType: 'bytes32[]', type: 'bytes32[]' },
      { name: 'filtered', internalType: 'bool', type: 'bool' },
    ],
    name: 'updateCodeHashes',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'registrant', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'filtered', internalType: 'bool', type: 'bool' },
    ],
    name: 'updateOperator',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'registrant', internalType: 'address', type: 'address' },
      { name: 'operators', internalType: 'address[]', type: 'address[]' },
      { name: 'filtered', internalType: 'bool', type: 'bool' },
    ],
    name: 'updateOperators',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IPostBurn
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iPostBurnABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'postBurn',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IPostTransfer
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iPostTransferABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'postSafeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'postTransferFrom',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IRelayHub
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iRelayHubABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'relayManager',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'balance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AbandonedRelayManagerBalanceEscheated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'paymaster',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Deposited',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'deprecationTime',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'HubDeprecated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'config',
        internalType: 'struct IRelayHub.RelayHubConfig',
        type: 'tuple',
        components: [
          { name: 'maxWorkerCount', internalType: 'uint256', type: 'uint256' },
          { name: 'gasReserve', internalType: 'uint256', type: 'uint256' },
          { name: 'postOverhead', internalType: 'uint256', type: 'uint256' },
          { name: 'gasOverhead', internalType: 'uint256', type: 'uint256' },
          {
            name: 'minimumUnstakeDelay',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'devAddress', internalType: 'address', type: 'address' },
          { name: 'devFee', internalType: 'uint8', type: 'uint8' },
          { name: 'baseRelayFee', internalType: 'uint80', type: 'uint80' },
          { name: 'pctRelayFee', internalType: 'uint16', type: 'uint16' },
        ],
        indexed: false,
      },
    ],
    name: 'RelayHubConfigured',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'relayManager',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newRelayWorkers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
      {
        name: 'workersCount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RelayWorkersAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'token',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'minimumStake',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'StakingTokenDataChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'relayManager',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'paymaster',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'relayRequestID',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'from',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      { name: 'to', internalType: 'address', type: 'address', indexed: false },
      {
        name: 'relayWorker',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'selector',
        internalType: 'bytes4',
        type: 'bytes4',
        indexed: false,
      },
      {
        name: 'innerGasUsed',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'reason', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'TransactionRejectedByPaymaster',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'relayManager',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'relayWorker',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'relayRequestID',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'from',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      { name: 'to', internalType: 'address', type: 'address', indexed: false },
      {
        name: 'paymaster',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'selector',
        internalType: 'bytes4',
        type: 'bytes4',
        indexed: false,
      },
      {
        name: 'status',
        internalType: 'enum IRelayHub.RelayCallStatus',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'charge',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'TransactionRelayed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'status',
        internalType: 'enum IRelayHub.RelayCallStatus',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'returnValue',
        internalType: 'bytes',
        type: 'bytes',
        indexed: false,
      },
    ],
    name: 'TransactionResult',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'dest', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Withdrawn',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newRelayWorkers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'addRelayWorkers',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'aggregateGasleft',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'gasUsed', internalType: 'uint256', type: 'uint256' },
      {
        name: 'relayData',
        internalType: 'struct GsnTypes.RelayData',
        type: 'tuple',
        components: [
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'transactionCalldataGasUsed',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'relayWorker', internalType: 'address', type: 'address' },
          { name: 'paymaster', internalType: 'address', type: 'address' },
          { name: 'forwarder', internalType: 'address', type: 'address' },
          { name: 'paymasterData', internalType: 'bytes', type: 'bytes' },
          { name: 'clientId', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'calculateCharge',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'charge', internalType: 'uint256', type: 'uint256' }],
    name: 'calculateDevCharge',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'depositFor',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_deprecationTime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'deprecateHub',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'relayManager', internalType: 'address', type: 'address' },
    ],
    name: 'escheatAbandonedRelayBalance',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBatchGateway',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getConfiguration',
    outputs: [
      {
        name: 'config',
        internalType: 'struct IRelayHub.RelayHubConfig',
        type: 'tuple',
        components: [
          { name: 'maxWorkerCount', internalType: 'uint256', type: 'uint256' },
          { name: 'gasReserve', internalType: 'uint256', type: 'uint256' },
          { name: 'postOverhead', internalType: 'uint256', type: 'uint256' },
          { name: 'gasOverhead', internalType: 'uint256', type: 'uint256' },
          {
            name: 'minimumUnstakeDelay',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'devAddress', internalType: 'address', type: 'address' },
          { name: 'devFee', internalType: 'uint8', type: 'uint8' },
          { name: 'baseRelayFee', internalType: 'uint80', type: 'uint80' },
          { name: 'pctRelayFee', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCreationBlock',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDeprecationTime',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'contract IERC20', type: 'address' },
    ],
    name: 'getMinimumStakePerToken',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getPenalizer',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getRelayRegistrar',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getStakeManager',
    outputs: [
      { name: '', internalType: 'contract IStakeManager', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'manager', internalType: 'address', type: 'address' }],
    name: 'getWorkerCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'worker', internalType: 'address', type: 'address' }],
    name: 'getWorkerManager',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isDeprecated',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'relayManager', internalType: 'address', type: 'address' },
    ],
    name: 'isRelayEscheatable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'relayManager', internalType: 'address', type: 'address' },
    ],
    name: 'onRelayServerRegistered',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'relayWorker', internalType: 'address', type: 'address' },
      { name: 'beneficiary', internalType: 'address payable', type: 'address' },
    ],
    name: 'penalize',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'domainSeparatorName', internalType: 'string', type: 'string' },
      { name: 'maxAcceptanceBudget', internalType: 'uint256', type: 'uint256' },
      {
        name: 'relayRequest',
        internalType: 'struct GsnTypes.RelayRequest',
        type: 'tuple',
        components: [
          {
            name: 'request',
            internalType: 'struct IForwarder.ForwardRequest',
            type: 'tuple',
            components: [
              { name: 'from', internalType: 'address', type: 'address' },
              { name: 'to', internalType: 'address', type: 'address' },
              { name: 'value', internalType: 'uint256', type: 'uint256' },
              { name: 'gas', internalType: 'uint256', type: 'uint256' },
              { name: 'nonce', internalType: 'uint256', type: 'uint256' },
              { name: 'data', internalType: 'bytes', type: 'bytes' },
              {
                name: 'validUntilTime',
                internalType: 'uint256',
                type: 'uint256',
              },
            ],
          },
          {
            name: 'relayData',
            internalType: 'struct GsnTypes.RelayData',
            type: 'tuple',
            components: [
              {
                name: 'maxFeePerGas',
                internalType: 'uint256',
                type: 'uint256',
              },
              {
                name: 'maxPriorityFeePerGas',
                internalType: 'uint256',
                type: 'uint256',
              },
              {
                name: 'transactionCalldataGasUsed',
                internalType: 'uint256',
                type: 'uint256',
              },
              { name: 'relayWorker', internalType: 'address', type: 'address' },
              { name: 'paymaster', internalType: 'address', type: 'address' },
              { name: 'forwarder', internalType: 'address', type: 'address' },
              { name: 'paymasterData', internalType: 'bytes', type: 'bytes' },
              { name: 'clientId', internalType: 'uint256', type: 'uint256' },
            ],
          },
        ],
      },
      { name: 'signature', internalType: 'bytes', type: 'bytes' },
      { name: 'approvalData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'relayCall',
    outputs: [
      { name: 'paymasterAccepted', internalType: 'bool', type: 'bool' },
      { name: 'charge', internalType: 'uint256', type: 'uint256' },
      {
        name: 'status',
        internalType: 'enum IRelayHub.RelayCallStatus',
        type: 'uint8',
      },
      { name: 'returnValue', internalType: 'bytes', type: 'bytes' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_config',
        internalType: 'struct IRelayHub.RelayHubConfig',
        type: 'tuple',
        components: [
          { name: 'maxWorkerCount', internalType: 'uint256', type: 'uint256' },
          { name: 'gasReserve', internalType: 'uint256', type: 'uint256' },
          { name: 'postOverhead', internalType: 'uint256', type: 'uint256' },
          { name: 'gasOverhead', internalType: 'uint256', type: 'uint256' },
          {
            name: 'minimumUnstakeDelay',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'devAddress', internalType: 'address', type: 'address' },
          { name: 'devFee', internalType: 'uint8', type: 'uint8' },
          { name: 'baseRelayFee', internalType: 'uint80', type: 'uint80' },
          { name: 'pctRelayFee', internalType: 'uint16', type: 'uint16' },
        ],
      },
    ],
    name: 'setConfiguration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'contract IERC20[]', type: 'address[]' },
      { name: 'minimumStake', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'setMinimumStakes',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'relayManager', internalType: 'address', type: 'address' },
    ],
    name: 'verifyRelayManagerStaked',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'versionHub',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'dest', internalType: 'address payable', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdraw',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'dest', internalType: 'address payable[]', type: 'address[]' },
      { name: 'amount', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'withdrawMultiple',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IRoyaltyManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iRoyaltyManagerABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'sender', internalType: 'address', type: 'address' }],
    name: 'canRemoveItself',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      {
        name: 'royalty',
        internalType: 'struct IRoyaltyManager.Royalty',
        type: 'tuple',
        components: [
          {
            name: 'recipientAddress',
            internalType: 'address',
            type: 'address',
          },
          {
            name: 'royaltyPercentageBPS',
            internalType: 'uint16',
            type: 'uint16',
          },
        ],
      },
      { name: 'sender', internalType: 'address', type: 'address' },
    ],
    name: 'canSetDefaultRoyalty',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      {
        name: 'royalty',
        internalType: 'struct IRoyaltyManager.Royalty',
        type: 'tuple',
        components: [
          {
            name: 'recipientAddress',
            internalType: 'address',
            type: 'address',
          },
          {
            name: 'royaltyPercentageBPS',
            internalType: 'uint16',
            type: 'uint16',
          },
        ],
      },
      { name: 'sender', internalType: 'address', type: 'address' },
    ],
    name: 'canSetGranularRoyalty',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'newRoyaltyManager', internalType: 'address', type: 'address' },
      { name: 'sender', internalType: 'address', type: 'address' },
    ],
    name: 'canSwap',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISchemaRegistry
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iSchemaRegistryABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'uid', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'registerer',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Registered',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'uid', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getSchema',
    outputs: [
      {
        name: '',
        internalType: 'struct SchemaRecord',
        type: 'tuple',
        components: [
          { name: 'uid', internalType: 'bytes32', type: 'bytes32' },
          {
            name: 'resolver',
            internalType: 'contract ISchemaResolver',
            type: 'address',
          },
          { name: 'revocable', internalType: 'bool', type: 'bool' },
          { name: 'schema', internalType: 'string', type: 'string' },
        ],
      },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'schema', internalType: 'string', type: 'string' },
      {
        name: 'resolver',
        internalType: 'contract ISchemaResolver',
        type: 'address',
      },
      { name: 'revocable', internalType: 'bool', type: 'bool' },
    ],
    name: 'register',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISchemaResolver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iSchemaResolverABI = [
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'attestation',
        internalType: 'struct Attestation',
        type: 'tuple',
        components: [
          { name: 'uid', internalType: 'bytes32', type: 'bytes32' },
          { name: 'schema', internalType: 'bytes32', type: 'bytes32' },
          { name: 'time', internalType: 'uint64', type: 'uint64' },
          { name: 'expirationTime', internalType: 'uint64', type: 'uint64' },
          { name: 'revocationTime', internalType: 'uint64', type: 'uint64' },
          { name: 'refUID', internalType: 'bytes32', type: 'bytes32' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'attester', internalType: 'address', type: 'address' },
          { name: 'revocable', internalType: 'bool', type: 'bool' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'attest',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'isPayable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'attestations',
        internalType: 'struct Attestation[]',
        type: 'tuple[]',
        components: [
          { name: 'uid', internalType: 'bytes32', type: 'bytes32' },
          { name: 'schema', internalType: 'bytes32', type: 'bytes32' },
          { name: 'time', internalType: 'uint64', type: 'uint64' },
          { name: 'expirationTime', internalType: 'uint64', type: 'uint64' },
          { name: 'revocationTime', internalType: 'uint64', type: 'uint64' },
          { name: 'refUID', internalType: 'bytes32', type: 'bytes32' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'attester', internalType: 'address', type: 'address' },
          { name: 'revocable', internalType: 'bool', type: 'bool' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'multiAttest',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'attestations',
        internalType: 'struct Attestation[]',
        type: 'tuple[]',
        components: [
          { name: 'uid', internalType: 'bytes32', type: 'bytes32' },
          { name: 'schema', internalType: 'bytes32', type: 'bytes32' },
          { name: 'time', internalType: 'uint64', type: 'uint64' },
          { name: 'expirationTime', internalType: 'uint64', type: 'uint64' },
          { name: 'revocationTime', internalType: 'uint64', type: 'uint64' },
          { name: 'refUID', internalType: 'bytes32', type: 'bytes32' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'attester', internalType: 'address', type: 'address' },
          { name: 'revocable', internalType: 'bool', type: 'bool' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'multiRevoke',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'attestation',
        internalType: 'struct Attestation',
        type: 'tuple',
        components: [
          { name: 'uid', internalType: 'bytes32', type: 'bytes32' },
          { name: 'schema', internalType: 'bytes32', type: 'bytes32' },
          { name: 'time', internalType: 'uint64', type: 'uint64' },
          { name: 'expirationTime', internalType: 'uint64', type: 'uint64' },
          { name: 'revocationTime', internalType: 'uint64', type: 'uint64' },
          { name: 'refUID', internalType: 'bytes32', type: 'bytes32' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'attester', internalType: 'address', type: 'address' },
          { name: 'revocable', internalType: 'bool', type: 'bool' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'revoke',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ITokenManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iTokenManagerABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'canRemoveItself',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'newTokenManager', internalType: 'address', type: 'address' },
    ],
    name: 'canSwap',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'newData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'canUpdateMetadata',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MarketplaceFilterer
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const marketplaceFiltererABI = [
  { type: 'error', inputs: [], name: 'NotAContract' },
  {
    type: 'error',
    inputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
    name: 'OperatorNotAllowed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_SUBSCRIPTION',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MARKETPLACE_FILTERER_REGISTRY',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'operatorFiltererRegistry',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'removeMarketplaceFiltererRegistryAndUnregister',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newRegistry', internalType: 'address', type: 'address' }],
    name: 'setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'setMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Initializable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const initializableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IStakeManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iStakeManagerABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'relayManager',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AbandonedRelayManagerStakeEscheated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'burnAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BurnAddressSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'devAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DevAddressSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'relayManager',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'relayHub',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'HubAuthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'relayManager',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'relayHub',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'removalTime',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'HubUnauthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'relayManager',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnerSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'relayManager',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'abandonedTime',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RelayServerAbandoned',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'relayManager',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'keepaliveTime',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RelayServerKeepalive',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'relayManager',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: false,
      },
      {
        name: 'stake',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'unstakeDelay',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'StakeAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'relayManager',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'beneficiary',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: false,
      },
      {
        name: 'reward',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'StakePenalized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'relayManager',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'withdrawTime',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'StakeUnlocked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'relayManager',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'token',
        internalType: 'contract IERC20',
        type: 'address',
        indexed: false,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'StakeWithdrawn',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'relayHub', internalType: 'address', type: 'address' }],
    name: 'authorizeHubByManager',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'relayManager', internalType: 'address', type: 'address' },
      { name: 'relayHub', internalType: 'address', type: 'address' },
    ],
    name: 'authorizeHubByOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'relayManager', internalType: 'address', type: 'address' },
    ],
    name: 'escheatAbandonedRelayStake',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAbandonedRelayServerConfig',
    outputs: [
      {
        name: '',
        internalType: 'struct IStakeManager.AbandonedRelayServerConfig',
        type: 'tuple',
        components: [
          { name: 'devAddress', internalType: 'address', type: 'address' },
          {
            name: 'abandonmentDelay',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'escheatmentDelay',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBurnAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCreationBlock',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getMaxUnstakeDelay',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'relayManager', internalType: 'address', type: 'address' },
    ],
    name: 'getStakeInfo',
    outputs: [
      {
        name: 'stakeInfo',
        internalType: 'struct IStakeManager.StakeInfo',
        type: 'tuple',
        components: [
          { name: 'stake', internalType: 'uint256', type: 'uint256' },
          { name: 'unstakeDelay', internalType: 'uint256', type: 'uint256' },
          { name: 'withdrawTime', internalType: 'uint256', type: 'uint256' },
          { name: 'abandonedTime', internalType: 'uint256', type: 'uint256' },
          { name: 'keepaliveTime', internalType: 'uint256', type: 'uint256' },
          { name: 'token', internalType: 'contract IERC20', type: 'address' },
          { name: 'owner', internalType: 'address', type: 'address' },
        ],
      },
      { name: 'isSenderAuthorizedHub', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'relayManager', internalType: 'address', type: 'address' },
    ],
    name: 'isRelayEscheatable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'relayManager', internalType: 'address', type: 'address' },
    ],
    name: 'markRelayAbandoned',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'relayManager', internalType: 'address', type: 'address' },
      { name: 'beneficiary', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'penalizeRelayManager',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_burnAddress', internalType: 'address', type: 'address' },
    ],
    name: 'setBurnAddress',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_burnAddress', internalType: 'address', type: 'address' },
    ],
    name: 'setDevAddress',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'setRelayManagerOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'contract IERC20', type: 'address' },
      { name: 'relayManager', internalType: 'address', type: 'address' },
      { name: 'unstakeDelay', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'stakeForRelayManager',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'relayHub', internalType: 'address', type: 'address' }],
    name: 'unauthorizeHubByManager',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'relayManager', internalType: 'address', type: 'address' },
      { name: 'relayHub', internalType: 'address', type: 'address' },
    ],
    name: 'unauthorizeHubByOwner',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'relayManager', internalType: 'address', type: 'address' },
    ],
    name: 'unlockStake',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'relayManager', internalType: 'address', type: 'address' },
    ],
    name: 'updateRelayKeepaliveTime',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'versionSM',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'relayManager', internalType: 'address', type: 'address' },
    ],
    name: 'withdrawStake',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MetadataEncryption
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const metadataEncryptionABI = [
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'key', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'encryptDecrypt',
    outputs: [{ name: 'result', internalType: 'bytes', type: 'bytes' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Ownable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Pausable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pausableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Paused',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Unpaused',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// OwnableUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownableUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PausableUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pausableUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Paused',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Unpaused',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ReentrancyGuardUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const reentrancyGuardUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SchemaResolver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const schemaResolverABI = [
  { type: 'error', inputs: [], name: 'AccessDenied' },
  { type: 'error', inputs: [], name: 'InsufficientValue' },
  { type: 'error', inputs: [], name: 'InvalidEAS' },
  { type: 'error', inputs: [], name: 'NotPayable' },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'attestation',
        internalType: 'struct Attestation',
        type: 'tuple',
        components: [
          { name: 'uid', internalType: 'bytes32', type: 'bytes32' },
          { name: 'schema', internalType: 'bytes32', type: 'bytes32' },
          { name: 'time', internalType: 'uint64', type: 'uint64' },
          { name: 'expirationTime', internalType: 'uint64', type: 'uint64' },
          { name: 'revocationTime', internalType: 'uint64', type: 'uint64' },
          { name: 'refUID', internalType: 'bytes32', type: 'bytes32' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'attester', internalType: 'address', type: 'address' },
          { name: 'revocable', internalType: 'bool', type: 'bool' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'attest',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'isPayable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'attestations',
        internalType: 'struct Attestation[]',
        type: 'tuple[]',
        components: [
          { name: 'uid', internalType: 'bytes32', type: 'bytes32' },
          { name: 'schema', internalType: 'bytes32', type: 'bytes32' },
          { name: 'time', internalType: 'uint64', type: 'uint64' },
          { name: 'expirationTime', internalType: 'uint64', type: 'uint64' },
          { name: 'revocationTime', internalType: 'uint64', type: 'uint64' },
          { name: 'refUID', internalType: 'bytes32', type: 'bytes32' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'attester', internalType: 'address', type: 'address' },
          { name: 'revocable', internalType: 'bool', type: 'bool' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'multiAttest',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'attestations',
        internalType: 'struct Attestation[]',
        type: 'tuple[]',
        components: [
          { name: 'uid', internalType: 'bytes32', type: 'bytes32' },
          { name: 'schema', internalType: 'bytes32', type: 'bytes32' },
          { name: 'time', internalType: 'uint64', type: 'uint64' },
          { name: 'expirationTime', internalType: 'uint64', type: 'uint64' },
          { name: 'revocationTime', internalType: 'uint64', type: 'uint64' },
          { name: 'refUID', internalType: 'bytes32', type: 'bytes32' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'attester', internalType: 'address', type: 'address' },
          { name: 'revocable', internalType: 'bool', type: 'bool' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'multiRevoke',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'attestation',
        internalType: 'struct Attestation',
        type: 'tuple',
        components: [
          { name: 'uid', internalType: 'bytes32', type: 'bytes32' },
          { name: 'schema', internalType: 'bytes32', type: 'bytes32' },
          { name: 'time', internalType: 'uint64', type: 'uint64' },
          { name: 'expirationTime', internalType: 'uint64', type: 'uint64' },
          { name: 'revocationTime', internalType: 'uint64', type: 'uint64' },
          { name: 'refUID', internalType: 'bytes32', type: 'bytes32' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'attester', internalType: 'address', type: 'address' },
          { name: 'revocable', internalType: 'bool', type: 'bool' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'revoke',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'version',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Semver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const semverABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'major', internalType: 'uint256', type: 'uint256' },
      { name: 'minor', internalType: 'uint256', type: 'uint256' },
      { name: 'patch', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'version',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SynthAccount
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthAccountABI = [
  { type: 'error', inputs: [], name: 'ApprovalCallerNotOwnerNorApproved' },
  { type: 'error', inputs: [], name: 'ApprovalQueryForNonexistentToken' },
  { type: 'error', inputs: [], name: 'BalanceQueryForZeroAddress' },
  { type: 'error', inputs: [], name: 'EmptyString' },
  { type: 'error', inputs: [], name: 'InvalidManager' },
  { type: 'error', inputs: [], name: 'ManagerDoesNotExist' },
  { type: 'error', inputs: [], name: 'ManagerRemoveBlocked' },
  { type: 'error', inputs: [], name: 'ManagerSwapBlocked' },
  { type: 'error', inputs: [], name: 'MintERC2309QuantityExceedsLimit' },
  { type: 'error', inputs: [], name: 'MintFrozen' },
  { type: 'error', inputs: [], name: 'MintToZeroAddress' },
  { type: 'error', inputs: [], name: 'MintZeroQuantity' },
  { type: 'error', inputs: [], name: 'MinterRegistrationInvalid' },
  { type: 'error', inputs: [], name: 'MismatchedArrayLengths' },
  { type: 'error', inputs: [], name: 'NotAContract' },
  { type: 'error', inputs: [], name: 'NotMinter' },
  {
    type: 'error',
    inputs: [{ name: 'operator', internalType: 'address', type: 'address' }],
    name: 'OperatorNotAllowed',
  },
  { type: 'error', inputs: [], name: 'OverLimitSupply' },
  { type: 'error', inputs: [], name: 'OwnerQueryForNonexistentToken' },
  { type: 'error', inputs: [], name: 'OwnershipNotInitializedForExtraData' },
  { type: 'error', inputs: [], name: 'QuantityTooLarge' },
  { type: 'error', inputs: [], name: 'RoyaltyBPSInvalid' },
  { type: 'error', inputs: [], name: 'RoyaltySetBlocked' },
  { type: 'error', inputs: [], name: 'TokenDoesNotExist' },
  { type: 'error', inputs: [], name: 'TokenMintedAlready' },
  { type: 'error', inputs: [], name: 'TokenNotInRange' },
  { type: 'error', inputs: [], name: 'TransferCallerNotOwnerNorApproved' },
  { type: 'error', inputs: [], name: 'TransferFromIncorrectOwner' },
  { type: 'error', inputs: [], name: 'TransferToNonERC721ReceiverImplementer' },
  { type: 'error', inputs: [], name: 'TransferToZeroAddress' },
  { type: 'error', inputs: [], name: 'URIQueryForNonexistentToken' },
  { type: 'error', inputs: [], name: 'Unauthorized' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldBaseUri',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
      {
        name: 'newBaseURI',
        internalType: 'string',
        type: 'string',
        indexed: false,
      },
    ],
    name: 'BaseURISet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'recipientAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'royaltyPercentageBPS',
        internalType: 'uint16',
        type: 'uint16',
        indexed: true,
      },
    ],
    name: 'DefaultRoyaltySet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newDefaultTokenManager',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'DefaultTokenManagerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'ids',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: '_newRoyalties',
        internalType: 'struct IRoyaltyManager.Royalty[]',
        type: 'tuple[]',
        components: [
          {
            name: 'recipientAddress',
            internalType: 'address',
            type: 'address',
          },
          {
            name: 'royaltyPercentageBPS',
            internalType: 'uint16',
            type: 'uint16',
          },
        ],
        indexed: false,
      },
    ],
    name: 'GranularRoyaltiesSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_ids',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'GranularTokenManagersRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: '_ids',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: '_tokenManagers',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'GranularTokenManagersSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newLimitSupply',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'LimitSupplySet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'minter',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'registered', internalType: 'bool', type: 'bool', indexed: true },
    ],
    name: 'MinterRegistrationChanged',
  },
  { type: 'event', anonymous: false, inputs: [], name: 'MintsFrozen' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'newRoyaltyManager',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoyaltyManagerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'ids',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
      {
        name: 'uris',
        internalType: 'string[]',
        type: 'string[]',
        indexed: false,
      },
    ],
    name: 'TokenURIsSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_SUBSCRIPTION',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MARKETPLACE_FILTERER_REGISTRY',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'baseURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'contractURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'defaultManager',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'operation', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execute',
    outputs: [{ name: 'result', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'freezeMints',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'generateArt',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'generativeCodeUri',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: '_observability', internalType: 'address', type: 'address' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'forwarder', internalType: 'address', type: 'address' }],
    name: 'isTrustedForwarder',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'hash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'signature', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'isValidSignature',
    outputs: [{ name: 'magicValue', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'signer', internalType: 'address', type: 'address' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'isValidSigner',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'limitSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintAmountToOneRecipient',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipients', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'mintOneToMultipleRecipients',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'recipient', internalType: 'address', type: 'address' }],
    name: 'mintOneToOneRecipient',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipients', internalType: 'address[]', type: 'address[]' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintSameAmountToMultipleRecipients',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintSpecificTokenToOneRecipient',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'tokenIds', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'mintSpecificTokensToOneRecipient',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minters',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'observability',
    outputs: [
      { name: '', internalType: 'contract IObservability', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'operatorFiltererRegistry',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'minter', internalType: 'address', type: 'address' }],
    name: 'registerMinter',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'removeDefaultTokenManager',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_ids', internalType: 'uint256[]', type: 'uint256[]' }],
    name: 'removeGranularTokenManagers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'removeMarketplaceFiltererRegistryAndUnregister',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'removeRoyaltyManager',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_tokenGroupingId', internalType: 'uint256', type: 'uint256' },
      { name: '_salePrice', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'royaltyInfo',
    outputs: [
      { name: 'receiver', internalType: 'address', type: 'address' },
      { name: 'royaltyAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'royaltyManager',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newBaseURI', internalType: 'string', type: 'string' }],
    name: 'setBaseURI',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newName', internalType: 'string', type: 'string' },
      { name: 'newSymbol', internalType: 'string', type: 'string' },
      { name: 'newContractUri', internalType: 'string', type: 'string' },
    ],
    name: 'setContractMetadata',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newRegistry', internalType: 'address', type: 'address' }],
    name: 'setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_royalty',
        internalType: 'struct IRoyaltyManager.Royalty',
        type: 'tuple',
        components: [
          {
            name: 'recipientAddress',
            internalType: 'address',
            type: 'address',
          },
          {
            name: 'royaltyPercentageBPS',
            internalType: 'uint16',
            type: 'uint16',
          },
        ],
      },
    ],
    name: 'setDefaultRoyalty',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: '_defaultTokenManager',
        internalType: 'address',
        type: 'address',
      },
    ],
    name: 'setDefaultTokenManager',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      {
        name: '_newRoyalties',
        internalType: 'struct IRoyaltyManager.Royalty[]',
        type: 'tuple[]',
        components: [
          {
            name: 'recipientAddress',
            internalType: 'address',
            type: 'address',
          },
          {
            name: 'royaltyPercentageBPS',
            internalType: 'uint16',
            type: 'uint16',
          },
        ],
      },
    ],
    name: 'setGranularRoyalties',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_tokenManagers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'setGranularTokenManagers',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_limitSupply', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setLimitSupply',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'setMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_royaltyManager', internalType: 'address', type: 'address' },
    ],
    name: 'setRoyaltyManager',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'uris', internalType: 'string[]', type: 'string[]' },
    ],
    name: 'setTokenURIs',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'state',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenManager',
    outputs: [{ name: 'manager', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'minter', internalType: 'address', type: 'address' }],
    name: 'unregisterMinter',
    outputs: [],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// UUPSUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const uupsUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SynthRegistry
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthRegistryABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Paused',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'nftOwnershipNeeded',
        internalType: 'bool',
        type: 'bool',
        indexed: false,
      },
      {
        name: 'synth',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'artist',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'organizer',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'SynthCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Unpaused',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_nftOwnershipToMint', internalType: 'bool', type: 'bool' },
      { name: '_artist', internalType: 'address', type: 'address' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
      { name: '_name', internalType: 'string', type: 'string' },
      { name: '_nftWhitelist', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'createSynth',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'pause',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'synthExists',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'unpause',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Synth
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const synthABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_nftOwnershipToMint', internalType: 'bool', type: 'bool' },
      { name: '_artist', internalType: 'address', type: 'address' },
      { name: '_organizer', internalType: 'address', type: 'address' },
      { name: '_name', internalType: 'string', type: 'string' },
      { name: '_nftWhitelist', internalType: 'address[]', type: 'address[]' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Paused',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'previousAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'newAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'synth',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'synthAccount',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'synthId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'SynthMinted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Unpaused',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_nft', internalType: 'address', type: 'address' }],
    name: 'addToNFTWhitelist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_wave', internalType: 'address', type: 'address' }],
    name: 'addWave',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_nft', internalType: 'address', type: 'address' }],
    name: 'mint',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'nftWhitelist',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'pause',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'nft', internalType: 'address', type: 'address' }],
    name: 'removeFromNFTWhitelist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'wave', internalType: 'address', type: 'address' }],
    name: 'removeWave',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'unpause',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'waveExists',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Wave
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const waveABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_artist', internalType: 'address', type: 'address' },
      { name: '_creative', internalType: 'address', type: 'address' },
      { name: '_admin', internalType: 'address', type: 'address' },
      { name: '_name', internalType: 'string', type: 'string' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'approved',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'operator',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Paused',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'previousAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
      {
        name: 'newAdminRole',
        internalType: 'bytes32',
        type: 'bytes32',
        indexed: true,
      },
    ],
    name: 'RoleAdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleGranted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'RoleRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'tokenId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Unpaused',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'wave', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'waveId',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'WaveMinted',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DEFAULT_ADMIN_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MINTER_ROLE',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'data',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'getApproved',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getRoleAdmin',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'grantRole',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'hasRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'to', internalType: 'address', type: 'address' }],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'pause',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'renounceRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'revokeRole',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'tokenURI',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'unpause',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// WaveRegistry
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const waveRegistryABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Paused',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'account',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'Unpaused',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'wave', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'artist',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'creative',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
      { name: 'data', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'WaveCreated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_artist', internalType: 'address', type: 'address' },
      { name: '_creative', internalType: 'address', type: 'address' },
      { name: '_name', internalType: 'string', type: 'string' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'createWave',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'pause',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'paused',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'unpause',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'waveExists',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// WaveResolver
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const waveResolverABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: 'eas', internalType: 'contract IEAS', type: 'address' }],
  },
  { type: 'error', inputs: [], name: 'AccessDenied' },
  { type: 'error', inputs: [], name: 'InsufficientValue' },
  { type: 'error', inputs: [], name: 'InvalidEAS' },
  { type: 'error', inputs: [], name: 'NotPayable' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'newAdmin',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'beacon',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'BeaconUpgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'version', internalType: 'uint8', type: 'uint8', indexed: false },
    ],
    name: 'Initialized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'implementation',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'Upgraded',
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'attestation',
        internalType: 'struct Attestation',
        type: 'tuple',
        components: [
          { name: 'uid', internalType: 'bytes32', type: 'bytes32' },
          { name: 'schema', internalType: 'bytes32', type: 'bytes32' },
          { name: 'time', internalType: 'uint64', type: 'uint64' },
          { name: 'expirationTime', internalType: 'uint64', type: 'uint64' },
          { name: 'revocationTime', internalType: 'uint64', type: 'uint64' },
          { name: 'refUID', internalType: 'bytes32', type: 'bytes32' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'attester', internalType: 'address', type: 'address' },
          { name: 'revocable', internalType: 'bool', type: 'bool' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'attest',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'isPayable',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'attestations',
        internalType: 'struct Attestation[]',
        type: 'tuple[]',
        components: [
          { name: 'uid', internalType: 'bytes32', type: 'bytes32' },
          { name: 'schema', internalType: 'bytes32', type: 'bytes32' },
          { name: 'time', internalType: 'uint64', type: 'uint64' },
          { name: 'expirationTime', internalType: 'uint64', type: 'uint64' },
          { name: 'revocationTime', internalType: 'uint64', type: 'uint64' },
          { name: 'refUID', internalType: 'bytes32', type: 'bytes32' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'attester', internalType: 'address', type: 'address' },
          { name: 'revocable', internalType: 'bool', type: 'bool' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'multiAttest',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'attestations',
        internalType: 'struct Attestation[]',
        type: 'tuple[]',
        components: [
          { name: 'uid', internalType: 'bytes32', type: 'bytes32' },
          { name: 'schema', internalType: 'bytes32', type: 'bytes32' },
          { name: 'time', internalType: 'uint64', type: 'uint64' },
          { name: 'expirationTime', internalType: 'uint64', type: 'uint64' },
          { name: 'revocationTime', internalType: 'uint64', type: 'uint64' },
          { name: 'refUID', internalType: 'bytes32', type: 'bytes32' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'attester', internalType: 'address', type: 'address' },
          { name: 'revocable', internalType: 'bool', type: 'bool' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'multiRevoke',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'attestation',
        internalType: 'struct Attestation',
        type: 'tuple',
        components: [
          { name: 'uid', internalType: 'bytes32', type: 'bytes32' },
          { name: 'schema', internalType: 'bytes32', type: 'bytes32' },
          { name: 'time', internalType: 'uint64', type: 'uint64' },
          { name: 'expirationTime', internalType: 'uint64', type: 'uint64' },
          { name: 'revocationTime', internalType: 'uint64', type: 'uint64' },
          { name: 'refUID', internalType: 'bytes32', type: 'bytes32' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'attester', internalType: 'address', type: 'address' },
          { name: 'revocable', internalType: 'bool', type: 'bool' },
          { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'revoke',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
    ],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'version',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1822ProxiableUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1822ProxiableUpgradeableABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proxiableUUID',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// WavesPaymaster
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const wavesPaymasterABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'previousOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'CALLDATA_SIZE_LIMIT',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'FORWARDER_HUB_OVERHEAD',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'PAYMASTER_ACCEPTANCE_BUDGET',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'POST_RELAYED_CALL_GAS_LIMIT',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'PRE_RELAYED_CALL_GAS_LIMIT',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getGasAndDataLimits',
    outputs: [
      {
        name: 'limits',
        internalType: 'struct IPaymaster.GasAndDataLimits',
        type: 'tuple',
        components: [
          {
            name: 'acceptanceBudget',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'preRelayedCallGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'postRelayedCallGasLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'calldataSizeLimit',
            internalType: 'uint256',
            type: 'uint256',
          },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getRelayHub',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTrustedForwarder',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'bytes4', type: 'bytes4' },
    ],
    name: 'methodWhitelist',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'context', internalType: 'bytes', type: 'bytes' },
      { name: 'success', internalType: 'bool', type: 'bool' },
      { name: 'gasUseWithoutPost', internalType: 'uint256', type: 'uint256' },
      {
        name: 'relayData',
        internalType: 'struct GsnTypes.RelayData',
        type: 'tuple',
        components: [
          { name: 'maxFeePerGas', internalType: 'uint256', type: 'uint256' },
          {
            name: 'maxPriorityFeePerGas',
            internalType: 'uint256',
            type: 'uint256',
          },
          {
            name: 'transactionCalldataGasUsed',
            internalType: 'uint256',
            type: 'uint256',
          },
          { name: 'relayWorker', internalType: 'address', type: 'address' },
          { name: 'paymaster', internalType: 'address', type: 'address' },
          { name: 'forwarder', internalType: 'address', type: 'address' },
          { name: 'paymasterData', internalType: 'bytes', type: 'bytes' },
          { name: 'clientId', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'postRelayedCall',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'relayRequest',
        internalType: 'struct GsnTypes.RelayRequest',
        type: 'tuple',
        components: [
          {
            name: 'request',
            internalType: 'struct IForwarder.ForwardRequest',
            type: 'tuple',
            components: [
              { name: 'from', internalType: 'address', type: 'address' },
              { name: 'to', internalType: 'address', type: 'address' },
              { name: 'value', internalType: 'uint256', type: 'uint256' },
              { name: 'gas', internalType: 'uint256', type: 'uint256' },
              { name: 'nonce', internalType: 'uint256', type: 'uint256' },
              { name: 'data', internalType: 'bytes', type: 'bytes' },
              {
                name: 'validUntilTime',
                internalType: 'uint256',
                type: 'uint256',
              },
            ],
          },
          {
            name: 'relayData',
            internalType: 'struct GsnTypes.RelayData',
            type: 'tuple',
            components: [
              {
                name: 'maxFeePerGas',
                internalType: 'uint256',
                type: 'uint256',
              },
              {
                name: 'maxPriorityFeePerGas',
                internalType: 'uint256',
                type: 'uint256',
              },
              {
                name: 'transactionCalldataGasUsed',
                internalType: 'uint256',
                type: 'uint256',
              },
              { name: 'relayWorker', internalType: 'address', type: 'address' },
              { name: 'paymaster', internalType: 'address', type: 'address' },
              { name: 'forwarder', internalType: 'address', type: 'address' },
              { name: 'paymasterData', internalType: 'bytes', type: 'bytes' },
              { name: 'clientId', internalType: 'uint256', type: 'uint256' },
            ],
          },
        ],
      },
      { name: 'signature', internalType: 'bytes', type: 'bytes' },
      { name: 'approvalData', internalType: 'bytes', type: 'bytes' },
      { name: 'maxPossibleGas', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'preRelayedCall',
    outputs: [
      { name: '', internalType: 'bytes', type: 'bytes' },
      { name: '', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'senderWhitelist',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_useSenderWhitelist', internalType: 'bool', type: 'bool' },
      { name: '_useTargetWhitelist', internalType: 'bool', type: 'bool' },
      { name: '_useMethodWhitelist', internalType: 'bool', type: 'bool' },
      {
        name: '_useRejectOnRecipientRevert',
        internalType: 'bool',
        type: 'bool',
      },
    ],
    name: 'setConfiguration',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'hub', internalType: 'contract IRelayHub', type: 'address' },
    ],
    name: 'setRelayHub',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'forwarder', internalType: 'address', type: 'address' }],
    name: 'setTrustedForwarder',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'targetWhitelist',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'useMethodWhitelist',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'useRejectOnRecipientRevert',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'useSenderWhitelist',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'useTargetWhitelist',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'versionPaymaster',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'method', internalType: 'bytes4', type: 'bytes4' },
      { name: 'isAllowed', internalType: 'bool', type: 'bool' },
    ],
    name: 'whitelistMethod',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'isAllowed', internalType: 'bool', type: 'bool' },
    ],
    name: 'whitelistSender',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'target', internalType: 'address', type: 'address' },
      { name: 'isAllowed', internalType: 'bool', type: 'bool' },
    ],
    name: 'whitelistTarget',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'target', internalType: 'address payable', type: 'address' },
    ],
    name: 'withdrawRelayHubDepositTo',
    outputs: [],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__.
 */
export function useAccessControlRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof accessControlABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlABI,
    ...config,
  } as UseContractReadConfig<
    typeof accessControlABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useAccessControlDefaultAdminRole<
  TFunctionName extends 'DEFAULT_ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof accessControlABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlABI,
    functionName: 'DEFAULT_ADMIN_ROLE',
    ...config,
  } as UseContractReadConfig<
    typeof accessControlABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useAccessControlGetRoleAdmin<
  TFunctionName extends 'getRoleAdmin',
  TSelectData = ReadContractResult<typeof accessControlABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<
    typeof accessControlABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"hasRole"`.
 */
export function useAccessControlHasRole<
  TFunctionName extends 'hasRole',
  TSelectData = ReadContractResult<typeof accessControlABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<
    typeof accessControlABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useAccessControlSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof accessControlABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof accessControlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: accessControlABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof accessControlABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__.
 */
export function useAccessControlWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accessControlABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof accessControlABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof accessControlABI, TFunctionName, TMode>({
    abi: accessControlABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"grantRole"`.
 */
export function useAccessControlGrantRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accessControlABI,
          'grantRole'
        >['request']['abi'],
        'grantRole',
        TMode
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<typeof accessControlABI, 'grantRole', TMode> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<typeof accessControlABI, 'grantRole', TMode>({
    abi: accessControlABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useAccessControlRenounceRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accessControlABI,
          'renounceRole'
        >['request']['abi'],
        'renounceRole',
        TMode
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<typeof accessControlABI, 'renounceRole', TMode> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<typeof accessControlABI, 'renounceRole', TMode>({
    abi: accessControlABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useAccessControlRevokeRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accessControlABI,
          'revokeRole'
        >['request']['abi'],
        'revokeRole',
        TMode
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<typeof accessControlABI, 'revokeRole', TMode> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<typeof accessControlABI, 'revokeRole', TMode>({
    abi: accessControlABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__.
 */
export function usePrepareAccessControlWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareAccessControlGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareAccessControlRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accessControlABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareAccessControlRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accessControlABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: accessControlABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accessControlABI, 'revokeRole'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__.
 */
export function useAccessControlEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof accessControlABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlABI,
    ...config,
  } as UseContractEventConfig<typeof accessControlABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useAccessControlRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlABI, 'RoleAdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlABI,
    eventName: 'RoleAdminChanged',
    ...config,
  } as UseContractEventConfig<typeof accessControlABI, 'RoleAdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useAccessControlRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlABI, 'RoleGranted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlABI,
    eventName: 'RoleGranted',
    ...config,
  } as UseContractEventConfig<typeof accessControlABI, 'RoleGranted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accessControlABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useAccessControlRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof accessControlABI, 'RoleRevoked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: accessControlABI,
    eventName: 'RoleRevoked',
    ...config,
  } as UseContractEventConfig<typeof accessControlABI, 'RoleRevoked'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basePaymasterABI}__.
 */
export function useBasePaymasterRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof basePaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof basePaymasterABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: basePaymasterABI,
    ...config,
  } as UseContractReadConfig<
    typeof basePaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basePaymasterABI}__ and `functionName` set to `"CALLDATA_SIZE_LIMIT"`.
 */
export function useBasePaymasterCalldataSizeLimit<
  TFunctionName extends 'CALLDATA_SIZE_LIMIT',
  TSelectData = ReadContractResult<typeof basePaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof basePaymasterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basePaymasterABI,
    functionName: 'CALLDATA_SIZE_LIMIT',
    ...config,
  } as UseContractReadConfig<
    typeof basePaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basePaymasterABI}__ and `functionName` set to `"FORWARDER_HUB_OVERHEAD"`.
 */
export function useBasePaymasterForwarderHubOverhead<
  TFunctionName extends 'FORWARDER_HUB_OVERHEAD',
  TSelectData = ReadContractResult<typeof basePaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof basePaymasterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basePaymasterABI,
    functionName: 'FORWARDER_HUB_OVERHEAD',
    ...config,
  } as UseContractReadConfig<
    typeof basePaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basePaymasterABI}__ and `functionName` set to `"PAYMASTER_ACCEPTANCE_BUDGET"`.
 */
export function useBasePaymasterPaymasterAcceptanceBudget<
  TFunctionName extends 'PAYMASTER_ACCEPTANCE_BUDGET',
  TSelectData = ReadContractResult<typeof basePaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof basePaymasterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basePaymasterABI,
    functionName: 'PAYMASTER_ACCEPTANCE_BUDGET',
    ...config,
  } as UseContractReadConfig<
    typeof basePaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basePaymasterABI}__ and `functionName` set to `"POST_RELAYED_CALL_GAS_LIMIT"`.
 */
export function useBasePaymasterPostRelayedCallGasLimit<
  TFunctionName extends 'POST_RELAYED_CALL_GAS_LIMIT',
  TSelectData = ReadContractResult<typeof basePaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof basePaymasterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basePaymasterABI,
    functionName: 'POST_RELAYED_CALL_GAS_LIMIT',
    ...config,
  } as UseContractReadConfig<
    typeof basePaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basePaymasterABI}__ and `functionName` set to `"PRE_RELAYED_CALL_GAS_LIMIT"`.
 */
export function useBasePaymasterPreRelayedCallGasLimit<
  TFunctionName extends 'PRE_RELAYED_CALL_GAS_LIMIT',
  TSelectData = ReadContractResult<typeof basePaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof basePaymasterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basePaymasterABI,
    functionName: 'PRE_RELAYED_CALL_GAS_LIMIT',
    ...config,
  } as UseContractReadConfig<
    typeof basePaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basePaymasterABI}__ and `functionName` set to `"getGasAndDataLimits"`.
 */
export function useBasePaymasterGetGasAndDataLimits<
  TFunctionName extends 'getGasAndDataLimits',
  TSelectData = ReadContractResult<typeof basePaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof basePaymasterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basePaymasterABI,
    functionName: 'getGasAndDataLimits',
    ...config,
  } as UseContractReadConfig<
    typeof basePaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basePaymasterABI}__ and `functionName` set to `"getRelayHub"`.
 */
export function useBasePaymasterGetRelayHub<
  TFunctionName extends 'getRelayHub',
  TSelectData = ReadContractResult<typeof basePaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof basePaymasterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basePaymasterABI,
    functionName: 'getRelayHub',
    ...config,
  } as UseContractReadConfig<
    typeof basePaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basePaymasterABI}__ and `functionName` set to `"getTrustedForwarder"`.
 */
export function useBasePaymasterGetTrustedForwarder<
  TFunctionName extends 'getTrustedForwarder',
  TSelectData = ReadContractResult<typeof basePaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof basePaymasterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basePaymasterABI,
    functionName: 'getTrustedForwarder',
    ...config,
  } as UseContractReadConfig<
    typeof basePaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basePaymasterABI}__ and `functionName` set to `"owner"`.
 */
export function useBasePaymasterOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof basePaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof basePaymasterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basePaymasterABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof basePaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basePaymasterABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useBasePaymasterSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof basePaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof basePaymasterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basePaymasterABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof basePaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link basePaymasterABI}__ and `functionName` set to `"versionPaymaster"`.
 */
export function useBasePaymasterVersionPaymaster<
  TFunctionName extends 'versionPaymaster',
  TSelectData = ReadContractResult<typeof basePaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof basePaymasterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: basePaymasterABI,
    functionName: 'versionPaymaster',
    ...config,
  } as UseContractReadConfig<
    typeof basePaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link basePaymasterABI}__.
 */
export function useBasePaymasterWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof basePaymasterABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof basePaymasterABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof basePaymasterABI, TFunctionName, TMode>({
    abi: basePaymasterABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link basePaymasterABI}__ and `functionName` set to `"postRelayedCall"`.
 */
export function useBasePaymasterPostRelayedCall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof basePaymasterABI,
          'postRelayedCall'
        >['request']['abi'],
        'postRelayedCall',
        TMode
      > & { functionName?: 'postRelayedCall' }
    : UseContractWriteConfig<
        typeof basePaymasterABI,
        'postRelayedCall',
        TMode
      > & {
        abi?: never
        functionName?: 'postRelayedCall'
      } = {} as any,
) {
  return useContractWrite<typeof basePaymasterABI, 'postRelayedCall', TMode>({
    abi: basePaymasterABI,
    functionName: 'postRelayedCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link basePaymasterABI}__ and `functionName` set to `"preRelayedCall"`.
 */
export function useBasePaymasterPreRelayedCall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof basePaymasterABI,
          'preRelayedCall'
        >['request']['abi'],
        'preRelayedCall',
        TMode
      > & { functionName?: 'preRelayedCall' }
    : UseContractWriteConfig<
        typeof basePaymasterABI,
        'preRelayedCall',
        TMode
      > & {
        abi?: never
        functionName?: 'preRelayedCall'
      } = {} as any,
) {
  return useContractWrite<typeof basePaymasterABI, 'preRelayedCall', TMode>({
    abi: basePaymasterABI,
    functionName: 'preRelayedCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link basePaymasterABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useBasePaymasterRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof basePaymasterABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        typeof basePaymasterABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof basePaymasterABI, 'renounceOwnership', TMode>({
    abi: basePaymasterABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link basePaymasterABI}__ and `functionName` set to `"setRelayHub"`.
 */
export function useBasePaymasterSetRelayHub<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof basePaymasterABI,
          'setRelayHub'
        >['request']['abi'],
        'setRelayHub',
        TMode
      > & { functionName?: 'setRelayHub' }
    : UseContractWriteConfig<typeof basePaymasterABI, 'setRelayHub', TMode> & {
        abi?: never
        functionName?: 'setRelayHub'
      } = {} as any,
) {
  return useContractWrite<typeof basePaymasterABI, 'setRelayHub', TMode>({
    abi: basePaymasterABI,
    functionName: 'setRelayHub',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link basePaymasterABI}__ and `functionName` set to `"setTrustedForwarder"`.
 */
export function useBasePaymasterSetTrustedForwarder<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof basePaymasterABI,
          'setTrustedForwarder'
        >['request']['abi'],
        'setTrustedForwarder',
        TMode
      > & { functionName?: 'setTrustedForwarder' }
    : UseContractWriteConfig<
        typeof basePaymasterABI,
        'setTrustedForwarder',
        TMode
      > & {
        abi?: never
        functionName?: 'setTrustedForwarder'
      } = {} as any,
) {
  return useContractWrite<
    typeof basePaymasterABI,
    'setTrustedForwarder',
    TMode
  >({
    abi: basePaymasterABI,
    functionName: 'setTrustedForwarder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link basePaymasterABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useBasePaymasterTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof basePaymasterABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        typeof basePaymasterABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof basePaymasterABI, 'transferOwnership', TMode>({
    abi: basePaymasterABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link basePaymasterABI}__ and `functionName` set to `"withdrawRelayHubDepositTo"`.
 */
export function useBasePaymasterWithdrawRelayHubDepositTo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof basePaymasterABI,
          'withdrawRelayHubDepositTo'
        >['request']['abi'],
        'withdrawRelayHubDepositTo',
        TMode
      > & { functionName?: 'withdrawRelayHubDepositTo' }
    : UseContractWriteConfig<
        typeof basePaymasterABI,
        'withdrawRelayHubDepositTo',
        TMode
      > & {
        abi?: never
        functionName?: 'withdrawRelayHubDepositTo'
      } = {} as any,
) {
  return useContractWrite<
    typeof basePaymasterABI,
    'withdrawRelayHubDepositTo',
    TMode
  >({
    abi: basePaymasterABI,
    functionName: 'withdrawRelayHubDepositTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link basePaymasterABI}__.
 */
export function usePrepareBasePaymasterWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof basePaymasterABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: basePaymasterABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof basePaymasterABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link basePaymasterABI}__ and `functionName` set to `"postRelayedCall"`.
 */
export function usePrepareBasePaymasterPostRelayedCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof basePaymasterABI, 'postRelayedCall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: basePaymasterABI,
    functionName: 'postRelayedCall',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof basePaymasterABI,
    'postRelayedCall'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link basePaymasterABI}__ and `functionName` set to `"preRelayedCall"`.
 */
export function usePrepareBasePaymasterPreRelayedCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof basePaymasterABI, 'preRelayedCall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: basePaymasterABI,
    functionName: 'preRelayedCall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof basePaymasterABI, 'preRelayedCall'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link basePaymasterABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareBasePaymasterRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof basePaymasterABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: basePaymasterABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof basePaymasterABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link basePaymasterABI}__ and `functionName` set to `"setRelayHub"`.
 */
export function usePrepareBasePaymasterSetRelayHub(
  config: Omit<
    UsePrepareContractWriteConfig<typeof basePaymasterABI, 'setRelayHub'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: basePaymasterABI,
    functionName: 'setRelayHub',
    ...config,
  } as UsePrepareContractWriteConfig<typeof basePaymasterABI, 'setRelayHub'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link basePaymasterABI}__ and `functionName` set to `"setTrustedForwarder"`.
 */
export function usePrepareBasePaymasterSetTrustedForwarder(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof basePaymasterABI,
      'setTrustedForwarder'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: basePaymasterABI,
    functionName: 'setTrustedForwarder',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof basePaymasterABI,
    'setTrustedForwarder'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link basePaymasterABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareBasePaymasterTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof basePaymasterABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: basePaymasterABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof basePaymasterABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link basePaymasterABI}__ and `functionName` set to `"withdrawRelayHubDepositTo"`.
 */
export function usePrepareBasePaymasterWithdrawRelayHubDepositTo(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof basePaymasterABI,
      'withdrawRelayHubDepositTo'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: basePaymasterABI,
    functionName: 'withdrawRelayHubDepositTo',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof basePaymasterABI,
    'withdrawRelayHubDepositTo'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link basePaymasterABI}__.
 */
export function useBasePaymasterEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof basePaymasterABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: basePaymasterABI,
    ...config,
  } as UseContractEventConfig<typeof basePaymasterABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link basePaymasterABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useBasePaymasterOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof basePaymasterABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: basePaymasterABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof basePaymasterABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link contextUpgradeableABI}__.
 */
export function useContextUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof contextUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: contextUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof contextUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link contextUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useContextUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof contextUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: contextUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof contextUpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link counterABI}__.
 */
export function useCounterRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof counterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof counterABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: counterABI,
    ...config,
  } as UseContractReadConfig<typeof counterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"number"`.
 */
export function useCounterNumber<
  TFunctionName extends 'number',
  TSelectData = ReadContractResult<typeof counterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof counterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: counterABI,
    functionName: 'number',
    ...config,
  } as UseContractReadConfig<typeof counterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterABI}__.
 */
export function useCounterWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof counterABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof counterABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof counterABI, TFunctionName, TMode>({
    abi: counterABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"increment"`.
 */
export function useCounterIncrement<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof counterABI,
          'increment'
        >['request']['abi'],
        'increment',
        TMode
      > & { functionName?: 'increment' }
    : UseContractWriteConfig<typeof counterABI, 'increment', TMode> & {
        abi?: never
        functionName?: 'increment'
      } = {} as any,
) {
  return useContractWrite<typeof counterABI, 'increment', TMode>({
    abi: counterABI,
    functionName: 'increment',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"setNumber"`.
 */
export function useCounterSetNumber<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof counterABI,
          'setNumber'
        >['request']['abi'],
        'setNumber',
        TMode
      > & { functionName?: 'setNumber' }
    : UseContractWriteConfig<typeof counterABI, 'setNumber', TMode> & {
        abi?: never
        functionName?: 'setNumber'
      } = {} as any,
) {
  return useContractWrite<typeof counterABI, 'setNumber', TMode>({
    abi: counterABI,
    functionName: 'setNumber',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterABI}__.
 */
export function usePrepareCounterWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof counterABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: counterABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof counterABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"increment"`.
 */
export function usePrepareCounterIncrement(
  config: Omit<
    UsePrepareContractWriteConfig<typeof counterABI, 'increment'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: counterABI,
    functionName: 'increment',
    ...config,
  } as UsePrepareContractWriteConfig<typeof counterABI, 'increment'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"setNumber"`.
 */
export function usePrepareCounterSetNumber(
  config: Omit<
    UsePrepareContractWriteConfig<typeof counterABI, 'setNumber'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: counterABI,
    functionName: 'setNumber',
    ...config,
  } as UsePrepareContractWriteConfig<typeof counterABI, 'setNumber'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterABI}__.
 */
export function useCounterEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof counterABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: counterABI,
    ...config,
  } as UseContractEventConfig<typeof counterABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterABI}__ and `eventName` set to `"Transfer"`.
 */
export function useCounterTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof counterABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: counterABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof counterABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165ABI}__.
 */
export function useErc165Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc165ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc165ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: erc165ABI, ...config } as UseContractReadConfig<
    typeof erc165ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc165SupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof erc165ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc165ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc165ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof erc165ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__.
 */
export function useErc1967UpgradeUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967UpgradeUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useErc1967UpgradeUpgradeableAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967UpgradeUpgradeableABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<
    typeof erc1967UpgradeUpgradeableABI,
    'AdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useErc1967UpgradeUpgradeableBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof erc1967UpgradeUpgradeableABI,
      'BeaconUpgraded'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967UpgradeUpgradeableABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<
    typeof erc1967UpgradeUpgradeableABI,
    'BeaconUpgraded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc1967UpgradeUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967UpgradeUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<
    typeof erc1967UpgradeUpgradeableABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useErc1967UpgradeUpgradeableUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc1967UpgradeUpgradeableABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc2771RecipientABI}__.
 */
export function useErc2771RecipientRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc2771RecipientABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc2771RecipientABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc2771RecipientABI,
    ...config,
  } as UseContractReadConfig<
    typeof erc2771RecipientABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc2771RecipientABI}__ and `functionName` set to `"getTrustedForwarder"`.
 */
export function useErc2771RecipientGetTrustedForwarder<
  TFunctionName extends 'getTrustedForwarder',
  TSelectData = ReadContractResult<typeof erc2771RecipientABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc2771RecipientABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc2771RecipientABI,
    functionName: 'getTrustedForwarder',
    ...config,
  } as UseContractReadConfig<
    typeof erc2771RecipientABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc2771RecipientABI}__ and `functionName` set to `"isTrustedForwarder"`.
 */
export function useErc2771RecipientIsTrustedForwarder<
  TFunctionName extends 'isTrustedForwarder',
  TSelectData = ReadContractResult<typeof erc2771RecipientABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc2771RecipientABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc2771RecipientABI,
    functionName: 'isTrustedForwarder',
    ...config,
  } as UseContractReadConfig<
    typeof erc2771RecipientABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: erc721ABI, ...config } as UseContractReadConfig<
    typeof erc721ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721BalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721GetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721IsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"name"`.
 */
export function useErc721Name<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721OwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc721SupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721Symbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721TokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<typeof erc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721ABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof erc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc721ABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof erc721ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof erc721ABI, TFunctionName, TMode>({
    abi: erc721ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721Approve<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721ABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof erc721ABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof erc721ABI, 'approve', TMode>({
    abi: erc721ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721SafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721ABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<typeof erc721ABI, 'safeTransferFrom', TMode> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof erc721ABI, 'safeTransferFrom', TMode>({
    abi: erc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721SetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721ABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<typeof erc721ABI, 'setApprovalForAll', TMode> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<typeof erc721ABI, 'setApprovalForAll', TMode>({
    abi: erc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721TransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721ABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof erc721ABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof erc721ABI, 'transferFrom', TMode>({
    abi: erc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__.
 */
export function usePrepareErc721Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721SafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721SetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__.
 */
export function useErc721Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721ApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc721ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc2771ContextUpgradeableABI}__.
 */
export function useErc2771ContextUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof erc2771ContextUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc2771ContextUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc2771ContextUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof erc2771ContextUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc2771ContextUpgradeableABI}__ and `functionName` set to `"isTrustedForwarder"`.
 */
export function useErc2771ContextUpgradeableIsTrustedForwarder<
  TFunctionName extends 'isTrustedForwarder',
  TSelectData = ReadContractResult<
    typeof erc2771ContextUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc2771ContextUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc2771ContextUpgradeableABI,
    functionName: 'isTrustedForwarder',
    ...config,
  } as UseContractReadConfig<
    typeof erc2771ContextUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc2771ContextUpgradeableABI}__.
 */
export function useErc2771ContextUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc2771ContextUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc2771ContextUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof erc2771ContextUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc2771ContextUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc2771ContextUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc2771ContextUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc2771ContextUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<
    typeof erc2771ContextUpgradeableABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BaseABI}__.
 */
export function useErc721BaseRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc721BaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721BaseABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BaseABI,
    ...config,
  } as UseContractReadConfig<typeof erc721BaseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BaseABI}__ and `functionName` set to `"defaultManager"`.
 */
export function useErc721BaseDefaultManager<
  TFunctionName extends 'defaultManager',
  TSelectData = ReadContractResult<typeof erc721BaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721BaseABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BaseABI,
    functionName: 'defaultManager',
    ...config,
  } as UseContractReadConfig<typeof erc721BaseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BaseABI}__ and `functionName` set to `"isTrustedForwarder"`.
 */
export function useErc721BaseIsTrustedForwarder<
  TFunctionName extends 'isTrustedForwarder',
  TSelectData = ReadContractResult<typeof erc721BaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721BaseABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BaseABI,
    functionName: 'isTrustedForwarder',
    ...config,
  } as UseContractReadConfig<typeof erc721BaseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BaseABI}__ and `functionName` set to `"minters"`.
 */
export function useErc721BaseMinters<
  TFunctionName extends 'minters',
  TSelectData = ReadContractResult<typeof erc721BaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721BaseABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BaseABI,
    functionName: 'minters',
    ...config,
  } as UseContractReadConfig<typeof erc721BaseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BaseABI}__ and `functionName` set to `"observability"`.
 */
export function useErc721BaseObservability<
  TFunctionName extends 'observability',
  TSelectData = ReadContractResult<typeof erc721BaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721BaseABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BaseABI,
    functionName: 'observability',
    ...config,
  } as UseContractReadConfig<typeof erc721BaseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BaseABI}__ and `functionName` set to `"owner"`.
 */
export function useErc721BaseOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof erc721BaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721BaseABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BaseABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof erc721BaseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BaseABI}__ and `functionName` set to `"royaltyInfo"`.
 */
export function useErc721BaseRoyaltyInfo<
  TFunctionName extends 'royaltyInfo',
  TSelectData = ReadContractResult<typeof erc721BaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721BaseABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BaseABI,
    functionName: 'royaltyInfo',
    ...config,
  } as UseContractReadConfig<typeof erc721BaseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BaseABI}__ and `functionName` set to `"royaltyManager"`.
 */
export function useErc721BaseRoyaltyManager<
  TFunctionName extends 'royaltyManager',
  TSelectData = ReadContractResult<typeof erc721BaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721BaseABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BaseABI,
    functionName: 'royaltyManager',
    ...config,
  } as UseContractReadConfig<typeof erc721BaseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BaseABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc721BaseSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof erc721BaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721BaseABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BaseABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof erc721BaseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721BaseABI}__ and `functionName` set to `"tokenManager"`.
 */
export function useErc721BaseTokenManager<
  TFunctionName extends 'tokenManager',
  TSelectData = ReadContractResult<typeof erc721BaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc721BaseABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721BaseABI,
    functionName: 'tokenManager',
    ...config,
  } as UseContractReadConfig<typeof erc721BaseABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BaseABI}__.
 */
export function useErc721BaseWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721BaseABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof erc721BaseABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof erc721BaseABI, TFunctionName, TMode>({
    abi: erc721BaseABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BaseABI}__ and `functionName` set to `"freezeMints"`.
 */
export function useErc721BaseFreezeMints<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721BaseABI,
          'freezeMints'
        >['request']['abi'],
        'freezeMints',
        TMode
      > & { functionName?: 'freezeMints' }
    : UseContractWriteConfig<typeof erc721BaseABI, 'freezeMints', TMode> & {
        abi?: never
        functionName?: 'freezeMints'
      } = {} as any,
) {
  return useContractWrite<typeof erc721BaseABI, 'freezeMints', TMode>({
    abi: erc721BaseABI,
    functionName: 'freezeMints',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BaseABI}__ and `functionName` set to `"registerMinter"`.
 */
export function useErc721BaseRegisterMinter<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721BaseABI,
          'registerMinter'
        >['request']['abi'],
        'registerMinter',
        TMode
      > & { functionName?: 'registerMinter' }
    : UseContractWriteConfig<typeof erc721BaseABI, 'registerMinter', TMode> & {
        abi?: never
        functionName?: 'registerMinter'
      } = {} as any,
) {
  return useContractWrite<typeof erc721BaseABI, 'registerMinter', TMode>({
    abi: erc721BaseABI,
    functionName: 'registerMinter',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BaseABI}__ and `functionName` set to `"removeDefaultTokenManager"`.
 */
export function useErc721BaseRemoveDefaultTokenManager<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721BaseABI,
          'removeDefaultTokenManager'
        >['request']['abi'],
        'removeDefaultTokenManager',
        TMode
      > & { functionName?: 'removeDefaultTokenManager' }
    : UseContractWriteConfig<
        typeof erc721BaseABI,
        'removeDefaultTokenManager',
        TMode
      > & {
        abi?: never
        functionName?: 'removeDefaultTokenManager'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721BaseABI,
    'removeDefaultTokenManager',
    TMode
  >({
    abi: erc721BaseABI,
    functionName: 'removeDefaultTokenManager',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BaseABI}__ and `functionName` set to `"removeGranularTokenManagers"`.
 */
export function useErc721BaseRemoveGranularTokenManagers<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721BaseABI,
          'removeGranularTokenManagers'
        >['request']['abi'],
        'removeGranularTokenManagers',
        TMode
      > & { functionName?: 'removeGranularTokenManagers' }
    : UseContractWriteConfig<
        typeof erc721BaseABI,
        'removeGranularTokenManagers',
        TMode
      > & {
        abi?: never
        functionName?: 'removeGranularTokenManagers'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721BaseABI,
    'removeGranularTokenManagers',
    TMode
  >({
    abi: erc721BaseABI,
    functionName: 'removeGranularTokenManagers',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BaseABI}__ and `functionName` set to `"removeRoyaltyManager"`.
 */
export function useErc721BaseRemoveRoyaltyManager<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721BaseABI,
          'removeRoyaltyManager'
        >['request']['abi'],
        'removeRoyaltyManager',
        TMode
      > & { functionName?: 'removeRoyaltyManager' }
    : UseContractWriteConfig<
        typeof erc721BaseABI,
        'removeRoyaltyManager',
        TMode
      > & {
        abi?: never
        functionName?: 'removeRoyaltyManager'
      } = {} as any,
) {
  return useContractWrite<typeof erc721BaseABI, 'removeRoyaltyManager', TMode>({
    abi: erc721BaseABI,
    functionName: 'removeRoyaltyManager',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BaseABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useErc721BaseRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721BaseABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        typeof erc721BaseABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof erc721BaseABI, 'renounceOwnership', TMode>({
    abi: erc721BaseABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BaseABI}__ and `functionName` set to `"setDefaultRoyalty"`.
 */
export function useErc721BaseSetDefaultRoyalty<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721BaseABI,
          'setDefaultRoyalty'
        >['request']['abi'],
        'setDefaultRoyalty',
        TMode
      > & { functionName?: 'setDefaultRoyalty' }
    : UseContractWriteConfig<
        typeof erc721BaseABI,
        'setDefaultRoyalty',
        TMode
      > & {
        abi?: never
        functionName?: 'setDefaultRoyalty'
      } = {} as any,
) {
  return useContractWrite<typeof erc721BaseABI, 'setDefaultRoyalty', TMode>({
    abi: erc721BaseABI,
    functionName: 'setDefaultRoyalty',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BaseABI}__ and `functionName` set to `"setDefaultTokenManager"`.
 */
export function useErc721BaseSetDefaultTokenManager<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721BaseABI,
          'setDefaultTokenManager'
        >['request']['abi'],
        'setDefaultTokenManager',
        TMode
      > & { functionName?: 'setDefaultTokenManager' }
    : UseContractWriteConfig<
        typeof erc721BaseABI,
        'setDefaultTokenManager',
        TMode
      > & {
        abi?: never
        functionName?: 'setDefaultTokenManager'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721BaseABI,
    'setDefaultTokenManager',
    TMode
  >({
    abi: erc721BaseABI,
    functionName: 'setDefaultTokenManager',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BaseABI}__ and `functionName` set to `"setGranularRoyalties"`.
 */
export function useErc721BaseSetGranularRoyalties<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721BaseABI,
          'setGranularRoyalties'
        >['request']['abi'],
        'setGranularRoyalties',
        TMode
      > & { functionName?: 'setGranularRoyalties' }
    : UseContractWriteConfig<
        typeof erc721BaseABI,
        'setGranularRoyalties',
        TMode
      > & {
        abi?: never
        functionName?: 'setGranularRoyalties'
      } = {} as any,
) {
  return useContractWrite<typeof erc721BaseABI, 'setGranularRoyalties', TMode>({
    abi: erc721BaseABI,
    functionName: 'setGranularRoyalties',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BaseABI}__ and `functionName` set to `"setGranularTokenManagers"`.
 */
export function useErc721BaseSetGranularTokenManagers<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721BaseABI,
          'setGranularTokenManagers'
        >['request']['abi'],
        'setGranularTokenManagers',
        TMode
      > & { functionName?: 'setGranularTokenManagers' }
    : UseContractWriteConfig<
        typeof erc721BaseABI,
        'setGranularTokenManagers',
        TMode
      > & {
        abi?: never
        functionName?: 'setGranularTokenManagers'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721BaseABI,
    'setGranularTokenManagers',
    TMode
  >({
    abi: erc721BaseABI,
    functionName: 'setGranularTokenManagers',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BaseABI}__ and `functionName` set to `"setRoyaltyManager"`.
 */
export function useErc721BaseSetRoyaltyManager<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721BaseABI,
          'setRoyaltyManager'
        >['request']['abi'],
        'setRoyaltyManager',
        TMode
      > & { functionName?: 'setRoyaltyManager' }
    : UseContractWriteConfig<
        typeof erc721BaseABI,
        'setRoyaltyManager',
        TMode
      > & {
        abi?: never
        functionName?: 'setRoyaltyManager'
      } = {} as any,
) {
  return useContractWrite<typeof erc721BaseABI, 'setRoyaltyManager', TMode>({
    abi: erc721BaseABI,
    functionName: 'setRoyaltyManager',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BaseABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useErc721BaseTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721BaseABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        typeof erc721BaseABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof erc721BaseABI, 'transferOwnership', TMode>({
    abi: erc721BaseABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721BaseABI}__ and `functionName` set to `"unregisterMinter"`.
 */
export function useErc721BaseUnregisterMinter<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721BaseABI,
          'unregisterMinter'
        >['request']['abi'],
        'unregisterMinter',
        TMode
      > & { functionName?: 'unregisterMinter' }
    : UseContractWriteConfig<
        typeof erc721BaseABI,
        'unregisterMinter',
        TMode
      > & {
        abi?: never
        functionName?: 'unregisterMinter'
      } = {} as any,
) {
  return useContractWrite<typeof erc721BaseABI, 'unregisterMinter', TMode>({
    abi: erc721BaseABI,
    functionName: 'unregisterMinter',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BaseABI}__.
 */
export function usePrepareErc721BaseWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721BaseABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BaseABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721BaseABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BaseABI}__ and `functionName` set to `"freezeMints"`.
 */
export function usePrepareErc721BaseFreezeMints(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721BaseABI, 'freezeMints'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BaseABI,
    functionName: 'freezeMints',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721BaseABI, 'freezeMints'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BaseABI}__ and `functionName` set to `"registerMinter"`.
 */
export function usePrepareErc721BaseRegisterMinter(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721BaseABI, 'registerMinter'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BaseABI,
    functionName: 'registerMinter',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721BaseABI, 'registerMinter'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BaseABI}__ and `functionName` set to `"removeDefaultTokenManager"`.
 */
export function usePrepareErc721BaseRemoveDefaultTokenManager(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721BaseABI,
      'removeDefaultTokenManager'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BaseABI,
    functionName: 'removeDefaultTokenManager',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721BaseABI,
    'removeDefaultTokenManager'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BaseABI}__ and `functionName` set to `"removeGranularTokenManagers"`.
 */
export function usePrepareErc721BaseRemoveGranularTokenManagers(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721BaseABI,
      'removeGranularTokenManagers'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BaseABI,
    functionName: 'removeGranularTokenManagers',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721BaseABI,
    'removeGranularTokenManagers'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BaseABI}__ and `functionName` set to `"removeRoyaltyManager"`.
 */
export function usePrepareErc721BaseRemoveRoyaltyManager(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721BaseABI, 'removeRoyaltyManager'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BaseABI,
    functionName: 'removeRoyaltyManager',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721BaseABI,
    'removeRoyaltyManager'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BaseABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareErc721BaseRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721BaseABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BaseABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721BaseABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BaseABI}__ and `functionName` set to `"setDefaultRoyalty"`.
 */
export function usePrepareErc721BaseSetDefaultRoyalty(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721BaseABI, 'setDefaultRoyalty'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BaseABI,
    functionName: 'setDefaultRoyalty',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721BaseABI, 'setDefaultRoyalty'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BaseABI}__ and `functionName` set to `"setDefaultTokenManager"`.
 */
export function usePrepareErc721BaseSetDefaultTokenManager(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721BaseABI,
      'setDefaultTokenManager'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BaseABI,
    functionName: 'setDefaultTokenManager',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721BaseABI,
    'setDefaultTokenManager'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BaseABI}__ and `functionName` set to `"setGranularRoyalties"`.
 */
export function usePrepareErc721BaseSetGranularRoyalties(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721BaseABI, 'setGranularRoyalties'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BaseABI,
    functionName: 'setGranularRoyalties',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721BaseABI,
    'setGranularRoyalties'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BaseABI}__ and `functionName` set to `"setGranularTokenManagers"`.
 */
export function usePrepareErc721BaseSetGranularTokenManagers(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721BaseABI,
      'setGranularTokenManagers'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BaseABI,
    functionName: 'setGranularTokenManagers',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721BaseABI,
    'setGranularTokenManagers'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BaseABI}__ and `functionName` set to `"setRoyaltyManager"`.
 */
export function usePrepareErc721BaseSetRoyaltyManager(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721BaseABI, 'setRoyaltyManager'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BaseABI,
    functionName: 'setRoyaltyManager',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721BaseABI, 'setRoyaltyManager'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BaseABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareErc721BaseTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721BaseABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BaseABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721BaseABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721BaseABI}__ and `functionName` set to `"unregisterMinter"`.
 */
export function usePrepareErc721BaseUnregisterMinter(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721BaseABI, 'unregisterMinter'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721BaseABI,
    functionName: 'unregisterMinter',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721BaseABI, 'unregisterMinter'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721BaseABI}__.
 */
export function useErc721BaseEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc721BaseABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721BaseABI,
    ...config,
  } as UseContractEventConfig<typeof erc721BaseABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721BaseABI}__ and `eventName` set to `"DefaultRoyaltySet"`.
 */
export function useErc721BaseDefaultRoyaltySetEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721BaseABI, 'DefaultRoyaltySet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721BaseABI,
    eventName: 'DefaultRoyaltySet',
    ...config,
  } as UseContractEventConfig<typeof erc721BaseABI, 'DefaultRoyaltySet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721BaseABI}__ and `eventName` set to `"DefaultTokenManagerChanged"`.
 */
export function useErc721BaseDefaultTokenManagerChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721BaseABI, 'DefaultTokenManagerChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721BaseABI,
    eventName: 'DefaultTokenManagerChanged',
    ...config,
  } as UseContractEventConfig<
    typeof erc721BaseABI,
    'DefaultTokenManagerChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721BaseABI}__ and `eventName` set to `"GranularRoyaltiesSet"`.
 */
export function useErc721BaseGranularRoyaltiesSetEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721BaseABI, 'GranularRoyaltiesSet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721BaseABI,
    eventName: 'GranularRoyaltiesSet',
    ...config,
  } as UseContractEventConfig<typeof erc721BaseABI, 'GranularRoyaltiesSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721BaseABI}__ and `eventName` set to `"GranularTokenManagersRemoved"`.
 */
export function useErc721BaseGranularTokenManagersRemovedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof erc721BaseABI,
      'GranularTokenManagersRemoved'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721BaseABI,
    eventName: 'GranularTokenManagersRemoved',
    ...config,
  } as UseContractEventConfig<
    typeof erc721BaseABI,
    'GranularTokenManagersRemoved'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721BaseABI}__ and `eventName` set to `"GranularTokenManagersSet"`.
 */
export function useErc721BaseGranularTokenManagersSetEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721BaseABI, 'GranularTokenManagersSet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721BaseABI,
    eventName: 'GranularTokenManagersSet',
    ...config,
  } as UseContractEventConfig<typeof erc721BaseABI, 'GranularTokenManagersSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721BaseABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc721BaseInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721BaseABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721BaseABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof erc721BaseABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721BaseABI}__ and `eventName` set to `"MinterRegistrationChanged"`.
 */
export function useErc721BaseMinterRegistrationChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721BaseABI, 'MinterRegistrationChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721BaseABI,
    eventName: 'MinterRegistrationChanged',
    ...config,
  } as UseContractEventConfig<
    typeof erc721BaseABI,
    'MinterRegistrationChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721BaseABI}__ and `eventName` set to `"MintsFrozen"`.
 */
export function useErc721BaseMintsFrozenEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721BaseABI, 'MintsFrozen'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721BaseABI,
    eventName: 'MintsFrozen',
    ...config,
  } as UseContractEventConfig<typeof erc721BaseABI, 'MintsFrozen'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721BaseABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useErc721BaseOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721BaseABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721BaseABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof erc721BaseABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721BaseABI}__ and `eventName` set to `"RoyaltyManagerChanged"`.
 */
export function useErc721BaseRoyaltyManagerChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721BaseABI, 'RoyaltyManagerChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721BaseABI,
    eventName: 'RoyaltyManagerChanged',
    ...config,
  } as UseContractEventConfig<typeof erc721BaseABI, 'RoyaltyManagerChanged'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721AUpgradeableABI}__.
 */
export function useErc721AUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc721AUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721AUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721AUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof erc721AUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721AUpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721AUpgradeableBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof erc721AUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721AUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721AUpgradeableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof erc721AUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721AUpgradeableABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721AUpgradeableGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof erc721AUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721AUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721AUpgradeableABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof erc721AUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721AUpgradeableABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721AUpgradeableIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof erc721AUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721AUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721AUpgradeableABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof erc721AUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721AUpgradeableABI}__ and `functionName` set to `"name"`.
 */
export function useErc721AUpgradeableName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof erc721AUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721AUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721AUpgradeableABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof erc721AUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721AUpgradeableABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721AUpgradeableOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof erc721AUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721AUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721AUpgradeableABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<
    typeof erc721AUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721AUpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc721AUpgradeableSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof erc721AUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721AUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721AUpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof erc721AUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721AUpgradeableABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721AUpgradeableSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof erc721AUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721AUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721AUpgradeableABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof erc721AUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721AUpgradeableABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721AUpgradeableTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<typeof erc721AUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721AUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721AUpgradeableABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<
    typeof erc721AUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721AUpgradeableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc721AUpgradeableTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof erc721AUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721AUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721AUpgradeableABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof erc721AUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721AUpgradeableABI}__.
 */
export function useErc721AUpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721AUpgradeableABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof erc721AUpgradeableABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof erc721AUpgradeableABI, TFunctionName, TMode>({
    abi: erc721AUpgradeableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721AUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721AUpgradeableApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721AUpgradeableABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof erc721AUpgradeableABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof erc721AUpgradeableABI, 'approve', TMode>({
    abi: erc721AUpgradeableABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721AUpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721AUpgradeableSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721AUpgradeableABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        typeof erc721AUpgradeableABI,
        'safeTransferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721AUpgradeableABI,
    'safeTransferFrom',
    TMode
  >({
    abi: erc721AUpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721AUpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721AUpgradeableSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721AUpgradeableABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        typeof erc721AUpgradeableABI,
        'setApprovalForAll',
        TMode
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721AUpgradeableABI,
    'setApprovalForAll',
    TMode
  >({
    abi: erc721AUpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721AUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721AUpgradeableTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721AUpgradeableABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        typeof erc721AUpgradeableABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof erc721AUpgradeableABI, 'transferFrom', TMode>({
    abi: erc721AUpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721AUpgradeableABI}__.
 */
export function usePrepareErc721AUpgradeableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721AUpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721AUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721AUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721AUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721AUpgradeableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721AUpgradeableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721AUpgradeableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721AUpgradeableABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721AUpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721AUpgradeableSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721AUpgradeableABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721AUpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721AUpgradeableABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721AUpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721AUpgradeableSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721AUpgradeableABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721AUpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721AUpgradeableABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721AUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721AUpgradeableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721AUpgradeableABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721AUpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721AUpgradeableABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721AUpgradeableABI}__.
 */
export function useErc721AUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc721AUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721AUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof erc721AUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721AUpgradeableABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721AUpgradeableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721AUpgradeableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721AUpgradeableABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc721AUpgradeableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721AUpgradeableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721AUpgradeableApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721AUpgradeableABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721AUpgradeableABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof erc721AUpgradeableABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721AUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc721AUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721AUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721AUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof erc721AUpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721AUpgradeableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721AUpgradeableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721AUpgradeableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721AUpgradeableABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc721AUpgradeableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721AIerc721ReceiverUpgradeableABI}__.
 */
export function useErc721AIerc721ReceiverUpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721AIerc721ReceiverUpgradeableABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof erc721AIerc721ReceiverUpgradeableABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721AIerc721ReceiverUpgradeableABI,
    TFunctionName,
    TMode
  >({ abi: erc721AIerc721ReceiverUpgradeableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721AIerc721ReceiverUpgradeableABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useErc721AIerc721ReceiverUpgradeableOnErc721Received<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721AIerc721ReceiverUpgradeableABI,
          'onERC721Received'
        >['request']['abi'],
        'onERC721Received',
        TMode
      > & { functionName?: 'onERC721Received' }
    : UseContractWriteConfig<
        typeof erc721AIerc721ReceiverUpgradeableABI,
        'onERC721Received',
        TMode
      > & {
        abi?: never
        functionName?: 'onERC721Received'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721AIerc721ReceiverUpgradeableABI,
    'onERC721Received',
    TMode
  >({
    abi: erc721AIerc721ReceiverUpgradeableABI,
    functionName: 'onERC721Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721AIerc721ReceiverUpgradeableABI}__.
 */
export function usePrepareErc721AIerc721ReceiverUpgradeableWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721AIerc721ReceiverUpgradeableABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721AIerc721ReceiverUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721AIerc721ReceiverUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721AIerc721ReceiverUpgradeableABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePrepareErc721AIerc721ReceiverUpgradeableOnErc721Received(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721AIerc721ReceiverUpgradeableABI,
      'onERC721Received'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721AIerc721ReceiverUpgradeableABI,
    functionName: 'onERC721Received',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721AIerc721ReceiverUpgradeableABI,
    'onERC721Received'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GeneralBaseABI}__.
 */
export function useErc721GeneralBaseRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc721GeneralBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GeneralBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GeneralBaseABI,
    ...config,
  } as UseContractReadConfig<
    typeof erc721GeneralBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"DEFAULT_SUBSCRIPTION"`.
 */
export function useErc721GeneralBaseDefaultSubscription<
  TFunctionName extends 'DEFAULT_SUBSCRIPTION',
  TSelectData = ReadContractResult<typeof erc721GeneralBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GeneralBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GeneralBaseABI,
    functionName: 'DEFAULT_SUBSCRIPTION',
    ...config,
  } as UseContractReadConfig<
    typeof erc721GeneralBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"MARKETPLACE_FILTERER_REGISTRY"`.
 */
export function useErc721GeneralBaseMarketplaceFiltererRegistry<
  TFunctionName extends 'MARKETPLACE_FILTERER_REGISTRY',
  TSelectData = ReadContractResult<typeof erc721GeneralBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GeneralBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GeneralBaseABI,
    functionName: 'MARKETPLACE_FILTERER_REGISTRY',
    ...config,
  } as UseContractReadConfig<
    typeof erc721GeneralBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721GeneralBaseBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof erc721GeneralBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GeneralBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GeneralBaseABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof erc721GeneralBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"baseURI"`.
 */
export function useErc721GeneralBaseBaseUri<
  TFunctionName extends 'baseURI',
  TSelectData = ReadContractResult<typeof erc721GeneralBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GeneralBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GeneralBaseABI,
    functionName: 'baseURI',
    ...config,
  } as UseContractReadConfig<
    typeof erc721GeneralBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"contractURI"`.
 */
export function useErc721GeneralBaseContractUri<
  TFunctionName extends 'contractURI',
  TSelectData = ReadContractResult<typeof erc721GeneralBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GeneralBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GeneralBaseABI,
    functionName: 'contractURI',
    ...config,
  } as UseContractReadConfig<
    typeof erc721GeneralBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"defaultManager"`.
 */
export function useErc721GeneralBaseDefaultManager<
  TFunctionName extends 'defaultManager',
  TSelectData = ReadContractResult<typeof erc721GeneralBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GeneralBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GeneralBaseABI,
    functionName: 'defaultManager',
    ...config,
  } as UseContractReadConfig<
    typeof erc721GeneralBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721GeneralBaseGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof erc721GeneralBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GeneralBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GeneralBaseABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof erc721GeneralBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721GeneralBaseIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof erc721GeneralBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GeneralBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GeneralBaseABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof erc721GeneralBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"isTrustedForwarder"`.
 */
export function useErc721GeneralBaseIsTrustedForwarder<
  TFunctionName extends 'isTrustedForwarder',
  TSelectData = ReadContractResult<typeof erc721GeneralBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GeneralBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GeneralBaseABI,
    functionName: 'isTrustedForwarder',
    ...config,
  } as UseContractReadConfig<
    typeof erc721GeneralBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"limitSupply"`.
 */
export function useErc721GeneralBaseLimitSupply<
  TFunctionName extends 'limitSupply',
  TSelectData = ReadContractResult<typeof erc721GeneralBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GeneralBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GeneralBaseABI,
    functionName: 'limitSupply',
    ...config,
  } as UseContractReadConfig<
    typeof erc721GeneralBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"minters"`.
 */
export function useErc721GeneralBaseMinters<
  TFunctionName extends 'minters',
  TSelectData = ReadContractResult<typeof erc721GeneralBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GeneralBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GeneralBaseABI,
    functionName: 'minters',
    ...config,
  } as UseContractReadConfig<
    typeof erc721GeneralBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"name"`.
 */
export function useErc721GeneralBaseName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof erc721GeneralBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GeneralBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GeneralBaseABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof erc721GeneralBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"observability"`.
 */
export function useErc721GeneralBaseObservability<
  TFunctionName extends 'observability',
  TSelectData = ReadContractResult<typeof erc721GeneralBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GeneralBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GeneralBaseABI,
    functionName: 'observability',
    ...config,
  } as UseContractReadConfig<
    typeof erc721GeneralBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"operatorFiltererRegistry"`.
 */
export function useErc721GeneralBaseOperatorFiltererRegistry<
  TFunctionName extends 'operatorFiltererRegistry',
  TSelectData = ReadContractResult<typeof erc721GeneralBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GeneralBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GeneralBaseABI,
    functionName: 'operatorFiltererRegistry',
    ...config,
  } as UseContractReadConfig<
    typeof erc721GeneralBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"owner"`.
 */
export function useErc721GeneralBaseOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof erc721GeneralBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GeneralBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GeneralBaseABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof erc721GeneralBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721GeneralBaseOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof erc721GeneralBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GeneralBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GeneralBaseABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<
    typeof erc721GeneralBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"royaltyInfo"`.
 */
export function useErc721GeneralBaseRoyaltyInfo<
  TFunctionName extends 'royaltyInfo',
  TSelectData = ReadContractResult<typeof erc721GeneralBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GeneralBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GeneralBaseABI,
    functionName: 'royaltyInfo',
    ...config,
  } as UseContractReadConfig<
    typeof erc721GeneralBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"royaltyManager"`.
 */
export function useErc721GeneralBaseRoyaltyManager<
  TFunctionName extends 'royaltyManager',
  TSelectData = ReadContractResult<typeof erc721GeneralBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GeneralBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GeneralBaseABI,
    functionName: 'royaltyManager',
    ...config,
  } as UseContractReadConfig<
    typeof erc721GeneralBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc721GeneralBaseSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof erc721GeneralBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GeneralBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GeneralBaseABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof erc721GeneralBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721GeneralBaseSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof erc721GeneralBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GeneralBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GeneralBaseABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof erc721GeneralBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"tokenManager"`.
 */
export function useErc721GeneralBaseTokenManager<
  TFunctionName extends 'tokenManager',
  TSelectData = ReadContractResult<typeof erc721GeneralBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GeneralBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GeneralBaseABI,
    functionName: 'tokenManager',
    ...config,
  } as UseContractReadConfig<
    typeof erc721GeneralBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721GeneralBaseTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<typeof erc721GeneralBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GeneralBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GeneralBaseABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<
    typeof erc721GeneralBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc721GeneralBaseTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof erc721GeneralBaseABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GeneralBaseABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GeneralBaseABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof erc721GeneralBaseABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__.
 */
export function useErc721GeneralBaseWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GeneralBaseABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof erc721GeneralBaseABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof erc721GeneralBaseABI, TFunctionName, TMode>({
    abi: erc721GeneralBaseABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721GeneralBaseApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GeneralBaseABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof erc721GeneralBaseABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof erc721GeneralBaseABI, 'approve', TMode>({
    abi: erc721GeneralBaseABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"burn"`.
 */
export function useErc721GeneralBaseBurn<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GeneralBaseABI,
          'burn'
        >['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<typeof erc721GeneralBaseABI, 'burn', TMode> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<typeof erc721GeneralBaseABI, 'burn', TMode>({
    abi: erc721GeneralBaseABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"freezeMints"`.
 */
export function useErc721GeneralBaseFreezeMints<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GeneralBaseABI,
          'freezeMints'
        >['request']['abi'],
        'freezeMints',
        TMode
      > & { functionName?: 'freezeMints' }
    : UseContractWriteConfig<
        typeof erc721GeneralBaseABI,
        'freezeMints',
        TMode
      > & {
        abi?: never
        functionName?: 'freezeMints'
      } = {} as any,
) {
  return useContractWrite<typeof erc721GeneralBaseABI, 'freezeMints', TMode>({
    abi: erc721GeneralBaseABI,
    functionName: 'freezeMints',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"mintAmountToOneRecipient"`.
 */
export function useErc721GeneralBaseMintAmountToOneRecipient<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GeneralBaseABI,
          'mintAmountToOneRecipient'
        >['request']['abi'],
        'mintAmountToOneRecipient',
        TMode
      > & { functionName?: 'mintAmountToOneRecipient' }
    : UseContractWriteConfig<
        typeof erc721GeneralBaseABI,
        'mintAmountToOneRecipient',
        TMode
      > & {
        abi?: never
        functionName?: 'mintAmountToOneRecipient'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721GeneralBaseABI,
    'mintAmountToOneRecipient',
    TMode
  >({
    abi: erc721GeneralBaseABI,
    functionName: 'mintAmountToOneRecipient',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"mintOneToMultipleRecipients"`.
 */
export function useErc721GeneralBaseMintOneToMultipleRecipients<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GeneralBaseABI,
          'mintOneToMultipleRecipients'
        >['request']['abi'],
        'mintOneToMultipleRecipients',
        TMode
      > & { functionName?: 'mintOneToMultipleRecipients' }
    : UseContractWriteConfig<
        typeof erc721GeneralBaseABI,
        'mintOneToMultipleRecipients',
        TMode
      > & {
        abi?: never
        functionName?: 'mintOneToMultipleRecipients'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721GeneralBaseABI,
    'mintOneToMultipleRecipients',
    TMode
  >({
    abi: erc721GeneralBaseABI,
    functionName: 'mintOneToMultipleRecipients',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"mintOneToOneRecipient"`.
 */
export function useErc721GeneralBaseMintOneToOneRecipient<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GeneralBaseABI,
          'mintOneToOneRecipient'
        >['request']['abi'],
        'mintOneToOneRecipient',
        TMode
      > & { functionName?: 'mintOneToOneRecipient' }
    : UseContractWriteConfig<
        typeof erc721GeneralBaseABI,
        'mintOneToOneRecipient',
        TMode
      > & {
        abi?: never
        functionName?: 'mintOneToOneRecipient'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721GeneralBaseABI,
    'mintOneToOneRecipient',
    TMode
  >({
    abi: erc721GeneralBaseABI,
    functionName: 'mintOneToOneRecipient',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"mintSameAmountToMultipleRecipients"`.
 */
export function useErc721GeneralBaseMintSameAmountToMultipleRecipients<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GeneralBaseABI,
          'mintSameAmountToMultipleRecipients'
        >['request']['abi'],
        'mintSameAmountToMultipleRecipients',
        TMode
      > & { functionName?: 'mintSameAmountToMultipleRecipients' }
    : UseContractWriteConfig<
        typeof erc721GeneralBaseABI,
        'mintSameAmountToMultipleRecipients',
        TMode
      > & {
        abi?: never
        functionName?: 'mintSameAmountToMultipleRecipients'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721GeneralBaseABI,
    'mintSameAmountToMultipleRecipients',
    TMode
  >({
    abi: erc721GeneralBaseABI,
    functionName: 'mintSameAmountToMultipleRecipients',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"mintSpecificTokenToOneRecipient"`.
 */
export function useErc721GeneralBaseMintSpecificTokenToOneRecipient<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GeneralBaseABI,
          'mintSpecificTokenToOneRecipient'
        >['request']['abi'],
        'mintSpecificTokenToOneRecipient',
        TMode
      > & { functionName?: 'mintSpecificTokenToOneRecipient' }
    : UseContractWriteConfig<
        typeof erc721GeneralBaseABI,
        'mintSpecificTokenToOneRecipient',
        TMode
      > & {
        abi?: never
        functionName?: 'mintSpecificTokenToOneRecipient'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721GeneralBaseABI,
    'mintSpecificTokenToOneRecipient',
    TMode
  >({
    abi: erc721GeneralBaseABI,
    functionName: 'mintSpecificTokenToOneRecipient',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"mintSpecificTokensToOneRecipient"`.
 */
export function useErc721GeneralBaseMintSpecificTokensToOneRecipient<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GeneralBaseABI,
          'mintSpecificTokensToOneRecipient'
        >['request']['abi'],
        'mintSpecificTokensToOneRecipient',
        TMode
      > & { functionName?: 'mintSpecificTokensToOneRecipient' }
    : UseContractWriteConfig<
        typeof erc721GeneralBaseABI,
        'mintSpecificTokensToOneRecipient',
        TMode
      > & {
        abi?: never
        functionName?: 'mintSpecificTokensToOneRecipient'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721GeneralBaseABI,
    'mintSpecificTokensToOneRecipient',
    TMode
  >({
    abi: erc721GeneralBaseABI,
    functionName: 'mintSpecificTokensToOneRecipient',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"registerMinter"`.
 */
export function useErc721GeneralBaseRegisterMinter<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GeneralBaseABI,
          'registerMinter'
        >['request']['abi'],
        'registerMinter',
        TMode
      > & { functionName?: 'registerMinter' }
    : UseContractWriteConfig<
        typeof erc721GeneralBaseABI,
        'registerMinter',
        TMode
      > & {
        abi?: never
        functionName?: 'registerMinter'
      } = {} as any,
) {
  return useContractWrite<typeof erc721GeneralBaseABI, 'registerMinter', TMode>(
    {
      abi: erc721GeneralBaseABI,
      functionName: 'registerMinter',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"removeDefaultTokenManager"`.
 */
export function useErc721GeneralBaseRemoveDefaultTokenManager<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GeneralBaseABI,
          'removeDefaultTokenManager'
        >['request']['abi'],
        'removeDefaultTokenManager',
        TMode
      > & { functionName?: 'removeDefaultTokenManager' }
    : UseContractWriteConfig<
        typeof erc721GeneralBaseABI,
        'removeDefaultTokenManager',
        TMode
      > & {
        abi?: never
        functionName?: 'removeDefaultTokenManager'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721GeneralBaseABI,
    'removeDefaultTokenManager',
    TMode
  >({
    abi: erc721GeneralBaseABI,
    functionName: 'removeDefaultTokenManager',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"removeGranularTokenManagers"`.
 */
export function useErc721GeneralBaseRemoveGranularTokenManagers<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GeneralBaseABI,
          'removeGranularTokenManagers'
        >['request']['abi'],
        'removeGranularTokenManagers',
        TMode
      > & { functionName?: 'removeGranularTokenManagers' }
    : UseContractWriteConfig<
        typeof erc721GeneralBaseABI,
        'removeGranularTokenManagers',
        TMode
      > & {
        abi?: never
        functionName?: 'removeGranularTokenManagers'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721GeneralBaseABI,
    'removeGranularTokenManagers',
    TMode
  >({
    abi: erc721GeneralBaseABI,
    functionName: 'removeGranularTokenManagers',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"removeMarketplaceFiltererRegistryAndUnregister"`.
 */
export function useErc721GeneralBaseRemoveMarketplaceFiltererRegistryAndUnregister<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GeneralBaseABI,
          'removeMarketplaceFiltererRegistryAndUnregister'
        >['request']['abi'],
        'removeMarketplaceFiltererRegistryAndUnregister',
        TMode
      > & { functionName?: 'removeMarketplaceFiltererRegistryAndUnregister' }
    : UseContractWriteConfig<
        typeof erc721GeneralBaseABI,
        'removeMarketplaceFiltererRegistryAndUnregister',
        TMode
      > & {
        abi?: never
        functionName?: 'removeMarketplaceFiltererRegistryAndUnregister'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721GeneralBaseABI,
    'removeMarketplaceFiltererRegistryAndUnregister',
    TMode
  >({
    abi: erc721GeneralBaseABI,
    functionName: 'removeMarketplaceFiltererRegistryAndUnregister',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"removeRoyaltyManager"`.
 */
export function useErc721GeneralBaseRemoveRoyaltyManager<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GeneralBaseABI,
          'removeRoyaltyManager'
        >['request']['abi'],
        'removeRoyaltyManager',
        TMode
      > & { functionName?: 'removeRoyaltyManager' }
    : UseContractWriteConfig<
        typeof erc721GeneralBaseABI,
        'removeRoyaltyManager',
        TMode
      > & {
        abi?: never
        functionName?: 'removeRoyaltyManager'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721GeneralBaseABI,
    'removeRoyaltyManager',
    TMode
  >({
    abi: erc721GeneralBaseABI,
    functionName: 'removeRoyaltyManager',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useErc721GeneralBaseRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GeneralBaseABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        typeof erc721GeneralBaseABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721GeneralBaseABI,
    'renounceOwnership',
    TMode
  >({
    abi: erc721GeneralBaseABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721GeneralBaseSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GeneralBaseABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        typeof erc721GeneralBaseABI,
        'safeTransferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721GeneralBaseABI,
    'safeTransferFrom',
    TMode
  >({
    abi: erc721GeneralBaseABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721GeneralBaseSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GeneralBaseABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        typeof erc721GeneralBaseABI,
        'setApprovalForAll',
        TMode
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721GeneralBaseABI,
    'setApprovalForAll',
    TMode
  >({
    abi: erc721GeneralBaseABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"setBaseURI"`.
 */
export function useErc721GeneralBaseSetBaseUri<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GeneralBaseABI,
          'setBaseURI'
        >['request']['abi'],
        'setBaseURI',
        TMode
      > & { functionName?: 'setBaseURI' }
    : UseContractWriteConfig<
        typeof erc721GeneralBaseABI,
        'setBaseURI',
        TMode
      > & {
        abi?: never
        functionName?: 'setBaseURI'
      } = {} as any,
) {
  return useContractWrite<typeof erc721GeneralBaseABI, 'setBaseURI', TMode>({
    abi: erc721GeneralBaseABI,
    functionName: 'setBaseURI',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"setContractMetadata"`.
 */
export function useErc721GeneralBaseSetContractMetadata<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GeneralBaseABI,
          'setContractMetadata'
        >['request']['abi'],
        'setContractMetadata',
        TMode
      > & { functionName?: 'setContractMetadata' }
    : UseContractWriteConfig<
        typeof erc721GeneralBaseABI,
        'setContractMetadata',
        TMode
      > & {
        abi?: never
        functionName?: 'setContractMetadata'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721GeneralBaseABI,
    'setContractMetadata',
    TMode
  >({
    abi: erc721GeneralBaseABI,
    functionName: 'setContractMetadata',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription"`.
 */
export function useErc721GeneralBaseSetCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GeneralBaseABI,
          'setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription'
        >['request']['abi'],
        'setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
        TMode
      > & {
        functionName?: 'setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription'
      }
    : UseContractWriteConfig<
        typeof erc721GeneralBaseABI,
        'setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
        TMode
      > & {
        abi?: never
        functionName?: 'setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721GeneralBaseABI,
    'setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
    TMode
  >({
    abi: erc721GeneralBaseABI,
    functionName:
      'setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"setDefaultRoyalty"`.
 */
export function useErc721GeneralBaseSetDefaultRoyalty<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GeneralBaseABI,
          'setDefaultRoyalty'
        >['request']['abi'],
        'setDefaultRoyalty',
        TMode
      > & { functionName?: 'setDefaultRoyalty' }
    : UseContractWriteConfig<
        typeof erc721GeneralBaseABI,
        'setDefaultRoyalty',
        TMode
      > & {
        abi?: never
        functionName?: 'setDefaultRoyalty'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721GeneralBaseABI,
    'setDefaultRoyalty',
    TMode
  >({
    abi: erc721GeneralBaseABI,
    functionName: 'setDefaultRoyalty',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"setDefaultTokenManager"`.
 */
export function useErc721GeneralBaseSetDefaultTokenManager<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GeneralBaseABI,
          'setDefaultTokenManager'
        >['request']['abi'],
        'setDefaultTokenManager',
        TMode
      > & { functionName?: 'setDefaultTokenManager' }
    : UseContractWriteConfig<
        typeof erc721GeneralBaseABI,
        'setDefaultTokenManager',
        TMode
      > & {
        abi?: never
        functionName?: 'setDefaultTokenManager'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721GeneralBaseABI,
    'setDefaultTokenManager',
    TMode
  >({
    abi: erc721GeneralBaseABI,
    functionName: 'setDefaultTokenManager',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"setGranularRoyalties"`.
 */
export function useErc721GeneralBaseSetGranularRoyalties<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GeneralBaseABI,
          'setGranularRoyalties'
        >['request']['abi'],
        'setGranularRoyalties',
        TMode
      > & { functionName?: 'setGranularRoyalties' }
    : UseContractWriteConfig<
        typeof erc721GeneralBaseABI,
        'setGranularRoyalties',
        TMode
      > & {
        abi?: never
        functionName?: 'setGranularRoyalties'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721GeneralBaseABI,
    'setGranularRoyalties',
    TMode
  >({
    abi: erc721GeneralBaseABI,
    functionName: 'setGranularRoyalties',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"setGranularTokenManagers"`.
 */
export function useErc721GeneralBaseSetGranularTokenManagers<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GeneralBaseABI,
          'setGranularTokenManagers'
        >['request']['abi'],
        'setGranularTokenManagers',
        TMode
      > & { functionName?: 'setGranularTokenManagers' }
    : UseContractWriteConfig<
        typeof erc721GeneralBaseABI,
        'setGranularTokenManagers',
        TMode
      > & {
        abi?: never
        functionName?: 'setGranularTokenManagers'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721GeneralBaseABI,
    'setGranularTokenManagers',
    TMode
  >({
    abi: erc721GeneralBaseABI,
    functionName: 'setGranularTokenManagers',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"setLimitSupply"`.
 */
export function useErc721GeneralBaseSetLimitSupply<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GeneralBaseABI,
          'setLimitSupply'
        >['request']['abi'],
        'setLimitSupply',
        TMode
      > & { functionName?: 'setLimitSupply' }
    : UseContractWriteConfig<
        typeof erc721GeneralBaseABI,
        'setLimitSupply',
        TMode
      > & {
        abi?: never
        functionName?: 'setLimitSupply'
      } = {} as any,
) {
  return useContractWrite<typeof erc721GeneralBaseABI, 'setLimitSupply', TMode>(
    {
      abi: erc721GeneralBaseABI,
      functionName: 'setLimitSupply',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"setMarketplaceFiltererRegistryAndRegisterDefaultSubscription"`.
 */
export function useErc721GeneralBaseSetMarketplaceFiltererRegistryAndRegisterDefaultSubscription<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GeneralBaseABI,
          'setMarketplaceFiltererRegistryAndRegisterDefaultSubscription'
        >['request']['abi'],
        'setMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
        TMode
      > & {
        functionName?: 'setMarketplaceFiltererRegistryAndRegisterDefaultSubscription'
      }
    : UseContractWriteConfig<
        typeof erc721GeneralBaseABI,
        'setMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
        TMode
      > & {
        abi?: never
        functionName?: 'setMarketplaceFiltererRegistryAndRegisterDefaultSubscription'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721GeneralBaseABI,
    'setMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
    TMode
  >({
    abi: erc721GeneralBaseABI,
    functionName:
      'setMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"setRoyaltyManager"`.
 */
export function useErc721GeneralBaseSetRoyaltyManager<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GeneralBaseABI,
          'setRoyaltyManager'
        >['request']['abi'],
        'setRoyaltyManager',
        TMode
      > & { functionName?: 'setRoyaltyManager' }
    : UseContractWriteConfig<
        typeof erc721GeneralBaseABI,
        'setRoyaltyManager',
        TMode
      > & {
        abi?: never
        functionName?: 'setRoyaltyManager'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721GeneralBaseABI,
    'setRoyaltyManager',
    TMode
  >({
    abi: erc721GeneralBaseABI,
    functionName: 'setRoyaltyManager',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"setTokenURIs"`.
 */
export function useErc721GeneralBaseSetTokenUrIs<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GeneralBaseABI,
          'setTokenURIs'
        >['request']['abi'],
        'setTokenURIs',
        TMode
      > & { functionName?: 'setTokenURIs' }
    : UseContractWriteConfig<
        typeof erc721GeneralBaseABI,
        'setTokenURIs',
        TMode
      > & {
        abi?: never
        functionName?: 'setTokenURIs'
      } = {} as any,
) {
  return useContractWrite<typeof erc721GeneralBaseABI, 'setTokenURIs', TMode>({
    abi: erc721GeneralBaseABI,
    functionName: 'setTokenURIs',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721GeneralBaseTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GeneralBaseABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        typeof erc721GeneralBaseABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof erc721GeneralBaseABI, 'transferFrom', TMode>({
    abi: erc721GeneralBaseABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useErc721GeneralBaseTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GeneralBaseABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        typeof erc721GeneralBaseABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721GeneralBaseABI,
    'transferOwnership',
    TMode
  >({
    abi: erc721GeneralBaseABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"unregisterMinter"`.
 */
export function useErc721GeneralBaseUnregisterMinter<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GeneralBaseABI,
          'unregisterMinter'
        >['request']['abi'],
        'unregisterMinter',
        TMode
      > & { functionName?: 'unregisterMinter' }
    : UseContractWriteConfig<
        typeof erc721GeneralBaseABI,
        'unregisterMinter',
        TMode
      > & {
        abi?: never
        functionName?: 'unregisterMinter'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721GeneralBaseABI,
    'unregisterMinter',
    TMode
  >({
    abi: erc721GeneralBaseABI,
    functionName: 'unregisterMinter',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__.
 */
export function usePrepareErc721GeneralBaseWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721GeneralBaseABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GeneralBaseABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GeneralBaseABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721GeneralBaseApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721GeneralBaseABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GeneralBaseABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721GeneralBaseABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareErc721GeneralBaseBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721GeneralBaseABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GeneralBaseABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721GeneralBaseABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"freezeMints"`.
 */
export function usePrepareErc721GeneralBaseFreezeMints(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721GeneralBaseABI, 'freezeMints'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GeneralBaseABI,
    functionName: 'freezeMints',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GeneralBaseABI,
    'freezeMints'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"mintAmountToOneRecipient"`.
 */
export function usePrepareErc721GeneralBaseMintAmountToOneRecipient(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GeneralBaseABI,
      'mintAmountToOneRecipient'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GeneralBaseABI,
    functionName: 'mintAmountToOneRecipient',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GeneralBaseABI,
    'mintAmountToOneRecipient'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"mintOneToMultipleRecipients"`.
 */
export function usePrepareErc721GeneralBaseMintOneToMultipleRecipients(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GeneralBaseABI,
      'mintOneToMultipleRecipients'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GeneralBaseABI,
    functionName: 'mintOneToMultipleRecipients',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GeneralBaseABI,
    'mintOneToMultipleRecipients'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"mintOneToOneRecipient"`.
 */
export function usePrepareErc721GeneralBaseMintOneToOneRecipient(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GeneralBaseABI,
      'mintOneToOneRecipient'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GeneralBaseABI,
    functionName: 'mintOneToOneRecipient',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GeneralBaseABI,
    'mintOneToOneRecipient'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"mintSameAmountToMultipleRecipients"`.
 */
export function usePrepareErc721GeneralBaseMintSameAmountToMultipleRecipients(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GeneralBaseABI,
      'mintSameAmountToMultipleRecipients'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GeneralBaseABI,
    functionName: 'mintSameAmountToMultipleRecipients',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GeneralBaseABI,
    'mintSameAmountToMultipleRecipients'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"mintSpecificTokenToOneRecipient"`.
 */
export function usePrepareErc721GeneralBaseMintSpecificTokenToOneRecipient(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GeneralBaseABI,
      'mintSpecificTokenToOneRecipient'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GeneralBaseABI,
    functionName: 'mintSpecificTokenToOneRecipient',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GeneralBaseABI,
    'mintSpecificTokenToOneRecipient'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"mintSpecificTokensToOneRecipient"`.
 */
export function usePrepareErc721GeneralBaseMintSpecificTokensToOneRecipient(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GeneralBaseABI,
      'mintSpecificTokensToOneRecipient'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GeneralBaseABI,
    functionName: 'mintSpecificTokensToOneRecipient',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GeneralBaseABI,
    'mintSpecificTokensToOneRecipient'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"registerMinter"`.
 */
export function usePrepareErc721GeneralBaseRegisterMinter(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GeneralBaseABI,
      'registerMinter'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GeneralBaseABI,
    functionName: 'registerMinter',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GeneralBaseABI,
    'registerMinter'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"removeDefaultTokenManager"`.
 */
export function usePrepareErc721GeneralBaseRemoveDefaultTokenManager(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GeneralBaseABI,
      'removeDefaultTokenManager'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GeneralBaseABI,
    functionName: 'removeDefaultTokenManager',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GeneralBaseABI,
    'removeDefaultTokenManager'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"removeGranularTokenManagers"`.
 */
export function usePrepareErc721GeneralBaseRemoveGranularTokenManagers(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GeneralBaseABI,
      'removeGranularTokenManagers'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GeneralBaseABI,
    functionName: 'removeGranularTokenManagers',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GeneralBaseABI,
    'removeGranularTokenManagers'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"removeMarketplaceFiltererRegistryAndUnregister"`.
 */
export function usePrepareErc721GeneralBaseRemoveMarketplaceFiltererRegistryAndUnregister(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GeneralBaseABI,
      'removeMarketplaceFiltererRegistryAndUnregister'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GeneralBaseABI,
    functionName: 'removeMarketplaceFiltererRegistryAndUnregister',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GeneralBaseABI,
    'removeMarketplaceFiltererRegistryAndUnregister'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"removeRoyaltyManager"`.
 */
export function usePrepareErc721GeneralBaseRemoveRoyaltyManager(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GeneralBaseABI,
      'removeRoyaltyManager'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GeneralBaseABI,
    functionName: 'removeRoyaltyManager',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GeneralBaseABI,
    'removeRoyaltyManager'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareErc721GeneralBaseRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GeneralBaseABI,
      'renounceOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GeneralBaseABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GeneralBaseABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721GeneralBaseSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GeneralBaseABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GeneralBaseABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GeneralBaseABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721GeneralBaseSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GeneralBaseABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GeneralBaseABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GeneralBaseABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"setBaseURI"`.
 */
export function usePrepareErc721GeneralBaseSetBaseUri(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721GeneralBaseABI, 'setBaseURI'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GeneralBaseABI,
    functionName: 'setBaseURI',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721GeneralBaseABI, 'setBaseURI'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"setContractMetadata"`.
 */
export function usePrepareErc721GeneralBaseSetContractMetadata(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GeneralBaseABI,
      'setContractMetadata'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GeneralBaseABI,
    functionName: 'setContractMetadata',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GeneralBaseABI,
    'setContractMetadata'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription"`.
 */
export function usePrepareErc721GeneralBaseSetCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GeneralBaseABI,
      'setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GeneralBaseABI,
    functionName:
      'setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GeneralBaseABI,
    'setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"setDefaultRoyalty"`.
 */
export function usePrepareErc721GeneralBaseSetDefaultRoyalty(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GeneralBaseABI,
      'setDefaultRoyalty'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GeneralBaseABI,
    functionName: 'setDefaultRoyalty',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GeneralBaseABI,
    'setDefaultRoyalty'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"setDefaultTokenManager"`.
 */
export function usePrepareErc721GeneralBaseSetDefaultTokenManager(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GeneralBaseABI,
      'setDefaultTokenManager'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GeneralBaseABI,
    functionName: 'setDefaultTokenManager',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GeneralBaseABI,
    'setDefaultTokenManager'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"setGranularRoyalties"`.
 */
export function usePrepareErc721GeneralBaseSetGranularRoyalties(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GeneralBaseABI,
      'setGranularRoyalties'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GeneralBaseABI,
    functionName: 'setGranularRoyalties',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GeneralBaseABI,
    'setGranularRoyalties'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"setGranularTokenManagers"`.
 */
export function usePrepareErc721GeneralBaseSetGranularTokenManagers(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GeneralBaseABI,
      'setGranularTokenManagers'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GeneralBaseABI,
    functionName: 'setGranularTokenManagers',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GeneralBaseABI,
    'setGranularTokenManagers'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"setLimitSupply"`.
 */
export function usePrepareErc721GeneralBaseSetLimitSupply(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GeneralBaseABI,
      'setLimitSupply'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GeneralBaseABI,
    functionName: 'setLimitSupply',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GeneralBaseABI,
    'setLimitSupply'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"setMarketplaceFiltererRegistryAndRegisterDefaultSubscription"`.
 */
export function usePrepareErc721GeneralBaseSetMarketplaceFiltererRegistryAndRegisterDefaultSubscription(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GeneralBaseABI,
      'setMarketplaceFiltererRegistryAndRegisterDefaultSubscription'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GeneralBaseABI,
    functionName:
      'setMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GeneralBaseABI,
    'setMarketplaceFiltererRegistryAndRegisterDefaultSubscription'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"setRoyaltyManager"`.
 */
export function usePrepareErc721GeneralBaseSetRoyaltyManager(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GeneralBaseABI,
      'setRoyaltyManager'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GeneralBaseABI,
    functionName: 'setRoyaltyManager',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GeneralBaseABI,
    'setRoyaltyManager'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"setTokenURIs"`.
 */
export function usePrepareErc721GeneralBaseSetTokenUrIs(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721GeneralBaseABI, 'setTokenURIs'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GeneralBaseABI,
    functionName: 'setTokenURIs',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GeneralBaseABI,
    'setTokenURIs'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721GeneralBaseTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721GeneralBaseABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GeneralBaseABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GeneralBaseABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareErc721GeneralBaseTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GeneralBaseABI,
      'transferOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GeneralBaseABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GeneralBaseABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `functionName` set to `"unregisterMinter"`.
 */
export function usePrepareErc721GeneralBaseUnregisterMinter(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GeneralBaseABI,
      'unregisterMinter'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GeneralBaseABI,
    functionName: 'unregisterMinter',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GeneralBaseABI,
    'unregisterMinter'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721GeneralBaseABI}__.
 */
export function useErc721GeneralBaseEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc721GeneralBaseABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721GeneralBaseABI,
    ...config,
  } as UseContractEventConfig<typeof erc721GeneralBaseABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721GeneralBaseApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721GeneralBaseABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721GeneralBaseABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc721GeneralBaseABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721GeneralBaseApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721GeneralBaseABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721GeneralBaseABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof erc721GeneralBaseABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `eventName` set to `"BaseURISet"`.
 */
export function useErc721GeneralBaseBaseUriSetEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721GeneralBaseABI, 'BaseURISet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721GeneralBaseABI,
    eventName: 'BaseURISet',
    ...config,
  } as UseContractEventConfig<typeof erc721GeneralBaseABI, 'BaseURISet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `eventName` set to `"DefaultRoyaltySet"`.
 */
export function useErc721GeneralBaseDefaultRoyaltySetEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721GeneralBaseABI, 'DefaultRoyaltySet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721GeneralBaseABI,
    eventName: 'DefaultRoyaltySet',
    ...config,
  } as UseContractEventConfig<typeof erc721GeneralBaseABI, 'DefaultRoyaltySet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `eventName` set to `"DefaultTokenManagerChanged"`.
 */
export function useErc721GeneralBaseDefaultTokenManagerChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof erc721GeneralBaseABI,
      'DefaultTokenManagerChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721GeneralBaseABI,
    eventName: 'DefaultTokenManagerChanged',
    ...config,
  } as UseContractEventConfig<
    typeof erc721GeneralBaseABI,
    'DefaultTokenManagerChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `eventName` set to `"GranularRoyaltiesSet"`.
 */
export function useErc721GeneralBaseGranularRoyaltiesSetEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721GeneralBaseABI, 'GranularRoyaltiesSet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721GeneralBaseABI,
    eventName: 'GranularRoyaltiesSet',
    ...config,
  } as UseContractEventConfig<
    typeof erc721GeneralBaseABI,
    'GranularRoyaltiesSet'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `eventName` set to `"GranularTokenManagersRemoved"`.
 */
export function useErc721GeneralBaseGranularTokenManagersRemovedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof erc721GeneralBaseABI,
      'GranularTokenManagersRemoved'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721GeneralBaseABI,
    eventName: 'GranularTokenManagersRemoved',
    ...config,
  } as UseContractEventConfig<
    typeof erc721GeneralBaseABI,
    'GranularTokenManagersRemoved'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `eventName` set to `"GranularTokenManagersSet"`.
 */
export function useErc721GeneralBaseGranularTokenManagersSetEvent(
  config: Omit<
    UseContractEventConfig<
      typeof erc721GeneralBaseABI,
      'GranularTokenManagersSet'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721GeneralBaseABI,
    eventName: 'GranularTokenManagersSet',
    ...config,
  } as UseContractEventConfig<
    typeof erc721GeneralBaseABI,
    'GranularTokenManagersSet'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc721GeneralBaseInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721GeneralBaseABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721GeneralBaseABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof erc721GeneralBaseABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `eventName` set to `"LimitSupplySet"`.
 */
export function useErc721GeneralBaseLimitSupplySetEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721GeneralBaseABI, 'LimitSupplySet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721GeneralBaseABI,
    eventName: 'LimitSupplySet',
    ...config,
  } as UseContractEventConfig<typeof erc721GeneralBaseABI, 'LimitSupplySet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `eventName` set to `"MinterRegistrationChanged"`.
 */
export function useErc721GeneralBaseMinterRegistrationChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof erc721GeneralBaseABI,
      'MinterRegistrationChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721GeneralBaseABI,
    eventName: 'MinterRegistrationChanged',
    ...config,
  } as UseContractEventConfig<
    typeof erc721GeneralBaseABI,
    'MinterRegistrationChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `eventName` set to `"MintsFrozen"`.
 */
export function useErc721GeneralBaseMintsFrozenEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721GeneralBaseABI, 'MintsFrozen'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721GeneralBaseABI,
    eventName: 'MintsFrozen',
    ...config,
  } as UseContractEventConfig<typeof erc721GeneralBaseABI, 'MintsFrozen'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useErc721GeneralBaseOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721GeneralBaseABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721GeneralBaseABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<
    typeof erc721GeneralBaseABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `eventName` set to `"RoyaltyManagerChanged"`.
 */
export function useErc721GeneralBaseRoyaltyManagerChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof erc721GeneralBaseABI,
      'RoyaltyManagerChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721GeneralBaseABI,
    eventName: 'RoyaltyManagerChanged',
    ...config,
  } as UseContractEventConfig<
    typeof erc721GeneralBaseABI,
    'RoyaltyManagerChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `eventName` set to `"TokenURIsSet"`.
 */
export function useErc721GeneralBaseTokenUrIsSetEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721GeneralBaseABI, 'TokenURIsSet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721GeneralBaseABI,
    eventName: 'TokenURIsSet',
    ...config,
  } as UseContractEventConfig<typeof erc721GeneralBaseABI, 'TokenURIsSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721GeneralBaseABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721GeneralBaseTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721GeneralBaseABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721GeneralBaseABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc721GeneralBaseABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__.
 */
export function useErc721UriStorageUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof erc721UriStorageUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UriStorageUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UriStorageUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof erc721UriStorageUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721UriStorageUpgradeableBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<
    typeof erc721UriStorageUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UriStorageUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof erc721UriStorageUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"baseURI"`.
 */
export function useErc721UriStorageUpgradeableBaseUri<
  TFunctionName extends 'baseURI',
  TSelectData = ReadContractResult<
    typeof erc721UriStorageUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UriStorageUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'baseURI',
    ...config,
  } as UseContractReadConfig<
    typeof erc721UriStorageUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721UriStorageUpgradeableGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<
    typeof erc721UriStorageUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UriStorageUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof erc721UriStorageUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721UriStorageUpgradeableIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<
    typeof erc721UriStorageUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UriStorageUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof erc721UriStorageUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"name"`.
 */
export function useErc721UriStorageUpgradeableName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<
    typeof erc721UriStorageUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UriStorageUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof erc721UriStorageUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721UriStorageUpgradeableOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<
    typeof erc721UriStorageUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UriStorageUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<
    typeof erc721UriStorageUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc721UriStorageUpgradeableSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<
    typeof erc721UriStorageUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UriStorageUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof erc721UriStorageUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721UriStorageUpgradeableSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<
    typeof erc721UriStorageUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UriStorageUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof erc721UriStorageUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721UriStorageUpgradeableTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<
    typeof erc721UriStorageUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UriStorageUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<
    typeof erc721UriStorageUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc721UriStorageUpgradeableTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<
    typeof erc721UriStorageUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721UriStorageUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof erc721UriStorageUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__.
 */
export function useErc721UriStorageUpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721UriStorageUpgradeableABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof erc721UriStorageUpgradeableABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721UriStorageUpgradeableABI,
    TFunctionName,
    TMode
  >({ abi: erc721UriStorageUpgradeableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721UriStorageUpgradeableApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721UriStorageUpgradeableABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<
        typeof erc721UriStorageUpgradeableABI,
        'approve',
        TMode
      > & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721UriStorageUpgradeableABI,
    'approve',
    TMode
  >({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721UriStorageUpgradeableSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721UriStorageUpgradeableABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        typeof erc721UriStorageUpgradeableABI,
        'safeTransferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721UriStorageUpgradeableABI,
    'safeTransferFrom',
    TMode
  >({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721UriStorageUpgradeableSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721UriStorageUpgradeableABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        typeof erc721UriStorageUpgradeableABI,
        'setApprovalForAll',
        TMode
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721UriStorageUpgradeableABI,
    'setApprovalForAll',
    TMode
  >({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721UriStorageUpgradeableTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721UriStorageUpgradeableABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        typeof erc721UriStorageUpgradeableABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721UriStorageUpgradeableABI,
    'transferFrom',
    TMode
  >({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__.
 */
export function usePrepareErc721UriStorageUpgradeableWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721UriStorageUpgradeableABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721UriStorageUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721UriStorageUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721UriStorageUpgradeableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721UriStorageUpgradeableABI,
      'approve'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721UriStorageUpgradeableABI,
    'approve'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721UriStorageUpgradeableSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721UriStorageUpgradeableABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721UriStorageUpgradeableABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721UriStorageUpgradeableSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721UriStorageUpgradeableABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721UriStorageUpgradeableABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721UriStorageUpgradeableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721UriStorageUpgradeableABI,
      'transferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721UriStorageUpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721UriStorageUpgradeableABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__.
 */
export function useErc721UriStorageUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc721UriStorageUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721UriStorageUpgradeableABI,
    ...config,
  } as UseContractEventConfig<
    typeof erc721UriStorageUpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721UriStorageUpgradeableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721UriStorageUpgradeableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721UriStorageUpgradeableABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<
    typeof erc721UriStorageUpgradeableABI,
    'Approval'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721UriStorageUpgradeableApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<
      typeof erc721UriStorageUpgradeableABI,
      'ApprovalForAll'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721UriStorageUpgradeableABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<
    typeof erc721UriStorageUpgradeableABI,
    'ApprovalForAll'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `eventName` set to `"BaseURISet"`.
 */
export function useErc721UriStorageUpgradeableBaseUriSetEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721UriStorageUpgradeableABI, 'BaseURISet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721UriStorageUpgradeableABI,
    eventName: 'BaseURISet',
    ...config,
  } as UseContractEventConfig<
    typeof erc721UriStorageUpgradeableABI,
    'BaseURISet'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc721UriStorageUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof erc721UriStorageUpgradeableABI,
      'Initialized'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721UriStorageUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<
    typeof erc721UriStorageUpgradeableABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721UriStorageUpgradeableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721UriStorageUpgradeableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721UriStorageUpgradeableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721UriStorageUpgradeableABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<
    typeof erc721UriStorageUpgradeableABI,
    'Transfer'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gsnEip712LibraryABI}__.
 */
export function useGsnEip712LibraryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof gsnEip712LibraryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof gsnEip712LibraryABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: gsnEip712LibraryABI,
    ...config,
  } as UseContractReadConfig<
    typeof gsnEip712LibraryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gsnEip712LibraryABI}__ and `functionName` set to `"EIP712DOMAIN_TYPEHASH"`.
 */
export function useGsnEip712LibraryEip712DomainTypehash<
  TFunctionName extends 'EIP712DOMAIN_TYPEHASH',
  TSelectData = ReadContractResult<typeof gsnEip712LibraryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof gsnEip712LibraryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: gsnEip712LibraryABI,
    functionName: 'EIP712DOMAIN_TYPEHASH',
    ...config,
  } as UseContractReadConfig<
    typeof gsnEip712LibraryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gsnEip712LibraryABI}__ and `functionName` set to `"GENERIC_PARAMS"`.
 */
export function useGsnEip712LibraryGenericParams<
  TFunctionName extends 'GENERIC_PARAMS',
  TSelectData = ReadContractResult<typeof gsnEip712LibraryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof gsnEip712LibraryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: gsnEip712LibraryABI,
    functionName: 'GENERIC_PARAMS',
    ...config,
  } as UseContractReadConfig<
    typeof gsnEip712LibraryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gsnEip712LibraryABI}__ and `functionName` set to `"RELAYDATA_TYPE"`.
 */
export function useGsnEip712LibraryRelaydataType<
  TFunctionName extends 'RELAYDATA_TYPE',
  TSelectData = ReadContractResult<typeof gsnEip712LibraryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof gsnEip712LibraryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: gsnEip712LibraryABI,
    functionName: 'RELAYDATA_TYPE',
    ...config,
  } as UseContractReadConfig<
    typeof gsnEip712LibraryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gsnEip712LibraryABI}__ and `functionName` set to `"RELAYDATA_TYPEHASH"`.
 */
export function useGsnEip712LibraryRelaydataTypehash<
  TFunctionName extends 'RELAYDATA_TYPEHASH',
  TSelectData = ReadContractResult<typeof gsnEip712LibraryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof gsnEip712LibraryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: gsnEip712LibraryABI,
    functionName: 'RELAYDATA_TYPEHASH',
    ...config,
  } as UseContractReadConfig<
    typeof gsnEip712LibraryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gsnEip712LibraryABI}__ and `functionName` set to `"RELAY_REQUEST_NAME"`.
 */
export function useGsnEip712LibraryRelayRequestName<
  TFunctionName extends 'RELAY_REQUEST_NAME',
  TSelectData = ReadContractResult<typeof gsnEip712LibraryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof gsnEip712LibraryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: gsnEip712LibraryABI,
    functionName: 'RELAY_REQUEST_NAME',
    ...config,
  } as UseContractReadConfig<
    typeof gsnEip712LibraryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gsnEip712LibraryABI}__ and `functionName` set to `"RELAY_REQUEST_SUFFIX"`.
 */
export function useGsnEip712LibraryRelayRequestSuffix<
  TFunctionName extends 'RELAY_REQUEST_SUFFIX',
  TSelectData = ReadContractResult<typeof gsnEip712LibraryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof gsnEip712LibraryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: gsnEip712LibraryABI,
    functionName: 'RELAY_REQUEST_SUFFIX',
    ...config,
  } as UseContractReadConfig<
    typeof gsnEip712LibraryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gsnEip712LibraryABI}__ and `functionName` set to `"RELAY_REQUEST_TYPE"`.
 */
export function useGsnEip712LibraryRelayRequestType<
  TFunctionName extends 'RELAY_REQUEST_TYPE',
  TSelectData = ReadContractResult<typeof gsnEip712LibraryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof gsnEip712LibraryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: gsnEip712LibraryABI,
    functionName: 'RELAY_REQUEST_TYPE',
    ...config,
  } as UseContractReadConfig<
    typeof gsnEip712LibraryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gsnEip712LibraryABI}__ and `functionName` set to `"RELAY_REQUEST_TYPEHASH"`.
 */
export function useGsnEip712LibraryRelayRequestTypehash<
  TFunctionName extends 'RELAY_REQUEST_TYPEHASH',
  TSelectData = ReadContractResult<typeof gsnEip712LibraryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof gsnEip712LibraryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: gsnEip712LibraryABI,
    functionName: 'RELAY_REQUEST_TYPEHASH',
    ...config,
  } as UseContractReadConfig<
    typeof gsnEip712LibraryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GenerativeABI}__.
 */
export function useErc721GenerativeRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc721GenerativeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GenerativeABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GenerativeABI,
    ...config,
  } as UseContractReadConfig<
    typeof erc721GenerativeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"DEFAULT_SUBSCRIPTION"`.
 */
export function useErc721GenerativeDefaultSubscription<
  TFunctionName extends 'DEFAULT_SUBSCRIPTION',
  TSelectData = ReadContractResult<typeof erc721GenerativeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GenerativeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GenerativeABI,
    functionName: 'DEFAULT_SUBSCRIPTION',
    ...config,
  } as UseContractReadConfig<
    typeof erc721GenerativeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"MARKETPLACE_FILTERER_REGISTRY"`.
 */
export function useErc721GenerativeMarketplaceFiltererRegistry<
  TFunctionName extends 'MARKETPLACE_FILTERER_REGISTRY',
  TSelectData = ReadContractResult<typeof erc721GenerativeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GenerativeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GenerativeABI,
    functionName: 'MARKETPLACE_FILTERER_REGISTRY',
    ...config,
  } as UseContractReadConfig<
    typeof erc721GenerativeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc721GenerativeBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof erc721GenerativeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GenerativeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GenerativeABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof erc721GenerativeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"baseURI"`.
 */
export function useErc721GenerativeBaseUri<
  TFunctionName extends 'baseURI',
  TSelectData = ReadContractResult<typeof erc721GenerativeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GenerativeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GenerativeABI,
    functionName: 'baseURI',
    ...config,
  } as UseContractReadConfig<
    typeof erc721GenerativeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"contractURI"`.
 */
export function useErc721GenerativeContractUri<
  TFunctionName extends 'contractURI',
  TSelectData = ReadContractResult<typeof erc721GenerativeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GenerativeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GenerativeABI,
    functionName: 'contractURI',
    ...config,
  } as UseContractReadConfig<
    typeof erc721GenerativeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"defaultManager"`.
 */
export function useErc721GenerativeDefaultManager<
  TFunctionName extends 'defaultManager',
  TSelectData = ReadContractResult<typeof erc721GenerativeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GenerativeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GenerativeABI,
    functionName: 'defaultManager',
    ...config,
  } as UseContractReadConfig<
    typeof erc721GenerativeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"generativeCodeUri"`.
 */
export function useErc721GenerativeGenerativeCodeUri<
  TFunctionName extends 'generativeCodeUri',
  TSelectData = ReadContractResult<typeof erc721GenerativeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GenerativeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GenerativeABI,
    functionName: 'generativeCodeUri',
    ...config,
  } as UseContractReadConfig<
    typeof erc721GenerativeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"getApproved"`.
 */
export function useErc721GenerativeGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof erc721GenerativeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GenerativeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GenerativeABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof erc721GenerativeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc721GenerativeIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof erc721GenerativeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GenerativeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GenerativeABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof erc721GenerativeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"isTrustedForwarder"`.
 */
export function useErc721GenerativeIsTrustedForwarder<
  TFunctionName extends 'isTrustedForwarder',
  TSelectData = ReadContractResult<typeof erc721GenerativeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GenerativeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GenerativeABI,
    functionName: 'isTrustedForwarder',
    ...config,
  } as UseContractReadConfig<
    typeof erc721GenerativeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"limitSupply"`.
 */
export function useErc721GenerativeLimitSupply<
  TFunctionName extends 'limitSupply',
  TSelectData = ReadContractResult<typeof erc721GenerativeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GenerativeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GenerativeABI,
    functionName: 'limitSupply',
    ...config,
  } as UseContractReadConfig<
    typeof erc721GenerativeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"minters"`.
 */
export function useErc721GenerativeMinters<
  TFunctionName extends 'minters',
  TSelectData = ReadContractResult<typeof erc721GenerativeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GenerativeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GenerativeABI,
    functionName: 'minters',
    ...config,
  } as UseContractReadConfig<
    typeof erc721GenerativeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"name"`.
 */
export function useErc721GenerativeName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof erc721GenerativeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GenerativeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GenerativeABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof erc721GenerativeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"observability"`.
 */
export function useErc721GenerativeObservability<
  TFunctionName extends 'observability',
  TSelectData = ReadContractResult<typeof erc721GenerativeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GenerativeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GenerativeABI,
    functionName: 'observability',
    ...config,
  } as UseContractReadConfig<
    typeof erc721GenerativeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"operatorFiltererRegistry"`.
 */
export function useErc721GenerativeOperatorFiltererRegistry<
  TFunctionName extends 'operatorFiltererRegistry',
  TSelectData = ReadContractResult<typeof erc721GenerativeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GenerativeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GenerativeABI,
    functionName: 'operatorFiltererRegistry',
    ...config,
  } as UseContractReadConfig<
    typeof erc721GenerativeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"owner"`.
 */
export function useErc721GenerativeOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof erc721GenerativeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GenerativeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GenerativeABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof erc721GenerativeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useErc721GenerativeOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof erc721GenerativeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GenerativeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GenerativeABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<
    typeof erc721GenerativeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"royaltyInfo"`.
 */
export function useErc721GenerativeRoyaltyInfo<
  TFunctionName extends 'royaltyInfo',
  TSelectData = ReadContractResult<typeof erc721GenerativeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GenerativeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GenerativeABI,
    functionName: 'royaltyInfo',
    ...config,
  } as UseContractReadConfig<
    typeof erc721GenerativeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"royaltyManager"`.
 */
export function useErc721GenerativeRoyaltyManager<
  TFunctionName extends 'royaltyManager',
  TSelectData = ReadContractResult<typeof erc721GenerativeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GenerativeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GenerativeABI,
    functionName: 'royaltyManager',
    ...config,
  } as UseContractReadConfig<
    typeof erc721GenerativeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc721GenerativeSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof erc721GenerativeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GenerativeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GenerativeABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof erc721GenerativeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc721GenerativeSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof erc721GenerativeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GenerativeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GenerativeABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof erc721GenerativeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"tokenManager"`.
 */
export function useErc721GenerativeTokenManager<
  TFunctionName extends 'tokenManager',
  TSelectData = ReadContractResult<typeof erc721GenerativeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GenerativeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GenerativeABI,
    functionName: 'tokenManager',
    ...config,
  } as UseContractReadConfig<
    typeof erc721GenerativeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useErc721GenerativeTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<typeof erc721GenerativeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GenerativeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GenerativeABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<
    typeof erc721GenerativeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc721GenerativeTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof erc721GenerativeABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof erc721GenerativeABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc721GenerativeABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof erc721GenerativeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__.
 */
export function useErc721GenerativeWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GenerativeABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof erc721GenerativeABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof erc721GenerativeABI, TFunctionName, TMode>({
    abi: erc721GenerativeABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"approve"`.
 */
export function useErc721GenerativeApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GenerativeABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof erc721GenerativeABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof erc721GenerativeABI, 'approve', TMode>({
    abi: erc721GenerativeABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"burn"`.
 */
export function useErc721GenerativeBurn<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GenerativeABI,
          'burn'
        >['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<typeof erc721GenerativeABI, 'burn', TMode> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<typeof erc721GenerativeABI, 'burn', TMode>({
    abi: erc721GenerativeABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"freezeMints"`.
 */
export function useErc721GenerativeFreezeMints<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GenerativeABI,
          'freezeMints'
        >['request']['abi'],
        'freezeMints',
        TMode
      > & { functionName?: 'freezeMints' }
    : UseContractWriteConfig<
        typeof erc721GenerativeABI,
        'freezeMints',
        TMode
      > & {
        abi?: never
        functionName?: 'freezeMints'
      } = {} as any,
) {
  return useContractWrite<typeof erc721GenerativeABI, 'freezeMints', TMode>({
    abi: erc721GenerativeABI,
    functionName: 'freezeMints',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"initialize"`.
 */
export function useErc721GenerativeInitialize<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GenerativeABI,
          'initialize'
        >['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<
        typeof erc721GenerativeABI,
        'initialize',
        TMode
      > & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<typeof erc721GenerativeABI, 'initialize', TMode>({
    abi: erc721GenerativeABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"mintAmountToOneRecipient"`.
 */
export function useErc721GenerativeMintAmountToOneRecipient<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GenerativeABI,
          'mintAmountToOneRecipient'
        >['request']['abi'],
        'mintAmountToOneRecipient',
        TMode
      > & { functionName?: 'mintAmountToOneRecipient' }
    : UseContractWriteConfig<
        typeof erc721GenerativeABI,
        'mintAmountToOneRecipient',
        TMode
      > & {
        abi?: never
        functionName?: 'mintAmountToOneRecipient'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721GenerativeABI,
    'mintAmountToOneRecipient',
    TMode
  >({
    abi: erc721GenerativeABI,
    functionName: 'mintAmountToOneRecipient',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"mintOneToMultipleRecipients"`.
 */
export function useErc721GenerativeMintOneToMultipleRecipients<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GenerativeABI,
          'mintOneToMultipleRecipients'
        >['request']['abi'],
        'mintOneToMultipleRecipients',
        TMode
      > & { functionName?: 'mintOneToMultipleRecipients' }
    : UseContractWriteConfig<
        typeof erc721GenerativeABI,
        'mintOneToMultipleRecipients',
        TMode
      > & {
        abi?: never
        functionName?: 'mintOneToMultipleRecipients'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721GenerativeABI,
    'mintOneToMultipleRecipients',
    TMode
  >({
    abi: erc721GenerativeABI,
    functionName: 'mintOneToMultipleRecipients',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"mintOneToOneRecipient"`.
 */
export function useErc721GenerativeMintOneToOneRecipient<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GenerativeABI,
          'mintOneToOneRecipient'
        >['request']['abi'],
        'mintOneToOneRecipient',
        TMode
      > & { functionName?: 'mintOneToOneRecipient' }
    : UseContractWriteConfig<
        typeof erc721GenerativeABI,
        'mintOneToOneRecipient',
        TMode
      > & {
        abi?: never
        functionName?: 'mintOneToOneRecipient'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721GenerativeABI,
    'mintOneToOneRecipient',
    TMode
  >({
    abi: erc721GenerativeABI,
    functionName: 'mintOneToOneRecipient',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"mintSameAmountToMultipleRecipients"`.
 */
export function useErc721GenerativeMintSameAmountToMultipleRecipients<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GenerativeABI,
          'mintSameAmountToMultipleRecipients'
        >['request']['abi'],
        'mintSameAmountToMultipleRecipients',
        TMode
      > & { functionName?: 'mintSameAmountToMultipleRecipients' }
    : UseContractWriteConfig<
        typeof erc721GenerativeABI,
        'mintSameAmountToMultipleRecipients',
        TMode
      > & {
        abi?: never
        functionName?: 'mintSameAmountToMultipleRecipients'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721GenerativeABI,
    'mintSameAmountToMultipleRecipients',
    TMode
  >({
    abi: erc721GenerativeABI,
    functionName: 'mintSameAmountToMultipleRecipients',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"mintSpecificTokenToOneRecipient"`.
 */
export function useErc721GenerativeMintSpecificTokenToOneRecipient<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GenerativeABI,
          'mintSpecificTokenToOneRecipient'
        >['request']['abi'],
        'mintSpecificTokenToOneRecipient',
        TMode
      > & { functionName?: 'mintSpecificTokenToOneRecipient' }
    : UseContractWriteConfig<
        typeof erc721GenerativeABI,
        'mintSpecificTokenToOneRecipient',
        TMode
      > & {
        abi?: never
        functionName?: 'mintSpecificTokenToOneRecipient'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721GenerativeABI,
    'mintSpecificTokenToOneRecipient',
    TMode
  >({
    abi: erc721GenerativeABI,
    functionName: 'mintSpecificTokenToOneRecipient',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"mintSpecificTokensToOneRecipient"`.
 */
export function useErc721GenerativeMintSpecificTokensToOneRecipient<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GenerativeABI,
          'mintSpecificTokensToOneRecipient'
        >['request']['abi'],
        'mintSpecificTokensToOneRecipient',
        TMode
      > & { functionName?: 'mintSpecificTokensToOneRecipient' }
    : UseContractWriteConfig<
        typeof erc721GenerativeABI,
        'mintSpecificTokensToOneRecipient',
        TMode
      > & {
        abi?: never
        functionName?: 'mintSpecificTokensToOneRecipient'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721GenerativeABI,
    'mintSpecificTokensToOneRecipient',
    TMode
  >({
    abi: erc721GenerativeABI,
    functionName: 'mintSpecificTokensToOneRecipient',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"registerMinter"`.
 */
export function useErc721GenerativeRegisterMinter<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GenerativeABI,
          'registerMinter'
        >['request']['abi'],
        'registerMinter',
        TMode
      > & { functionName?: 'registerMinter' }
    : UseContractWriteConfig<
        typeof erc721GenerativeABI,
        'registerMinter',
        TMode
      > & {
        abi?: never
        functionName?: 'registerMinter'
      } = {} as any,
) {
  return useContractWrite<typeof erc721GenerativeABI, 'registerMinter', TMode>({
    abi: erc721GenerativeABI,
    functionName: 'registerMinter',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"removeDefaultTokenManager"`.
 */
export function useErc721GenerativeRemoveDefaultTokenManager<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GenerativeABI,
          'removeDefaultTokenManager'
        >['request']['abi'],
        'removeDefaultTokenManager',
        TMode
      > & { functionName?: 'removeDefaultTokenManager' }
    : UseContractWriteConfig<
        typeof erc721GenerativeABI,
        'removeDefaultTokenManager',
        TMode
      > & {
        abi?: never
        functionName?: 'removeDefaultTokenManager'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721GenerativeABI,
    'removeDefaultTokenManager',
    TMode
  >({
    abi: erc721GenerativeABI,
    functionName: 'removeDefaultTokenManager',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"removeGranularTokenManagers"`.
 */
export function useErc721GenerativeRemoveGranularTokenManagers<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GenerativeABI,
          'removeGranularTokenManagers'
        >['request']['abi'],
        'removeGranularTokenManagers',
        TMode
      > & { functionName?: 'removeGranularTokenManagers' }
    : UseContractWriteConfig<
        typeof erc721GenerativeABI,
        'removeGranularTokenManagers',
        TMode
      > & {
        abi?: never
        functionName?: 'removeGranularTokenManagers'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721GenerativeABI,
    'removeGranularTokenManagers',
    TMode
  >({
    abi: erc721GenerativeABI,
    functionName: 'removeGranularTokenManagers',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"removeMarketplaceFiltererRegistryAndUnregister"`.
 */
export function useErc721GenerativeRemoveMarketplaceFiltererRegistryAndUnregister<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GenerativeABI,
          'removeMarketplaceFiltererRegistryAndUnregister'
        >['request']['abi'],
        'removeMarketplaceFiltererRegistryAndUnregister',
        TMode
      > & { functionName?: 'removeMarketplaceFiltererRegistryAndUnregister' }
    : UseContractWriteConfig<
        typeof erc721GenerativeABI,
        'removeMarketplaceFiltererRegistryAndUnregister',
        TMode
      > & {
        abi?: never
        functionName?: 'removeMarketplaceFiltererRegistryAndUnregister'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721GenerativeABI,
    'removeMarketplaceFiltererRegistryAndUnregister',
    TMode
  >({
    abi: erc721GenerativeABI,
    functionName: 'removeMarketplaceFiltererRegistryAndUnregister',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"removeRoyaltyManager"`.
 */
export function useErc721GenerativeRemoveRoyaltyManager<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GenerativeABI,
          'removeRoyaltyManager'
        >['request']['abi'],
        'removeRoyaltyManager',
        TMode
      > & { functionName?: 'removeRoyaltyManager' }
    : UseContractWriteConfig<
        typeof erc721GenerativeABI,
        'removeRoyaltyManager',
        TMode
      > & {
        abi?: never
        functionName?: 'removeRoyaltyManager'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721GenerativeABI,
    'removeRoyaltyManager',
    TMode
  >({
    abi: erc721GenerativeABI,
    functionName: 'removeRoyaltyManager',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useErc721GenerativeRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GenerativeABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        typeof erc721GenerativeABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721GenerativeABI,
    'renounceOwnership',
    TMode
  >({
    abi: erc721GenerativeABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc721GenerativeSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GenerativeABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        typeof erc721GenerativeABI,
        'safeTransferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721GenerativeABI,
    'safeTransferFrom',
    TMode
  >({
    abi: erc721GenerativeABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc721GenerativeSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GenerativeABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        typeof erc721GenerativeABI,
        'setApprovalForAll',
        TMode
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721GenerativeABI,
    'setApprovalForAll',
    TMode
  >({
    abi: erc721GenerativeABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"setBaseURI"`.
 */
export function useErc721GenerativeSetBaseUri<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GenerativeABI,
          'setBaseURI'
        >['request']['abi'],
        'setBaseURI',
        TMode
      > & { functionName?: 'setBaseURI' }
    : UseContractWriteConfig<
        typeof erc721GenerativeABI,
        'setBaseURI',
        TMode
      > & {
        abi?: never
        functionName?: 'setBaseURI'
      } = {} as any,
) {
  return useContractWrite<typeof erc721GenerativeABI, 'setBaseURI', TMode>({
    abi: erc721GenerativeABI,
    functionName: 'setBaseURI',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"setContractMetadata"`.
 */
export function useErc721GenerativeSetContractMetadata<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GenerativeABI,
          'setContractMetadata'
        >['request']['abi'],
        'setContractMetadata',
        TMode
      > & { functionName?: 'setContractMetadata' }
    : UseContractWriteConfig<
        typeof erc721GenerativeABI,
        'setContractMetadata',
        TMode
      > & {
        abi?: never
        functionName?: 'setContractMetadata'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721GenerativeABI,
    'setContractMetadata',
    TMode
  >({
    abi: erc721GenerativeABI,
    functionName: 'setContractMetadata',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription"`.
 */
export function useErc721GenerativeSetCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GenerativeABI,
          'setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription'
        >['request']['abi'],
        'setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
        TMode
      > & {
        functionName?: 'setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription'
      }
    : UseContractWriteConfig<
        typeof erc721GenerativeABI,
        'setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
        TMode
      > & {
        abi?: never
        functionName?: 'setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721GenerativeABI,
    'setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
    TMode
  >({
    abi: erc721GenerativeABI,
    functionName:
      'setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"setDefaultRoyalty"`.
 */
export function useErc721GenerativeSetDefaultRoyalty<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GenerativeABI,
          'setDefaultRoyalty'
        >['request']['abi'],
        'setDefaultRoyalty',
        TMode
      > & { functionName?: 'setDefaultRoyalty' }
    : UseContractWriteConfig<
        typeof erc721GenerativeABI,
        'setDefaultRoyalty',
        TMode
      > & {
        abi?: never
        functionName?: 'setDefaultRoyalty'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721GenerativeABI,
    'setDefaultRoyalty',
    TMode
  >({
    abi: erc721GenerativeABI,
    functionName: 'setDefaultRoyalty',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"setDefaultTokenManager"`.
 */
export function useErc721GenerativeSetDefaultTokenManager<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GenerativeABI,
          'setDefaultTokenManager'
        >['request']['abi'],
        'setDefaultTokenManager',
        TMode
      > & { functionName?: 'setDefaultTokenManager' }
    : UseContractWriteConfig<
        typeof erc721GenerativeABI,
        'setDefaultTokenManager',
        TMode
      > & {
        abi?: never
        functionName?: 'setDefaultTokenManager'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721GenerativeABI,
    'setDefaultTokenManager',
    TMode
  >({
    abi: erc721GenerativeABI,
    functionName: 'setDefaultTokenManager',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"setGranularRoyalties"`.
 */
export function useErc721GenerativeSetGranularRoyalties<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GenerativeABI,
          'setGranularRoyalties'
        >['request']['abi'],
        'setGranularRoyalties',
        TMode
      > & { functionName?: 'setGranularRoyalties' }
    : UseContractWriteConfig<
        typeof erc721GenerativeABI,
        'setGranularRoyalties',
        TMode
      > & {
        abi?: never
        functionName?: 'setGranularRoyalties'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721GenerativeABI,
    'setGranularRoyalties',
    TMode
  >({
    abi: erc721GenerativeABI,
    functionName: 'setGranularRoyalties',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"setGranularTokenManagers"`.
 */
export function useErc721GenerativeSetGranularTokenManagers<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GenerativeABI,
          'setGranularTokenManagers'
        >['request']['abi'],
        'setGranularTokenManagers',
        TMode
      > & { functionName?: 'setGranularTokenManagers' }
    : UseContractWriteConfig<
        typeof erc721GenerativeABI,
        'setGranularTokenManagers',
        TMode
      > & {
        abi?: never
        functionName?: 'setGranularTokenManagers'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721GenerativeABI,
    'setGranularTokenManagers',
    TMode
  >({
    abi: erc721GenerativeABI,
    functionName: 'setGranularTokenManagers',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"setLimitSupply"`.
 */
export function useErc721GenerativeSetLimitSupply<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GenerativeABI,
          'setLimitSupply'
        >['request']['abi'],
        'setLimitSupply',
        TMode
      > & { functionName?: 'setLimitSupply' }
    : UseContractWriteConfig<
        typeof erc721GenerativeABI,
        'setLimitSupply',
        TMode
      > & {
        abi?: never
        functionName?: 'setLimitSupply'
      } = {} as any,
) {
  return useContractWrite<typeof erc721GenerativeABI, 'setLimitSupply', TMode>({
    abi: erc721GenerativeABI,
    functionName: 'setLimitSupply',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"setMarketplaceFiltererRegistryAndRegisterDefaultSubscription"`.
 */
export function useErc721GenerativeSetMarketplaceFiltererRegistryAndRegisterDefaultSubscription<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GenerativeABI,
          'setMarketplaceFiltererRegistryAndRegisterDefaultSubscription'
        >['request']['abi'],
        'setMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
        TMode
      > & {
        functionName?: 'setMarketplaceFiltererRegistryAndRegisterDefaultSubscription'
      }
    : UseContractWriteConfig<
        typeof erc721GenerativeABI,
        'setMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
        TMode
      > & {
        abi?: never
        functionName?: 'setMarketplaceFiltererRegistryAndRegisterDefaultSubscription'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721GenerativeABI,
    'setMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
    TMode
  >({
    abi: erc721GenerativeABI,
    functionName:
      'setMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"setRoyaltyManager"`.
 */
export function useErc721GenerativeSetRoyaltyManager<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GenerativeABI,
          'setRoyaltyManager'
        >['request']['abi'],
        'setRoyaltyManager',
        TMode
      > & { functionName?: 'setRoyaltyManager' }
    : UseContractWriteConfig<
        typeof erc721GenerativeABI,
        'setRoyaltyManager',
        TMode
      > & {
        abi?: never
        functionName?: 'setRoyaltyManager'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721GenerativeABI,
    'setRoyaltyManager',
    TMode
  >({
    abi: erc721GenerativeABI,
    functionName: 'setRoyaltyManager',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"setTokenURIs"`.
 */
export function useErc721GenerativeSetTokenUrIs<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GenerativeABI,
          'setTokenURIs'
        >['request']['abi'],
        'setTokenURIs',
        TMode
      > & { functionName?: 'setTokenURIs' }
    : UseContractWriteConfig<
        typeof erc721GenerativeABI,
        'setTokenURIs',
        TMode
      > & {
        abi?: never
        functionName?: 'setTokenURIs'
      } = {} as any,
) {
  return useContractWrite<typeof erc721GenerativeABI, 'setTokenURIs', TMode>({
    abi: erc721GenerativeABI,
    functionName: 'setTokenURIs',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc721GenerativeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GenerativeABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        typeof erc721GenerativeABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof erc721GenerativeABI, 'transferFrom', TMode>({
    abi: erc721GenerativeABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useErc721GenerativeTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GenerativeABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        typeof erc721GenerativeABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721GenerativeABI,
    'transferOwnership',
    TMode
  >({
    abi: erc721GenerativeABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"unregisterMinter"`.
 */
export function useErc721GenerativeUnregisterMinter<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof erc721GenerativeABI,
          'unregisterMinter'
        >['request']['abi'],
        'unregisterMinter',
        TMode
      > & { functionName?: 'unregisterMinter' }
    : UseContractWriteConfig<
        typeof erc721GenerativeABI,
        'unregisterMinter',
        TMode
      > & {
        abi?: never
        functionName?: 'unregisterMinter'
      } = {} as any,
) {
  return useContractWrite<
    typeof erc721GenerativeABI,
    'unregisterMinter',
    TMode
  >({
    abi: erc721GenerativeABI,
    functionName: 'unregisterMinter',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__.
 */
export function usePrepareErc721GenerativeWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721GenerativeABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GenerativeABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721GenerativeABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc721GenerativeApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721GenerativeABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GenerativeABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721GenerativeABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareErc721GenerativeBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721GenerativeABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GenerativeABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721GenerativeABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"freezeMints"`.
 */
export function usePrepareErc721GenerativeFreezeMints(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721GenerativeABI, 'freezeMints'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GenerativeABI,
    functionName: 'freezeMints',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721GenerativeABI, 'freezeMints'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareErc721GenerativeInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721GenerativeABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GenerativeABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721GenerativeABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"mintAmountToOneRecipient"`.
 */
export function usePrepareErc721GenerativeMintAmountToOneRecipient(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GenerativeABI,
      'mintAmountToOneRecipient'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GenerativeABI,
    functionName: 'mintAmountToOneRecipient',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GenerativeABI,
    'mintAmountToOneRecipient'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"mintOneToMultipleRecipients"`.
 */
export function usePrepareErc721GenerativeMintOneToMultipleRecipients(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GenerativeABI,
      'mintOneToMultipleRecipients'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GenerativeABI,
    functionName: 'mintOneToMultipleRecipients',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GenerativeABI,
    'mintOneToMultipleRecipients'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"mintOneToOneRecipient"`.
 */
export function usePrepareErc721GenerativeMintOneToOneRecipient(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GenerativeABI,
      'mintOneToOneRecipient'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GenerativeABI,
    functionName: 'mintOneToOneRecipient',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GenerativeABI,
    'mintOneToOneRecipient'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"mintSameAmountToMultipleRecipients"`.
 */
export function usePrepareErc721GenerativeMintSameAmountToMultipleRecipients(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GenerativeABI,
      'mintSameAmountToMultipleRecipients'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GenerativeABI,
    functionName: 'mintSameAmountToMultipleRecipients',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GenerativeABI,
    'mintSameAmountToMultipleRecipients'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"mintSpecificTokenToOneRecipient"`.
 */
export function usePrepareErc721GenerativeMintSpecificTokenToOneRecipient(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GenerativeABI,
      'mintSpecificTokenToOneRecipient'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GenerativeABI,
    functionName: 'mintSpecificTokenToOneRecipient',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GenerativeABI,
    'mintSpecificTokenToOneRecipient'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"mintSpecificTokensToOneRecipient"`.
 */
export function usePrepareErc721GenerativeMintSpecificTokensToOneRecipient(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GenerativeABI,
      'mintSpecificTokensToOneRecipient'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GenerativeABI,
    functionName: 'mintSpecificTokensToOneRecipient',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GenerativeABI,
    'mintSpecificTokensToOneRecipient'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"registerMinter"`.
 */
export function usePrepareErc721GenerativeRegisterMinter(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721GenerativeABI, 'registerMinter'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GenerativeABI,
    functionName: 'registerMinter',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GenerativeABI,
    'registerMinter'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"removeDefaultTokenManager"`.
 */
export function usePrepareErc721GenerativeRemoveDefaultTokenManager(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GenerativeABI,
      'removeDefaultTokenManager'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GenerativeABI,
    functionName: 'removeDefaultTokenManager',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GenerativeABI,
    'removeDefaultTokenManager'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"removeGranularTokenManagers"`.
 */
export function usePrepareErc721GenerativeRemoveGranularTokenManagers(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GenerativeABI,
      'removeGranularTokenManagers'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GenerativeABI,
    functionName: 'removeGranularTokenManagers',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GenerativeABI,
    'removeGranularTokenManagers'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"removeMarketplaceFiltererRegistryAndUnregister"`.
 */
export function usePrepareErc721GenerativeRemoveMarketplaceFiltererRegistryAndUnregister(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GenerativeABI,
      'removeMarketplaceFiltererRegistryAndUnregister'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GenerativeABI,
    functionName: 'removeMarketplaceFiltererRegistryAndUnregister',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GenerativeABI,
    'removeMarketplaceFiltererRegistryAndUnregister'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"removeRoyaltyManager"`.
 */
export function usePrepareErc721GenerativeRemoveRoyaltyManager(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GenerativeABI,
      'removeRoyaltyManager'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GenerativeABI,
    functionName: 'removeRoyaltyManager',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GenerativeABI,
    'removeRoyaltyManager'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareErc721GenerativeRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GenerativeABI,
      'renounceOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GenerativeABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GenerativeABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc721GenerativeSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GenerativeABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GenerativeABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GenerativeABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc721GenerativeSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GenerativeABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GenerativeABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GenerativeABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"setBaseURI"`.
 */
export function usePrepareErc721GenerativeSetBaseUri(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721GenerativeABI, 'setBaseURI'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GenerativeABI,
    functionName: 'setBaseURI',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc721GenerativeABI, 'setBaseURI'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"setContractMetadata"`.
 */
export function usePrepareErc721GenerativeSetContractMetadata(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GenerativeABI,
      'setContractMetadata'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GenerativeABI,
    functionName: 'setContractMetadata',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GenerativeABI,
    'setContractMetadata'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription"`.
 */
export function usePrepareErc721GenerativeSetCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GenerativeABI,
      'setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GenerativeABI,
    functionName:
      'setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GenerativeABI,
    'setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"setDefaultRoyalty"`.
 */
export function usePrepareErc721GenerativeSetDefaultRoyalty(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GenerativeABI,
      'setDefaultRoyalty'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GenerativeABI,
    functionName: 'setDefaultRoyalty',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GenerativeABI,
    'setDefaultRoyalty'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"setDefaultTokenManager"`.
 */
export function usePrepareErc721GenerativeSetDefaultTokenManager(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GenerativeABI,
      'setDefaultTokenManager'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GenerativeABI,
    functionName: 'setDefaultTokenManager',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GenerativeABI,
    'setDefaultTokenManager'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"setGranularRoyalties"`.
 */
export function usePrepareErc721GenerativeSetGranularRoyalties(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GenerativeABI,
      'setGranularRoyalties'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GenerativeABI,
    functionName: 'setGranularRoyalties',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GenerativeABI,
    'setGranularRoyalties'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"setGranularTokenManagers"`.
 */
export function usePrepareErc721GenerativeSetGranularTokenManagers(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GenerativeABI,
      'setGranularTokenManagers'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GenerativeABI,
    functionName: 'setGranularTokenManagers',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GenerativeABI,
    'setGranularTokenManagers'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"setLimitSupply"`.
 */
export function usePrepareErc721GenerativeSetLimitSupply(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721GenerativeABI, 'setLimitSupply'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GenerativeABI,
    functionName: 'setLimitSupply',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GenerativeABI,
    'setLimitSupply'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"setMarketplaceFiltererRegistryAndRegisterDefaultSubscription"`.
 */
export function usePrepareErc721GenerativeSetMarketplaceFiltererRegistryAndRegisterDefaultSubscription(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GenerativeABI,
      'setMarketplaceFiltererRegistryAndRegisterDefaultSubscription'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GenerativeABI,
    functionName:
      'setMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GenerativeABI,
    'setMarketplaceFiltererRegistryAndRegisterDefaultSubscription'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"setRoyaltyManager"`.
 */
export function usePrepareErc721GenerativeSetRoyaltyManager(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GenerativeABI,
      'setRoyaltyManager'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GenerativeABI,
    functionName: 'setRoyaltyManager',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GenerativeABI,
    'setRoyaltyManager'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"setTokenURIs"`.
 */
export function usePrepareErc721GenerativeSetTokenUrIs(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721GenerativeABI, 'setTokenURIs'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GenerativeABI,
    functionName: 'setTokenURIs',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GenerativeABI,
    'setTokenURIs'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc721GenerativeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc721GenerativeABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GenerativeABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GenerativeABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareErc721GenerativeTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GenerativeABI,
      'transferOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GenerativeABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GenerativeABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc721GenerativeABI}__ and `functionName` set to `"unregisterMinter"`.
 */
export function usePrepareErc721GenerativeUnregisterMinter(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof erc721GenerativeABI,
      'unregisterMinter'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc721GenerativeABI,
    functionName: 'unregisterMinter',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof erc721GenerativeABI,
    'unregisterMinter'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721GenerativeABI}__.
 */
export function useErc721GenerativeEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc721GenerativeABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721GenerativeABI,
    ...config,
  } as UseContractEventConfig<typeof erc721GenerativeABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721GenerativeABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc721GenerativeApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721GenerativeABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721GenerativeABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc721GenerativeABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721GenerativeABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc721GenerativeApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721GenerativeABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721GenerativeABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof erc721GenerativeABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721GenerativeABI}__ and `eventName` set to `"BaseURISet"`.
 */
export function useErc721GenerativeBaseUriSetEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721GenerativeABI, 'BaseURISet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721GenerativeABI,
    eventName: 'BaseURISet',
    ...config,
  } as UseContractEventConfig<typeof erc721GenerativeABI, 'BaseURISet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721GenerativeABI}__ and `eventName` set to `"DefaultRoyaltySet"`.
 */
export function useErc721GenerativeDefaultRoyaltySetEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721GenerativeABI, 'DefaultRoyaltySet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721GenerativeABI,
    eventName: 'DefaultRoyaltySet',
    ...config,
  } as UseContractEventConfig<typeof erc721GenerativeABI, 'DefaultRoyaltySet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721GenerativeABI}__ and `eventName` set to `"DefaultTokenManagerChanged"`.
 */
export function useErc721GenerativeDefaultTokenManagerChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof erc721GenerativeABI,
      'DefaultTokenManagerChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721GenerativeABI,
    eventName: 'DefaultTokenManagerChanged',
    ...config,
  } as UseContractEventConfig<
    typeof erc721GenerativeABI,
    'DefaultTokenManagerChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721GenerativeABI}__ and `eventName` set to `"GranularRoyaltiesSet"`.
 */
export function useErc721GenerativeGranularRoyaltiesSetEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721GenerativeABI, 'GranularRoyaltiesSet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721GenerativeABI,
    eventName: 'GranularRoyaltiesSet',
    ...config,
  } as UseContractEventConfig<
    typeof erc721GenerativeABI,
    'GranularRoyaltiesSet'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721GenerativeABI}__ and `eventName` set to `"GranularTokenManagersRemoved"`.
 */
export function useErc721GenerativeGranularTokenManagersRemovedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof erc721GenerativeABI,
      'GranularTokenManagersRemoved'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721GenerativeABI,
    eventName: 'GranularTokenManagersRemoved',
    ...config,
  } as UseContractEventConfig<
    typeof erc721GenerativeABI,
    'GranularTokenManagersRemoved'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721GenerativeABI}__ and `eventName` set to `"GranularTokenManagersSet"`.
 */
export function useErc721GenerativeGranularTokenManagersSetEvent(
  config: Omit<
    UseContractEventConfig<
      typeof erc721GenerativeABI,
      'GranularTokenManagersSet'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721GenerativeABI,
    eventName: 'GranularTokenManagersSet',
    ...config,
  } as UseContractEventConfig<
    typeof erc721GenerativeABI,
    'GranularTokenManagersSet'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721GenerativeABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc721GenerativeInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721GenerativeABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721GenerativeABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof erc721GenerativeABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721GenerativeABI}__ and `eventName` set to `"LimitSupplySet"`.
 */
export function useErc721GenerativeLimitSupplySetEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721GenerativeABI, 'LimitSupplySet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721GenerativeABI,
    eventName: 'LimitSupplySet',
    ...config,
  } as UseContractEventConfig<typeof erc721GenerativeABI, 'LimitSupplySet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721GenerativeABI}__ and `eventName` set to `"MinterRegistrationChanged"`.
 */
export function useErc721GenerativeMinterRegistrationChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof erc721GenerativeABI,
      'MinterRegistrationChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721GenerativeABI,
    eventName: 'MinterRegistrationChanged',
    ...config,
  } as UseContractEventConfig<
    typeof erc721GenerativeABI,
    'MinterRegistrationChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721GenerativeABI}__ and `eventName` set to `"MintsFrozen"`.
 */
export function useErc721GenerativeMintsFrozenEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721GenerativeABI, 'MintsFrozen'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721GenerativeABI,
    eventName: 'MintsFrozen',
    ...config,
  } as UseContractEventConfig<typeof erc721GenerativeABI, 'MintsFrozen'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721GenerativeABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useErc721GenerativeOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721GenerativeABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721GenerativeABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<
    typeof erc721GenerativeABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721GenerativeABI}__ and `eventName` set to `"RoyaltyManagerChanged"`.
 */
export function useErc721GenerativeRoyaltyManagerChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721GenerativeABI, 'RoyaltyManagerChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721GenerativeABI,
    eventName: 'RoyaltyManagerChanged',
    ...config,
  } as UseContractEventConfig<
    typeof erc721GenerativeABI,
    'RoyaltyManagerChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721GenerativeABI}__ and `eventName` set to `"TokenURIsSet"`.
 */
export function useErc721GenerativeTokenUrIsSetEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721GenerativeABI, 'TokenURIsSet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721GenerativeABI,
    eventName: 'TokenURIsSet',
    ...config,
  } as UseContractEventConfig<typeof erc721GenerativeABI, 'TokenURIsSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc721GenerativeABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc721GenerativeTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc721GenerativeABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc721GenerativeABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc721GenerativeABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBeaconUpgradeableABI}__.
 */
export function useIBeaconUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iBeaconUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBeaconUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iBeaconUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof iBeaconUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBeaconUpgradeableABI}__ and `functionName` set to `"implementation"`.
 */
export function useIBeaconUpgradeableImplementation<
  TFunctionName extends 'implementation',
  TSelectData = ReadContractResult<typeof iBeaconUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iBeaconUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iBeaconUpgradeableABI,
    functionName: 'implementation',
    ...config,
  } as UseContractReadConfig<
    typeof iBeaconUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function useIAccessControlRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iAccessControlABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAccessControlABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlABI,
    ...config,
  } as UseContractReadConfig<
    typeof iAccessControlABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useIAccessControlGetRoleAdmin<
  TFunctionName extends 'getRoleAdmin',
  TSelectData = ReadContractResult<typeof iAccessControlABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAccessControlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<
    typeof iAccessControlABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"hasRole"`.
 */
export function useIAccessControlHasRole<
  TFunctionName extends 'hasRole',
  TSelectData = ReadContractResult<typeof iAccessControlABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iAccessControlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iAccessControlABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<
    typeof iAccessControlABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function useIAccessControlWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAccessControlABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iAccessControlABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iAccessControlABI, TFunctionName, TMode>({
    abi: iAccessControlABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"grantRole"`.
 */
export function useIAccessControlGrantRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAccessControlABI,
          'grantRole'
        >['request']['abi'],
        'grantRole',
        TMode
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<typeof iAccessControlABI, 'grantRole', TMode> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<typeof iAccessControlABI, 'grantRole', TMode>({
    abi: iAccessControlABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useIAccessControlRenounceRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAccessControlABI,
          'renounceRole'
        >['request']['abi'],
        'renounceRole',
        TMode
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<
        typeof iAccessControlABI,
        'renounceRole',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<typeof iAccessControlABI, 'renounceRole', TMode>({
    abi: iAccessControlABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useIAccessControlRevokeRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iAccessControlABI,
          'revokeRole'
        >['request']['abi'],
        'revokeRole',
        TMode
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<typeof iAccessControlABI, 'revokeRole', TMode> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<typeof iAccessControlABI, 'revokeRole', TMode>({
    abi: iAccessControlABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function usePrepareIAccessControlWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareIAccessControlGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareIAccessControlRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iAccessControlABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareIAccessControlRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iAccessControlABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iAccessControlABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iAccessControlABI, 'revokeRole'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__.
 */
export function useIAccessControlEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlABI,
    ...config,
  } as UseContractEventConfig<typeof iAccessControlABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useIAccessControlRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlABI, 'RoleAdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlABI,
    eventName: 'RoleAdminChanged',
    ...config,
  } as UseContractEventConfig<typeof iAccessControlABI, 'RoleAdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useIAccessControlRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlABI, 'RoleGranted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlABI,
    eventName: 'RoleGranted',
    ...config,
  } as UseContractEventConfig<typeof iAccessControlABI, 'RoleGranted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iAccessControlABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useIAccessControlRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof iAccessControlABI, 'RoleRevoked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iAccessControlABI,
    eventName: 'RoleRevoked',
    ...config,
  } as UseContractEventConfig<typeof iAccessControlABI, 'RoleRevoked'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ieasABI}__.
 */
export function useIeasRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ieasABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ieasABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: ieasABI, ...config } as UseContractReadConfig<
    typeof ieasABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ieasABI}__ and `functionName` set to `"getAttestation"`.
 */
export function useIeasGetAttestation<
  TFunctionName extends 'getAttestation',
  TSelectData = ReadContractResult<typeof ieasABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ieasABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ieasABI,
    functionName: 'getAttestation',
    ...config,
  } as UseContractReadConfig<typeof ieasABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ieasABI}__ and `functionName` set to `"getRevokeOffchain"`.
 */
export function useIeasGetRevokeOffchain<
  TFunctionName extends 'getRevokeOffchain',
  TSelectData = ReadContractResult<typeof ieasABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ieasABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ieasABI,
    functionName: 'getRevokeOffchain',
    ...config,
  } as UseContractReadConfig<typeof ieasABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ieasABI}__ and `functionName` set to `"getSchemaRegistry"`.
 */
export function useIeasGetSchemaRegistry<
  TFunctionName extends 'getSchemaRegistry',
  TSelectData = ReadContractResult<typeof ieasABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ieasABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ieasABI,
    functionName: 'getSchemaRegistry',
    ...config,
  } as UseContractReadConfig<typeof ieasABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ieasABI}__ and `functionName` set to `"getTimestamp"`.
 */
export function useIeasGetTimestamp<
  TFunctionName extends 'getTimestamp',
  TSelectData = ReadContractResult<typeof ieasABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ieasABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ieasABI,
    functionName: 'getTimestamp',
    ...config,
  } as UseContractReadConfig<typeof ieasABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ieasABI}__ and `functionName` set to `"isAttestationValid"`.
 */
export function useIeasIsAttestationValid<
  TFunctionName extends 'isAttestationValid',
  TSelectData = ReadContractResult<typeof ieasABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ieasABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ieasABI,
    functionName: 'isAttestationValid',
    ...config,
  } as UseContractReadConfig<typeof ieasABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ieasABI}__.
 */
export function useIeasWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ieasABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ieasABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ieasABI, TFunctionName, TMode>({
    abi: ieasABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ieasABI}__ and `functionName` set to `"attest"`.
 */
export function useIeasAttest<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ieasABI, 'attest'>['request']['abi'],
        'attest',
        TMode
      > & { functionName?: 'attest' }
    : UseContractWriteConfig<typeof ieasABI, 'attest', TMode> & {
        abi?: never
        functionName?: 'attest'
      } = {} as any,
) {
  return useContractWrite<typeof ieasABI, 'attest', TMode>({
    abi: ieasABI,
    functionName: 'attest',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ieasABI}__ and `functionName` set to `"attestByDelegation"`.
 */
export function useIeasAttestByDelegation<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ieasABI,
          'attestByDelegation'
        >['request']['abi'],
        'attestByDelegation',
        TMode
      > & { functionName?: 'attestByDelegation' }
    : UseContractWriteConfig<typeof ieasABI, 'attestByDelegation', TMode> & {
        abi?: never
        functionName?: 'attestByDelegation'
      } = {} as any,
) {
  return useContractWrite<typeof ieasABI, 'attestByDelegation', TMode>({
    abi: ieasABI,
    functionName: 'attestByDelegation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ieasABI}__ and `functionName` set to `"multiAttest"`.
 */
export function useIeasMultiAttest<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ieasABI,
          'multiAttest'
        >['request']['abi'],
        'multiAttest',
        TMode
      > & { functionName?: 'multiAttest' }
    : UseContractWriteConfig<typeof ieasABI, 'multiAttest', TMode> & {
        abi?: never
        functionName?: 'multiAttest'
      } = {} as any,
) {
  return useContractWrite<typeof ieasABI, 'multiAttest', TMode>({
    abi: ieasABI,
    functionName: 'multiAttest',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ieasABI}__ and `functionName` set to `"multiAttestByDelegation"`.
 */
export function useIeasMultiAttestByDelegation<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ieasABI,
          'multiAttestByDelegation'
        >['request']['abi'],
        'multiAttestByDelegation',
        TMode
      > & { functionName?: 'multiAttestByDelegation' }
    : UseContractWriteConfig<
        typeof ieasABI,
        'multiAttestByDelegation',
        TMode
      > & {
        abi?: never
        functionName?: 'multiAttestByDelegation'
      } = {} as any,
) {
  return useContractWrite<typeof ieasABI, 'multiAttestByDelegation', TMode>({
    abi: ieasABI,
    functionName: 'multiAttestByDelegation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ieasABI}__ and `functionName` set to `"multiRevoke"`.
 */
export function useIeasMultiRevoke<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ieasABI,
          'multiRevoke'
        >['request']['abi'],
        'multiRevoke',
        TMode
      > & { functionName?: 'multiRevoke' }
    : UseContractWriteConfig<typeof ieasABI, 'multiRevoke', TMode> & {
        abi?: never
        functionName?: 'multiRevoke'
      } = {} as any,
) {
  return useContractWrite<typeof ieasABI, 'multiRevoke', TMode>({
    abi: ieasABI,
    functionName: 'multiRevoke',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ieasABI}__ and `functionName` set to `"multiRevokeByDelegation"`.
 */
export function useIeasMultiRevokeByDelegation<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ieasABI,
          'multiRevokeByDelegation'
        >['request']['abi'],
        'multiRevokeByDelegation',
        TMode
      > & { functionName?: 'multiRevokeByDelegation' }
    : UseContractWriteConfig<
        typeof ieasABI,
        'multiRevokeByDelegation',
        TMode
      > & {
        abi?: never
        functionName?: 'multiRevokeByDelegation'
      } = {} as any,
) {
  return useContractWrite<typeof ieasABI, 'multiRevokeByDelegation', TMode>({
    abi: ieasABI,
    functionName: 'multiRevokeByDelegation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ieasABI}__ and `functionName` set to `"multiRevokeOffchain"`.
 */
export function useIeasMultiRevokeOffchain<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ieasABI,
          'multiRevokeOffchain'
        >['request']['abi'],
        'multiRevokeOffchain',
        TMode
      > & { functionName?: 'multiRevokeOffchain' }
    : UseContractWriteConfig<typeof ieasABI, 'multiRevokeOffchain', TMode> & {
        abi?: never
        functionName?: 'multiRevokeOffchain'
      } = {} as any,
) {
  return useContractWrite<typeof ieasABI, 'multiRevokeOffchain', TMode>({
    abi: ieasABI,
    functionName: 'multiRevokeOffchain',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ieasABI}__ and `functionName` set to `"multiTimestamp"`.
 */
export function useIeasMultiTimestamp<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ieasABI,
          'multiTimestamp'
        >['request']['abi'],
        'multiTimestamp',
        TMode
      > & { functionName?: 'multiTimestamp' }
    : UseContractWriteConfig<typeof ieasABI, 'multiTimestamp', TMode> & {
        abi?: never
        functionName?: 'multiTimestamp'
      } = {} as any,
) {
  return useContractWrite<typeof ieasABI, 'multiTimestamp', TMode>({
    abi: ieasABI,
    functionName: 'multiTimestamp',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ieasABI}__ and `functionName` set to `"revoke"`.
 */
export function useIeasRevoke<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ieasABI, 'revoke'>['request']['abi'],
        'revoke',
        TMode
      > & { functionName?: 'revoke' }
    : UseContractWriteConfig<typeof ieasABI, 'revoke', TMode> & {
        abi?: never
        functionName?: 'revoke'
      } = {} as any,
) {
  return useContractWrite<typeof ieasABI, 'revoke', TMode>({
    abi: ieasABI,
    functionName: 'revoke',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ieasABI}__ and `functionName` set to `"revokeByDelegation"`.
 */
export function useIeasRevokeByDelegation<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ieasABI,
          'revokeByDelegation'
        >['request']['abi'],
        'revokeByDelegation',
        TMode
      > & { functionName?: 'revokeByDelegation' }
    : UseContractWriteConfig<typeof ieasABI, 'revokeByDelegation', TMode> & {
        abi?: never
        functionName?: 'revokeByDelegation'
      } = {} as any,
) {
  return useContractWrite<typeof ieasABI, 'revokeByDelegation', TMode>({
    abi: ieasABI,
    functionName: 'revokeByDelegation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ieasABI}__ and `functionName` set to `"revokeOffchain"`.
 */
export function useIeasRevokeOffchain<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ieasABI,
          'revokeOffchain'
        >['request']['abi'],
        'revokeOffchain',
        TMode
      > & { functionName?: 'revokeOffchain' }
    : UseContractWriteConfig<typeof ieasABI, 'revokeOffchain', TMode> & {
        abi?: never
        functionName?: 'revokeOffchain'
      } = {} as any,
) {
  return useContractWrite<typeof ieasABI, 'revokeOffchain', TMode>({
    abi: ieasABI,
    functionName: 'revokeOffchain',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ieasABI}__ and `functionName` set to `"timestamp"`.
 */
export function useIeasTimestamp<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ieasABI,
          'timestamp'
        >['request']['abi'],
        'timestamp',
        TMode
      > & { functionName?: 'timestamp' }
    : UseContractWriteConfig<typeof ieasABI, 'timestamp', TMode> & {
        abi?: never
        functionName?: 'timestamp'
      } = {} as any,
) {
  return useContractWrite<typeof ieasABI, 'timestamp', TMode>({
    abi: ieasABI,
    functionName: 'timestamp',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ieasABI}__.
 */
export function usePrepareIeasWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ieasABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ieasABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ieasABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ieasABI}__ and `functionName` set to `"attest"`.
 */
export function usePrepareIeasAttest(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ieasABI, 'attest'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ieasABI,
    functionName: 'attest',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ieasABI, 'attest'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ieasABI}__ and `functionName` set to `"attestByDelegation"`.
 */
export function usePrepareIeasAttestByDelegation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ieasABI, 'attestByDelegation'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ieasABI,
    functionName: 'attestByDelegation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ieasABI, 'attestByDelegation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ieasABI}__ and `functionName` set to `"multiAttest"`.
 */
export function usePrepareIeasMultiAttest(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ieasABI, 'multiAttest'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ieasABI,
    functionName: 'multiAttest',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ieasABI, 'multiAttest'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ieasABI}__ and `functionName` set to `"multiAttestByDelegation"`.
 */
export function usePrepareIeasMultiAttestByDelegation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ieasABI, 'multiAttestByDelegation'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ieasABI,
    functionName: 'multiAttestByDelegation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ieasABI, 'multiAttestByDelegation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ieasABI}__ and `functionName` set to `"multiRevoke"`.
 */
export function usePrepareIeasMultiRevoke(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ieasABI, 'multiRevoke'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ieasABI,
    functionName: 'multiRevoke',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ieasABI, 'multiRevoke'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ieasABI}__ and `functionName` set to `"multiRevokeByDelegation"`.
 */
export function usePrepareIeasMultiRevokeByDelegation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ieasABI, 'multiRevokeByDelegation'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ieasABI,
    functionName: 'multiRevokeByDelegation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ieasABI, 'multiRevokeByDelegation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ieasABI}__ and `functionName` set to `"multiRevokeOffchain"`.
 */
export function usePrepareIeasMultiRevokeOffchain(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ieasABI, 'multiRevokeOffchain'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ieasABI,
    functionName: 'multiRevokeOffchain',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ieasABI, 'multiRevokeOffchain'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ieasABI}__ and `functionName` set to `"multiTimestamp"`.
 */
export function usePrepareIeasMultiTimestamp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ieasABI, 'multiTimestamp'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ieasABI,
    functionName: 'multiTimestamp',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ieasABI, 'multiTimestamp'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ieasABI}__ and `functionName` set to `"revoke"`.
 */
export function usePrepareIeasRevoke(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ieasABI, 'revoke'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ieasABI,
    functionName: 'revoke',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ieasABI, 'revoke'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ieasABI}__ and `functionName` set to `"revokeByDelegation"`.
 */
export function usePrepareIeasRevokeByDelegation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ieasABI, 'revokeByDelegation'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ieasABI,
    functionName: 'revokeByDelegation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ieasABI, 'revokeByDelegation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ieasABI}__ and `functionName` set to `"revokeOffchain"`.
 */
export function usePrepareIeasRevokeOffchain(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ieasABI, 'revokeOffchain'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ieasABI,
    functionName: 'revokeOffchain',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ieasABI, 'revokeOffchain'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ieasABI}__ and `functionName` set to `"timestamp"`.
 */
export function usePrepareIeasTimestamp(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ieasABI, 'timestamp'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ieasABI,
    functionName: 'timestamp',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ieasABI, 'timestamp'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ieasABI}__.
 */
export function useIeasEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ieasABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({ abi: ieasABI, ...config } as UseContractEventConfig<
    typeof ieasABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ieasABI}__ and `eventName` set to `"Attested"`.
 */
export function useIeasAttestedEvent(
  config: Omit<
    UseContractEventConfig<typeof ieasABI, 'Attested'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ieasABI,
    eventName: 'Attested',
    ...config,
  } as UseContractEventConfig<typeof ieasABI, 'Attested'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ieasABI}__ and `eventName` set to `"Revoked"`.
 */
export function useIeasRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof ieasABI, 'Revoked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ieasABI,
    eventName: 'Revoked',
    ...config,
  } as UseContractEventConfig<typeof ieasABI, 'Revoked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ieasABI}__ and `eventName` set to `"RevokedOffchain"`.
 */
export function useIeasRevokedOffchainEvent(
  config: Omit<
    UseContractEventConfig<typeof ieasABI, 'RevokedOffchain'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ieasABI,
    eventName: 'RevokedOffchain',
    ...config,
  } as UseContractEventConfig<typeof ieasABI, 'RevokedOffchain'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ieasABI}__ and `eventName` set to `"Timestamped"`.
 */
export function useIeasTimestampedEvent(
  config: Omit<
    UseContractEventConfig<typeof ieasABI, 'Timestamped'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ieasABI,
    eventName: 'Timestamped',
    ...config,
  } as UseContractEventConfig<typeof ieasABI, 'Timestamped'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1271ABI}__.
 */
export function useIerc1271Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc1271ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc1271ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1271ABI,
    ...config,
  } as UseContractReadConfig<typeof ierc1271ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1271ABI}__ and `functionName` set to `"isValidSignature"`.
 */
export function useIerc1271IsValidSignature<
  TFunctionName extends 'isValidSignature',
  TSelectData = ReadContractResult<typeof ierc1271ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc1271ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1271ABI,
    functionName: 'isValidSignature',
    ...config,
  } as UseContractReadConfig<typeof ierc1271ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165UpgradeableABI}__.
 */
export function useIerc165UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc165UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc165UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc165UpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc165UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165UpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc165UpgradeableSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof ierc165UpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc165UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc165UpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof ierc165UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: ierc20ABI, ...config } as UseContractReadConfig<
    typeof ierc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20Allowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20BalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20TotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc20ABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc20ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc20ABI, TFunctionName, TMode>({
    abi: ierc20ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20Approve<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20ABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof ierc20ABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20ABI, 'approve', TMode>({
    abi: ierc20ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20Transfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20ABI,
          'transfer'
        >['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof ierc20ABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20ABI, 'transfer', TMode>({
    abi: ierc20ABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20TransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc20ABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof ierc20ABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof ierc20ABI, 'transferFrom', TMode>({
    abi: ierc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function usePrepareIerc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc20ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20ABI,
    ...config,
  } as UseContractEventConfig<typeof ierc20ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc20ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc20ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc2981UpgradeableABI}__.
 */
export function useIerc2981UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof ierc2981UpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc2981UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc2981UpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc2981UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc2981UpgradeableABI}__ and `functionName` set to `"royaltyInfo"`.
 */
export function useIerc2981UpgradeableRoyaltyInfo<
  TFunctionName extends 'royaltyInfo',
  TSelectData = ReadContractResult<
    typeof ierc2981UpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc2981UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc2981UpgradeableABI,
    functionName: 'royaltyInfo',
    ...config,
  } as UseContractReadConfig<
    typeof ierc2981UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc2981UpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc2981UpgradeableSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<
    typeof ierc2981UpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc2981UpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc2981UpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof ierc2981UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc2771RecipientABI}__.
 */
export function useIerc2771RecipientRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc2771RecipientABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc2771RecipientABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc2771RecipientABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc2771RecipientABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc2771RecipientABI}__ and `functionName` set to `"isTrustedForwarder"`.
 */
export function useIerc2771RecipientIsTrustedForwarder<
  TFunctionName extends 'isTrustedForwarder',
  TSelectData = ReadContractResult<typeof ierc2771RecipientABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc2771RecipientABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc2771RecipientABI,
    functionName: 'isTrustedForwarder',
    ...config,
  } as UseContractReadConfig<
    typeof ierc2771RecipientABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc6551AccountABI}__.
 */
export function useIerc6551AccountRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc6551AccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc6551AccountABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc6551AccountABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc6551AccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc6551AccountABI}__ and `functionName` set to `"isValidSigner"`.
 */
export function useIerc6551AccountIsValidSigner<
  TFunctionName extends 'isValidSigner',
  TSelectData = ReadContractResult<typeof ierc6551AccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc6551AccountABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc6551AccountABI,
    functionName: 'isValidSigner',
    ...config,
  } as UseContractReadConfig<
    typeof ierc6551AccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc6551AccountABI}__ and `functionName` set to `"state"`.
 */
export function useIerc6551AccountState<
  TFunctionName extends 'state',
  TSelectData = ReadContractResult<typeof ierc6551AccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc6551AccountABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc6551AccountABI,
    functionName: 'state',
    ...config,
  } as UseContractReadConfig<
    typeof ierc6551AccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc6551AccountABI}__ and `functionName` set to `"token"`.
 */
export function useIerc6551AccountToken<
  TFunctionName extends 'token',
  TSelectData = ReadContractResult<typeof ierc6551AccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc6551AccountABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc6551AccountABI,
    functionName: 'token',
    ...config,
  } as UseContractReadConfig<
    typeof ierc6551AccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc6551ExecutableABI}__.
 */
export function useIerc6551ExecutableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc6551ExecutableABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof ierc6551ExecutableABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc6551ExecutableABI, TFunctionName, TMode>({
    abi: ierc6551ExecutableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc6551ExecutableABI}__ and `functionName` set to `"execute"`.
 */
export function useIerc6551ExecutableExecute<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc6551ExecutableABI,
          'execute'
        >['request']['abi'],
        'execute',
        TMode
      > & { functionName?: 'execute' }
    : UseContractWriteConfig<typeof ierc6551ExecutableABI, 'execute', TMode> & {
        abi?: never
        functionName?: 'execute'
      } = {} as any,
) {
  return useContractWrite<typeof ierc6551ExecutableABI, 'execute', TMode>({
    abi: ierc6551ExecutableABI,
    functionName: 'execute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc6551ExecutableABI}__.
 */
export function usePrepareIerc6551ExecutableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc6551ExecutableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc6551ExecutableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc6551ExecutableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc6551ExecutableABI}__ and `functionName` set to `"execute"`.
 */
export function usePrepareIerc6551ExecutableExecute(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc6551ExecutableABI, 'execute'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc6551ExecutableABI,
    functionName: 'execute',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc6551ExecutableABI, 'execute'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc6551RegistryABI}__.
 */
export function useIerc6551RegistryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc6551RegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc6551RegistryABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc6551RegistryABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc6551RegistryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc6551RegistryABI}__ and `functionName` set to `"account"`.
 */
export function useIerc6551RegistryAccount<
  TFunctionName extends 'account',
  TSelectData = ReadContractResult<typeof ierc6551RegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc6551RegistryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc6551RegistryABI,
    functionName: 'account',
    ...config,
  } as UseContractReadConfig<
    typeof ierc6551RegistryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc6551RegistryABI}__.
 */
export function useIerc6551RegistryWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc6551RegistryABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof ierc6551RegistryABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc6551RegistryABI, TFunctionName, TMode>({
    abi: ierc6551RegistryABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc6551RegistryABI}__ and `functionName` set to `"createAccount"`.
 */
export function useIerc6551RegistryCreateAccount<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc6551RegistryABI,
          'createAccount'
        >['request']['abi'],
        'createAccount',
        TMode
      > & { functionName?: 'createAccount' }
    : UseContractWriteConfig<
        typeof ierc6551RegistryABI,
        'createAccount',
        TMode
      > & {
        abi?: never
        functionName?: 'createAccount'
      } = {} as any,
) {
  return useContractWrite<typeof ierc6551RegistryABI, 'createAccount', TMode>({
    abi: ierc6551RegistryABI,
    functionName: 'createAccount',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc6551RegistryABI}__.
 */
export function usePrepareIerc6551RegistryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc6551RegistryABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc6551RegistryABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc6551RegistryABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc6551RegistryABI}__ and `functionName` set to `"createAccount"`.
 */
export function usePrepareIerc6551RegistryCreateAccount(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc6551RegistryABI, 'createAccount'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc6551RegistryABI,
    functionName: 'createAccount',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc6551RegistryABI,
    'createAccount'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc6551RegistryABI}__.
 */
export function useIerc6551RegistryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc6551RegistryABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc6551RegistryABI,
    ...config,
  } as UseContractEventConfig<typeof ierc6551RegistryABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc6551RegistryABI}__ and `eventName` set to `"AccountCreated"`.
 */
export function useIerc6551RegistryAccountCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc6551RegistryABI, 'AccountCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc6551RegistryABI,
    eventName: 'AccountCreated',
    ...config,
  } as UseContractEventConfig<typeof ierc6551RegistryABI, 'AccountCreated'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc721BalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof ierc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIerc721GetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof ierc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc721IsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof ierc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIerc721OwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof ierc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc721SupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof ierc721ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721ABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof ierc721ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Write<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc721ABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ierc721ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc721ABI, TFunctionName, TMode>({
    abi: ierc721ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc721Approve<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721ABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof ierc721ABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof ierc721ABI, 'approve', TMode>({
    abi: ierc721ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc721SafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721ABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<typeof ierc721ABI, 'safeTransferFrom', TMode> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof ierc721ABI, 'safeTransferFrom', TMode>({
    abi: ierc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc721SetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721ABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<typeof ierc721ABI, 'setApprovalForAll', TMode> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<typeof ierc721ABI, 'setApprovalForAll', TMode>({
    abi: ierc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc721TransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721ABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof ierc721ABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof ierc721ABI, 'transferFrom', TMode>({
    abi: ierc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function usePrepareIerc721Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc721Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc721SafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc721SetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc721TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__.
 */
export function useIerc721Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc721ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721ABI,
    ...config,
  } as UseContractEventConfig<typeof ierc721ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc721ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc721ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc721ApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721ABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721ABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof ierc721ABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc721TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc721ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721GeneralMintABI}__.
 */
export function useIerc721GeneralMintWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721GeneralMintABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof ierc721GeneralMintABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc721GeneralMintABI, TFunctionName, TMode>({
    abi: ierc721GeneralMintABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721GeneralMintABI}__ and `functionName` set to `"mintAmountToOneRecipient"`.
 */
export function useIerc721GeneralMintMintAmountToOneRecipient<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721GeneralMintABI,
          'mintAmountToOneRecipient'
        >['request']['abi'],
        'mintAmountToOneRecipient',
        TMode
      > & { functionName?: 'mintAmountToOneRecipient' }
    : UseContractWriteConfig<
        typeof ierc721GeneralMintABI,
        'mintAmountToOneRecipient',
        TMode
      > & {
        abi?: never
        functionName?: 'mintAmountToOneRecipient'
      } = {} as any,
) {
  return useContractWrite<
    typeof ierc721GeneralMintABI,
    'mintAmountToOneRecipient',
    TMode
  >({
    abi: ierc721GeneralMintABI,
    functionName: 'mintAmountToOneRecipient',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721GeneralMintABI}__ and `functionName` set to `"mintOneToMultipleRecipients"`.
 */
export function useIerc721GeneralMintMintOneToMultipleRecipients<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721GeneralMintABI,
          'mintOneToMultipleRecipients'
        >['request']['abi'],
        'mintOneToMultipleRecipients',
        TMode
      > & { functionName?: 'mintOneToMultipleRecipients' }
    : UseContractWriteConfig<
        typeof ierc721GeneralMintABI,
        'mintOneToMultipleRecipients',
        TMode
      > & {
        abi?: never
        functionName?: 'mintOneToMultipleRecipients'
      } = {} as any,
) {
  return useContractWrite<
    typeof ierc721GeneralMintABI,
    'mintOneToMultipleRecipients',
    TMode
  >({
    abi: ierc721GeneralMintABI,
    functionName: 'mintOneToMultipleRecipients',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721GeneralMintABI}__ and `functionName` set to `"mintOneToOneRecipient"`.
 */
export function useIerc721GeneralMintMintOneToOneRecipient<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721GeneralMintABI,
          'mintOneToOneRecipient'
        >['request']['abi'],
        'mintOneToOneRecipient',
        TMode
      > & { functionName?: 'mintOneToOneRecipient' }
    : UseContractWriteConfig<
        typeof ierc721GeneralMintABI,
        'mintOneToOneRecipient',
        TMode
      > & {
        abi?: never
        functionName?: 'mintOneToOneRecipient'
      } = {} as any,
) {
  return useContractWrite<
    typeof ierc721GeneralMintABI,
    'mintOneToOneRecipient',
    TMode
  >({
    abi: ierc721GeneralMintABI,
    functionName: 'mintOneToOneRecipient',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721GeneralMintABI}__ and `functionName` set to `"mintSameAmountToMultipleRecipients"`.
 */
export function useIerc721GeneralMintMintSameAmountToMultipleRecipients<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721GeneralMintABI,
          'mintSameAmountToMultipleRecipients'
        >['request']['abi'],
        'mintSameAmountToMultipleRecipients',
        TMode
      > & { functionName?: 'mintSameAmountToMultipleRecipients' }
    : UseContractWriteConfig<
        typeof ierc721GeneralMintABI,
        'mintSameAmountToMultipleRecipients',
        TMode
      > & {
        abi?: never
        functionName?: 'mintSameAmountToMultipleRecipients'
      } = {} as any,
) {
  return useContractWrite<
    typeof ierc721GeneralMintABI,
    'mintSameAmountToMultipleRecipients',
    TMode
  >({
    abi: ierc721GeneralMintABI,
    functionName: 'mintSameAmountToMultipleRecipients',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721GeneralMintABI}__ and `functionName` set to `"mintSpecificTokenToOneRecipient"`.
 */
export function useIerc721GeneralMintMintSpecificTokenToOneRecipient<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721GeneralMintABI,
          'mintSpecificTokenToOneRecipient'
        >['request']['abi'],
        'mintSpecificTokenToOneRecipient',
        TMode
      > & { functionName?: 'mintSpecificTokenToOneRecipient' }
    : UseContractWriteConfig<
        typeof ierc721GeneralMintABI,
        'mintSpecificTokenToOneRecipient',
        TMode
      > & {
        abi?: never
        functionName?: 'mintSpecificTokenToOneRecipient'
      } = {} as any,
) {
  return useContractWrite<
    typeof ierc721GeneralMintABI,
    'mintSpecificTokenToOneRecipient',
    TMode
  >({
    abi: ierc721GeneralMintABI,
    functionName: 'mintSpecificTokenToOneRecipient',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721GeneralMintABI}__ and `functionName` set to `"mintSpecificTokensToOneRecipient"`.
 */
export function useIerc721GeneralMintMintSpecificTokensToOneRecipient<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721GeneralMintABI,
          'mintSpecificTokensToOneRecipient'
        >['request']['abi'],
        'mintSpecificTokensToOneRecipient',
        TMode
      > & { functionName?: 'mintSpecificTokensToOneRecipient' }
    : UseContractWriteConfig<
        typeof ierc721GeneralMintABI,
        'mintSpecificTokensToOneRecipient',
        TMode
      > & {
        abi?: never
        functionName?: 'mintSpecificTokensToOneRecipient'
      } = {} as any,
) {
  return useContractWrite<
    typeof ierc721GeneralMintABI,
    'mintSpecificTokensToOneRecipient',
    TMode
  >({
    abi: ierc721GeneralMintABI,
    functionName: 'mintSpecificTokensToOneRecipient',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721GeneralMintABI}__.
 */
export function usePrepareIerc721GeneralMintWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721GeneralMintABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721GeneralMintABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721GeneralMintABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721GeneralMintABI}__ and `functionName` set to `"mintAmountToOneRecipient"`.
 */
export function usePrepareIerc721GeneralMintMintAmountToOneRecipient(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721GeneralMintABI,
      'mintAmountToOneRecipient'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721GeneralMintABI,
    functionName: 'mintAmountToOneRecipient',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721GeneralMintABI,
    'mintAmountToOneRecipient'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721GeneralMintABI}__ and `functionName` set to `"mintOneToMultipleRecipients"`.
 */
export function usePrepareIerc721GeneralMintMintOneToMultipleRecipients(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721GeneralMintABI,
      'mintOneToMultipleRecipients'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721GeneralMintABI,
    functionName: 'mintOneToMultipleRecipients',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721GeneralMintABI,
    'mintOneToMultipleRecipients'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721GeneralMintABI}__ and `functionName` set to `"mintOneToOneRecipient"`.
 */
export function usePrepareIerc721GeneralMintMintOneToOneRecipient(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721GeneralMintABI,
      'mintOneToOneRecipient'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721GeneralMintABI,
    functionName: 'mintOneToOneRecipient',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721GeneralMintABI,
    'mintOneToOneRecipient'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721GeneralMintABI}__ and `functionName` set to `"mintSameAmountToMultipleRecipients"`.
 */
export function usePrepareIerc721GeneralMintMintSameAmountToMultipleRecipients(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721GeneralMintABI,
      'mintSameAmountToMultipleRecipients'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721GeneralMintABI,
    functionName: 'mintSameAmountToMultipleRecipients',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721GeneralMintABI,
    'mintSameAmountToMultipleRecipients'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721GeneralMintABI}__ and `functionName` set to `"mintSpecificTokenToOneRecipient"`.
 */
export function usePrepareIerc721GeneralMintMintSpecificTokenToOneRecipient(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721GeneralMintABI,
      'mintSpecificTokenToOneRecipient'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721GeneralMintABI,
    functionName: 'mintSpecificTokenToOneRecipient',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721GeneralMintABI,
    'mintSpecificTokenToOneRecipient'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721GeneralMintABI}__ and `functionName` set to `"mintSpecificTokensToOneRecipient"`.
 */
export function usePrepareIerc721GeneralMintMintSpecificTokensToOneRecipient(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721GeneralMintABI,
      'mintSpecificTokensToOneRecipient'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721GeneralMintABI,
    functionName: 'mintSpecificTokensToOneRecipient',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721GeneralMintABI,
    'mintSpecificTokensToOneRecipient'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721AUpgradeableABI}__.
 */
export function useIerc721AUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof ierc721AUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721AUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721AUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc721AUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721AUpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc721AUpgradeableBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<
    typeof ierc721AUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721AUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721AUpgradeableABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721AUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721AUpgradeableABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIerc721AUpgradeableGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<
    typeof ierc721AUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721AUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721AUpgradeableABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721AUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721AUpgradeableABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc721AUpgradeableIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<
    typeof ierc721AUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721AUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721AUpgradeableABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721AUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721AUpgradeableABI}__ and `functionName` set to `"name"`.
 */
export function useIerc721AUpgradeableName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<
    typeof ierc721AUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721AUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721AUpgradeableABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721AUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721AUpgradeableABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIerc721AUpgradeableOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<
    typeof ierc721AUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721AUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721AUpgradeableABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721AUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721AUpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc721AUpgradeableSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<
    typeof ierc721AUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721AUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721AUpgradeableABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721AUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721AUpgradeableABI}__ and `functionName` set to `"symbol"`.
 */
export function useIerc721AUpgradeableSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<
    typeof ierc721AUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721AUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721AUpgradeableABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721AUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721AUpgradeableABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useIerc721AUpgradeableTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<
    typeof ierc721AUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721AUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721AUpgradeableABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721AUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721AUpgradeableABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc721AUpgradeableTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<
    typeof ierc721AUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721AUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721AUpgradeableABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721AUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721AUpgradeableABI}__.
 */
export function useIerc721AUpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721AUpgradeableABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof ierc721AUpgradeableABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc721AUpgradeableABI, TFunctionName, TMode>({
    abi: ierc721AUpgradeableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721AUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc721AUpgradeableApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721AUpgradeableABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<
        typeof ierc721AUpgradeableABI,
        'approve',
        TMode
      > & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof ierc721AUpgradeableABI, 'approve', TMode>({
    abi: ierc721AUpgradeableABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721AUpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc721AUpgradeableSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721AUpgradeableABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        typeof ierc721AUpgradeableABI,
        'safeTransferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    typeof ierc721AUpgradeableABI,
    'safeTransferFrom',
    TMode
  >({
    abi: ierc721AUpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721AUpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc721AUpgradeableSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721AUpgradeableABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        typeof ierc721AUpgradeableABI,
        'setApprovalForAll',
        TMode
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    typeof ierc721AUpgradeableABI,
    'setApprovalForAll',
    TMode
  >({
    abi: ierc721AUpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721AUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc721AUpgradeableTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721AUpgradeableABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        typeof ierc721AUpgradeableABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof ierc721AUpgradeableABI, 'transferFrom', TMode>(
    {
      abi: ierc721AUpgradeableABI,
      functionName: 'transferFrom',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721AUpgradeableABI}__.
 */
export function usePrepareIerc721AUpgradeableWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721AUpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721AUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721AUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721AUpgradeableABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc721AUpgradeableApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721AUpgradeableABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721AUpgradeableABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721AUpgradeableABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721AUpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc721AUpgradeableSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721AUpgradeableABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721AUpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721AUpgradeableABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721AUpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc721AUpgradeableSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721AUpgradeableABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721AUpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721AUpgradeableABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721AUpgradeableABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc721AUpgradeableTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721AUpgradeableABI,
      'transferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721AUpgradeableABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721AUpgradeableABI,
    'transferFrom'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721AUpgradeableABI}__.
 */
export function useIerc721AUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc721AUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721AUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof ierc721AUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721AUpgradeableABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc721AUpgradeableApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721AUpgradeableABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721AUpgradeableABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc721AUpgradeableABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721AUpgradeableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc721AUpgradeableApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721AUpgradeableABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721AUpgradeableABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof ierc721AUpgradeableABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721AUpgradeableABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc721AUpgradeableTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721AUpgradeableABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721AUpgradeableABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc721AUpgradeableABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__.
 */
export function useIerc721ReceiverWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721ReceiverABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof ierc721ReceiverABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc721ReceiverABI, TFunctionName, TMode>({
    abi: ierc721ReceiverABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function useIerc721ReceiverOnErc721Received<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721ReceiverABI,
          'onERC721Received'
        >['request']['abi'],
        'onERC721Received',
        TMode
      > & { functionName?: 'onERC721Received' }
    : UseContractWriteConfig<
        typeof ierc721ReceiverABI,
        'onERC721Received',
        TMode
      > & {
        abi?: never
        functionName?: 'onERC721Received'
      } = {} as any,
) {
  return useContractWrite<typeof ierc721ReceiverABI, 'onERC721Received', TMode>(
    {
      abi: ierc721ReceiverABI,
      functionName: 'onERC721Received',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__.
 */
export function usePrepareIerc721ReceiverWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721ReceiverABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ReceiverABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721ReceiverABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721ReceiverABI}__ and `functionName` set to `"onERC721Received"`.
 */
export function usePrepareIerc721ReceiverOnErc721Received(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721ReceiverABI,
      'onERC721Received'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721ReceiverABI,
    functionName: 'onERC721Received',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721ReceiverABI,
    'onERC721Received'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function useIerc721MetadataRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc721MetadataBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"getApproved"`.
 */
export function useIerc721MetadataGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc721MetadataIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"name"`.
 */
export function useIerc721MetadataName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useIerc721MetadataOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc721MetadataSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"symbol"`.
 */
export function useIerc721MetadataSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useIerc721MetadataTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<typeof ierc721MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc721MetadataABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc721MetadataABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<
    typeof ierc721MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function useIerc721MetadataWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721MetadataABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof ierc721MetadataABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ierc721MetadataABI, TFunctionName, TMode>({
    abi: ierc721MetadataABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc721MetadataApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721MetadataABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof ierc721MetadataABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof ierc721MetadataABI, 'approve', TMode>({
    abi: ierc721MetadataABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc721MetadataSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721MetadataABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        typeof ierc721MetadataABI,
        'safeTransferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof ierc721MetadataABI, 'safeTransferFrom', TMode>(
    {
      abi: ierc721MetadataABI,
      functionName: 'safeTransferFrom',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc721MetadataSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721MetadataABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        typeof ierc721MetadataABI,
        'setApprovalForAll',
        TMode
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<
    typeof ierc721MetadataABI,
    'setApprovalForAll',
    TMode
  >({
    abi: ierc721MetadataABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc721MetadataTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ierc721MetadataABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        typeof ierc721MetadataABI,
        'transferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof ierc721MetadataABI, 'transferFrom', TMode>({
    abi: ierc721MetadataABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function usePrepareIerc721MetadataWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721MetadataABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721MetadataABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc721MetadataApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc721MetadataSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721MetadataABI,
      'safeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721MetadataABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc721MetadataSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ierc721MetadataABI,
      'setApprovalForAll'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc721MetadataABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc721MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc721MetadataTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc721MetadataABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc721MetadataABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__.
 */
export function useIerc721MetadataEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc721MetadataABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721MetadataABI,
    ...config,
  } as UseContractEventConfig<typeof ierc721MetadataABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc721MetadataApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721MetadataABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721MetadataABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc721MetadataABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc721MetadataApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721MetadataABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721MetadataABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof ierc721MetadataABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc721MetadataABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc721MetadataTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc721MetadataABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc721MetadataABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc721MetadataABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iForwarderABI}__.
 */
export function useIForwarderRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iForwarderABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iForwarderABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iForwarderABI,
    ...config,
  } as UseContractReadConfig<typeof iForwarderABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iForwarderABI}__ and `functionName` set to `"getNonce"`.
 */
export function useIForwarderGetNonce<
  TFunctionName extends 'getNonce',
  TSelectData = ReadContractResult<typeof iForwarderABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iForwarderABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iForwarderABI,
    functionName: 'getNonce',
    ...config,
  } as UseContractReadConfig<typeof iForwarderABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iForwarderABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIForwarderSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof iForwarderABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iForwarderABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iForwarderABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof iForwarderABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iForwarderABI}__ and `functionName` set to `"verify"`.
 */
export function useIForwarderVerify<
  TFunctionName extends 'verify',
  TSelectData = ReadContractResult<typeof iForwarderABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iForwarderABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iForwarderABI,
    functionName: 'verify',
    ...config,
  } as UseContractReadConfig<typeof iForwarderABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iForwarderABI}__.
 */
export function useIForwarderWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iForwarderABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iForwarderABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iForwarderABI, TFunctionName, TMode>({
    abi: iForwarderABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iForwarderABI}__ and `functionName` set to `"execute"`.
 */
export function useIForwarderExecute<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iForwarderABI,
          'execute'
        >['request']['abi'],
        'execute',
        TMode
      > & { functionName?: 'execute' }
    : UseContractWriteConfig<typeof iForwarderABI, 'execute', TMode> & {
        abi?: never
        functionName?: 'execute'
      } = {} as any,
) {
  return useContractWrite<typeof iForwarderABI, 'execute', TMode>({
    abi: iForwarderABI,
    functionName: 'execute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iForwarderABI}__ and `functionName` set to `"registerDomainSeparator"`.
 */
export function useIForwarderRegisterDomainSeparator<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iForwarderABI,
          'registerDomainSeparator'
        >['request']['abi'],
        'registerDomainSeparator',
        TMode
      > & { functionName?: 'registerDomainSeparator' }
    : UseContractWriteConfig<
        typeof iForwarderABI,
        'registerDomainSeparator',
        TMode
      > & {
        abi?: never
        functionName?: 'registerDomainSeparator'
      } = {} as any,
) {
  return useContractWrite<
    typeof iForwarderABI,
    'registerDomainSeparator',
    TMode
  >({
    abi: iForwarderABI,
    functionName: 'registerDomainSeparator',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iForwarderABI}__ and `functionName` set to `"registerRequestType"`.
 */
export function useIForwarderRegisterRequestType<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iForwarderABI,
          'registerRequestType'
        >['request']['abi'],
        'registerRequestType',
        TMode
      > & { functionName?: 'registerRequestType' }
    : UseContractWriteConfig<
        typeof iForwarderABI,
        'registerRequestType',
        TMode
      > & {
        abi?: never
        functionName?: 'registerRequestType'
      } = {} as any,
) {
  return useContractWrite<typeof iForwarderABI, 'registerRequestType', TMode>({
    abi: iForwarderABI,
    functionName: 'registerRequestType',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iForwarderABI}__.
 */
export function usePrepareIForwarderWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iForwarderABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iForwarderABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iForwarderABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iForwarderABI}__ and `functionName` set to `"execute"`.
 */
export function usePrepareIForwarderExecute(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iForwarderABI, 'execute'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iForwarderABI,
    functionName: 'execute',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iForwarderABI, 'execute'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iForwarderABI}__ and `functionName` set to `"registerDomainSeparator"`.
 */
export function usePrepareIForwarderRegisterDomainSeparator(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iForwarderABI,
      'registerDomainSeparator'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iForwarderABI,
    functionName: 'registerDomainSeparator',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iForwarderABI,
    'registerDomainSeparator'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iForwarderABI}__ and `functionName` set to `"registerRequestType"`.
 */
export function usePrepareIForwarderRegisterRequestType(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iForwarderABI, 'registerRequestType'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iForwarderABI,
    functionName: 'registerRequestType',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iForwarderABI,
    'registerRequestType'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iForwarderABI}__.
 */
export function useIForwarderEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iForwarderABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iForwarderABI,
    ...config,
  } as UseContractEventConfig<typeof iForwarderABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iForwarderABI}__ and `eventName` set to `"DomainRegistered"`.
 */
export function useIForwarderDomainRegisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof iForwarderABI, 'DomainRegistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iForwarderABI,
    eventName: 'DomainRegistered',
    ...config,
  } as UseContractEventConfig<typeof iForwarderABI, 'DomainRegistered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iForwarderABI}__ and `eventName` set to `"RequestTypeRegistered"`.
 */
export function useIForwarderRequestTypeRegisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof iForwarderABI, 'RequestTypeRegistered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iForwarderABI,
    eventName: 'RequestTypeRegistered',
    ...config,
  } as UseContractEventConfig<typeof iForwarderABI, 'RequestTypeRegistered'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iObservabilityABI}__.
 */
export function useIObservabilityWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iObservabilityABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iObservabilityABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iObservabilityABI, TFunctionName, TMode>({
    abi: iObservabilityABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iObservabilityABI}__ and `functionName` set to `"emitBaseUriSet"`.
 */
export function useIObservabilityEmitBaseUriSet<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iObservabilityABI,
          'emitBaseUriSet'
        >['request']['abi'],
        'emitBaseUriSet',
        TMode
      > & { functionName?: 'emitBaseUriSet' }
    : UseContractWriteConfig<
        typeof iObservabilityABI,
        'emitBaseUriSet',
        TMode
      > & {
        abi?: never
        functionName?: 'emitBaseUriSet'
      } = {} as any,
) {
  return useContractWrite<typeof iObservabilityABI, 'emitBaseUriSet', TMode>({
    abi: iObservabilityABI,
    functionName: 'emitBaseUriSet',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iObservabilityABI}__ and `functionName` set to `"emitContractMetadataSet"`.
 */
export function useIObservabilityEmitContractMetadataSet<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iObservabilityABI,
          'emitContractMetadataSet'
        >['request']['abi'],
        'emitContractMetadataSet',
        TMode
      > & { functionName?: 'emitContractMetadataSet' }
    : UseContractWriteConfig<
        typeof iObservabilityABI,
        'emitContractMetadataSet',
        TMode
      > & {
        abi?: never
        functionName?: 'emitContractMetadataSet'
      } = {} as any,
) {
  return useContractWrite<
    typeof iObservabilityABI,
    'emitContractMetadataSet',
    TMode
  >({
    abi: iObservabilityABI,
    functionName: 'emitContractMetadataSet',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iObservabilityABI}__ and `functionName` set to `"emitDefaultRoyaltySet"`.
 */
export function useIObservabilityEmitDefaultRoyaltySet<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iObservabilityABI,
          'emitDefaultRoyaltySet'
        >['request']['abi'],
        'emitDefaultRoyaltySet',
        TMode
      > & { functionName?: 'emitDefaultRoyaltySet' }
    : UseContractWriteConfig<
        typeof iObservabilityABI,
        'emitDefaultRoyaltySet',
        TMode
      > & {
        abi?: never
        functionName?: 'emitDefaultRoyaltySet'
      } = {} as any,
) {
  return useContractWrite<
    typeof iObservabilityABI,
    'emitDefaultRoyaltySet',
    TMode
  >({
    abi: iObservabilityABI,
    functionName: 'emitDefaultRoyaltySet',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iObservabilityABI}__ and `functionName` set to `"emitDefaultTokenManagerChanged"`.
 */
export function useIObservabilityEmitDefaultTokenManagerChanged<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iObservabilityABI,
          'emitDefaultTokenManagerChanged'
        >['request']['abi'],
        'emitDefaultTokenManagerChanged',
        TMode
      > & { functionName?: 'emitDefaultTokenManagerChanged' }
    : UseContractWriteConfig<
        typeof iObservabilityABI,
        'emitDefaultTokenManagerChanged',
        TMode
      > & {
        abi?: never
        functionName?: 'emitDefaultTokenManagerChanged'
      } = {} as any,
) {
  return useContractWrite<
    typeof iObservabilityABI,
    'emitDefaultTokenManagerChanged',
    TMode
  >({
    abi: iObservabilityABI,
    functionName: 'emitDefaultTokenManagerChanged',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iObservabilityABI}__ and `functionName` set to `"emitGenerativeSeriesDeployed"`.
 */
export function useIObservabilityEmitGenerativeSeriesDeployed<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iObservabilityABI,
          'emitGenerativeSeriesDeployed'
        >['request']['abi'],
        'emitGenerativeSeriesDeployed',
        TMode
      > & { functionName?: 'emitGenerativeSeriesDeployed' }
    : UseContractWriteConfig<
        typeof iObservabilityABI,
        'emitGenerativeSeriesDeployed',
        TMode
      > & {
        abi?: never
        functionName?: 'emitGenerativeSeriesDeployed'
      } = {} as any,
) {
  return useContractWrite<
    typeof iObservabilityABI,
    'emitGenerativeSeriesDeployed',
    TMode
  >({
    abi: iObservabilityABI,
    functionName: 'emitGenerativeSeriesDeployed',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iObservabilityABI}__ and `functionName` set to `"emitGranularRoyaltiesSet"`.
 */
export function useIObservabilityEmitGranularRoyaltiesSet<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iObservabilityABI,
          'emitGranularRoyaltiesSet'
        >['request']['abi'],
        'emitGranularRoyaltiesSet',
        TMode
      > & { functionName?: 'emitGranularRoyaltiesSet' }
    : UseContractWriteConfig<
        typeof iObservabilityABI,
        'emitGranularRoyaltiesSet',
        TMode
      > & {
        abi?: never
        functionName?: 'emitGranularRoyaltiesSet'
      } = {} as any,
) {
  return useContractWrite<
    typeof iObservabilityABI,
    'emitGranularRoyaltiesSet',
    TMode
  >({
    abi: iObservabilityABI,
    functionName: 'emitGranularRoyaltiesSet',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iObservabilityABI}__ and `functionName` set to `"emitGranularTokenManagersRemoved"`.
 */
export function useIObservabilityEmitGranularTokenManagersRemoved<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iObservabilityABI,
          'emitGranularTokenManagersRemoved'
        >['request']['abi'],
        'emitGranularTokenManagersRemoved',
        TMode
      > & { functionName?: 'emitGranularTokenManagersRemoved' }
    : UseContractWriteConfig<
        typeof iObservabilityABI,
        'emitGranularTokenManagersRemoved',
        TMode
      > & {
        abi?: never
        functionName?: 'emitGranularTokenManagersRemoved'
      } = {} as any,
) {
  return useContractWrite<
    typeof iObservabilityABI,
    'emitGranularTokenManagersRemoved',
    TMode
  >({
    abi: iObservabilityABI,
    functionName: 'emitGranularTokenManagersRemoved',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iObservabilityABI}__ and `functionName` set to `"emitGranularTokenManagersSet"`.
 */
export function useIObservabilityEmitGranularTokenManagersSet<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iObservabilityABI,
          'emitGranularTokenManagersSet'
        >['request']['abi'],
        'emitGranularTokenManagersSet',
        TMode
      > & { functionName?: 'emitGranularTokenManagersSet' }
    : UseContractWriteConfig<
        typeof iObservabilityABI,
        'emitGranularTokenManagersSet',
        TMode
      > & {
        abi?: never
        functionName?: 'emitGranularTokenManagersSet'
      } = {} as any,
) {
  return useContractWrite<
    typeof iObservabilityABI,
    'emitGranularTokenManagersSet',
    TMode
  >({
    abi: iObservabilityABI,
    functionName: 'emitGranularTokenManagersSet',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iObservabilityABI}__ and `functionName` set to `"emitHashedMetadataConfigSet"`.
 */
export function useIObservabilityEmitHashedMetadataConfigSet<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iObservabilityABI,
          'emitHashedMetadataConfigSet'
        >['request']['abi'],
        'emitHashedMetadataConfigSet',
        TMode
      > & { functionName?: 'emitHashedMetadataConfigSet' }
    : UseContractWriteConfig<
        typeof iObservabilityABI,
        'emitHashedMetadataConfigSet',
        TMode
      > & {
        abi?: never
        functionName?: 'emitHashedMetadataConfigSet'
      } = {} as any,
) {
  return useContractWrite<
    typeof iObservabilityABI,
    'emitHashedMetadataConfigSet',
    TMode
  >({
    abi: iObservabilityABI,
    functionName: 'emitHashedMetadataConfigSet',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iObservabilityABI}__ and `functionName` set to `"emitLimitSupplySet"`.
 */
export function useIObservabilityEmitLimitSupplySet<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iObservabilityABI,
          'emitLimitSupplySet'
        >['request']['abi'],
        'emitLimitSupplySet',
        TMode
      > & { functionName?: 'emitLimitSupplySet' }
    : UseContractWriteConfig<
        typeof iObservabilityABI,
        'emitLimitSupplySet',
        TMode
      > & {
        abi?: never
        functionName?: 'emitLimitSupplySet'
      } = {} as any,
) {
  return useContractWrite<
    typeof iObservabilityABI,
    'emitLimitSupplySet',
    TMode
  >({
    abi: iObservabilityABI,
    functionName: 'emitLimitSupplySet',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iObservabilityABI}__ and `functionName` set to `"emitMinterRegistrationChanged"`.
 */
export function useIObservabilityEmitMinterRegistrationChanged<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iObservabilityABI,
          'emitMinterRegistrationChanged'
        >['request']['abi'],
        'emitMinterRegistrationChanged',
        TMode
      > & { functionName?: 'emitMinterRegistrationChanged' }
    : UseContractWriteConfig<
        typeof iObservabilityABI,
        'emitMinterRegistrationChanged',
        TMode
      > & {
        abi?: never
        functionName?: 'emitMinterRegistrationChanged'
      } = {} as any,
) {
  return useContractWrite<
    typeof iObservabilityABI,
    'emitMinterRegistrationChanged',
    TMode
  >({
    abi: iObservabilityABI,
    functionName: 'emitMinterRegistrationChanged',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iObservabilityABI}__ and `functionName` set to `"emitMintsFrozen"`.
 */
export function useIObservabilityEmitMintsFrozen<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iObservabilityABI,
          'emitMintsFrozen'
        >['request']['abi'],
        'emitMintsFrozen',
        TMode
      > & { functionName?: 'emitMintsFrozen' }
    : UseContractWriteConfig<
        typeof iObservabilityABI,
        'emitMintsFrozen',
        TMode
      > & {
        abi?: never
        functionName?: 'emitMintsFrozen'
      } = {} as any,
) {
  return useContractWrite<typeof iObservabilityABI, 'emitMintsFrozen', TMode>({
    abi: iObservabilityABI,
    functionName: 'emitMintsFrozen',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iObservabilityABI}__ and `functionName` set to `"emitMultipleEditionsDeployed"`.
 */
export function useIObservabilityEmitMultipleEditionsDeployed<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iObservabilityABI,
          'emitMultipleEditionsDeployed'
        >['request']['abi'],
        'emitMultipleEditionsDeployed',
        TMode
      > & { functionName?: 'emitMultipleEditionsDeployed' }
    : UseContractWriteConfig<
        typeof iObservabilityABI,
        'emitMultipleEditionsDeployed',
        TMode
      > & {
        abi?: never
        functionName?: 'emitMultipleEditionsDeployed'
      } = {} as any,
) {
  return useContractWrite<
    typeof iObservabilityABI,
    'emitMultipleEditionsDeployed',
    TMode
  >({
    abi: iObservabilityABI,
    functionName: 'emitMultipleEditionsDeployed',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iObservabilityABI}__ and `functionName` set to `"emitRevealed"`.
 */
export function useIObservabilityEmitRevealed<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iObservabilityABI,
          'emitRevealed'
        >['request']['abi'],
        'emitRevealed',
        TMode
      > & { functionName?: 'emitRevealed' }
    : UseContractWriteConfig<
        typeof iObservabilityABI,
        'emitRevealed',
        TMode
      > & {
        abi?: never
        functionName?: 'emitRevealed'
      } = {} as any,
) {
  return useContractWrite<typeof iObservabilityABI, 'emitRevealed', TMode>({
    abi: iObservabilityABI,
    functionName: 'emitRevealed',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iObservabilityABI}__ and `functionName` set to `"emitRoyaltyManagerChanged"`.
 */
export function useIObservabilityEmitRoyaltyManagerChanged<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iObservabilityABI,
          'emitRoyaltyManagerChanged'
        >['request']['abi'],
        'emitRoyaltyManagerChanged',
        TMode
      > & { functionName?: 'emitRoyaltyManagerChanged' }
    : UseContractWriteConfig<
        typeof iObservabilityABI,
        'emitRoyaltyManagerChanged',
        TMode
      > & {
        abi?: never
        functionName?: 'emitRoyaltyManagerChanged'
      } = {} as any,
) {
  return useContractWrite<
    typeof iObservabilityABI,
    'emitRoyaltyManagerChanged',
    TMode
  >({
    abi: iObservabilityABI,
    functionName: 'emitRoyaltyManagerChanged',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iObservabilityABI}__ and `functionName` set to `"emitSeriesDeployed"`.
 */
export function useIObservabilityEmitSeriesDeployed<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iObservabilityABI,
          'emitSeriesDeployed'
        >['request']['abi'],
        'emitSeriesDeployed',
        TMode
      > & { functionName?: 'emitSeriesDeployed' }
    : UseContractWriteConfig<
        typeof iObservabilityABI,
        'emitSeriesDeployed',
        TMode
      > & {
        abi?: never
        functionName?: 'emitSeriesDeployed'
      } = {} as any,
) {
  return useContractWrite<
    typeof iObservabilityABI,
    'emitSeriesDeployed',
    TMode
  >({
    abi: iObservabilityABI,
    functionName: 'emitSeriesDeployed',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iObservabilityABI}__ and `functionName` set to `"emitSingleEditionDeployed"`.
 */
export function useIObservabilityEmitSingleEditionDeployed<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iObservabilityABI,
          'emitSingleEditionDeployed'
        >['request']['abi'],
        'emitSingleEditionDeployed',
        TMode
      > & { functionName?: 'emitSingleEditionDeployed' }
    : UseContractWriteConfig<
        typeof iObservabilityABI,
        'emitSingleEditionDeployed',
        TMode
      > & {
        abi?: never
        functionName?: 'emitSingleEditionDeployed'
      } = {} as any,
) {
  return useContractWrite<
    typeof iObservabilityABI,
    'emitSingleEditionDeployed',
    TMode
  >({
    abi: iObservabilityABI,
    functionName: 'emitSingleEditionDeployed',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iObservabilityABI}__ and `functionName` set to `"emitTokenURIsSet"`.
 */
export function useIObservabilityEmitTokenUrIsSet<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iObservabilityABI,
          'emitTokenURIsSet'
        >['request']['abi'],
        'emitTokenURIsSet',
        TMode
      > & { functionName?: 'emitTokenURIsSet' }
    : UseContractWriteConfig<
        typeof iObservabilityABI,
        'emitTokenURIsSet',
        TMode
      > & {
        abi?: never
        functionName?: 'emitTokenURIsSet'
      } = {} as any,
) {
  return useContractWrite<typeof iObservabilityABI, 'emitTokenURIsSet', TMode>({
    abi: iObservabilityABI,
    functionName: 'emitTokenURIsSet',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iObservabilityABI}__ and `functionName` set to `"emitTransfer"`.
 */
export function useIObservabilityEmitTransfer<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iObservabilityABI,
          'emitTransfer'
        >['request']['abi'],
        'emitTransfer',
        TMode
      > & { functionName?: 'emitTransfer' }
    : UseContractWriteConfig<
        typeof iObservabilityABI,
        'emitTransfer',
        TMode
      > & {
        abi?: never
        functionName?: 'emitTransfer'
      } = {} as any,
) {
  return useContractWrite<typeof iObservabilityABI, 'emitTransfer', TMode>({
    abi: iObservabilityABI,
    functionName: 'emitTransfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iObservabilityABI}__.
 */
export function usePrepareIObservabilityWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iObservabilityABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iObservabilityABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iObservabilityABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iObservabilityABI}__ and `functionName` set to `"emitBaseUriSet"`.
 */
export function usePrepareIObservabilityEmitBaseUriSet(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iObservabilityABI, 'emitBaseUriSet'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iObservabilityABI,
    functionName: 'emitBaseUriSet',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iObservabilityABI,
    'emitBaseUriSet'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iObservabilityABI}__ and `functionName` set to `"emitContractMetadataSet"`.
 */
export function usePrepareIObservabilityEmitContractMetadataSet(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iObservabilityABI,
      'emitContractMetadataSet'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iObservabilityABI,
    functionName: 'emitContractMetadataSet',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iObservabilityABI,
    'emitContractMetadataSet'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iObservabilityABI}__ and `functionName` set to `"emitDefaultRoyaltySet"`.
 */
export function usePrepareIObservabilityEmitDefaultRoyaltySet(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iObservabilityABI,
      'emitDefaultRoyaltySet'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iObservabilityABI,
    functionName: 'emitDefaultRoyaltySet',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iObservabilityABI,
    'emitDefaultRoyaltySet'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iObservabilityABI}__ and `functionName` set to `"emitDefaultTokenManagerChanged"`.
 */
export function usePrepareIObservabilityEmitDefaultTokenManagerChanged(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iObservabilityABI,
      'emitDefaultTokenManagerChanged'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iObservabilityABI,
    functionName: 'emitDefaultTokenManagerChanged',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iObservabilityABI,
    'emitDefaultTokenManagerChanged'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iObservabilityABI}__ and `functionName` set to `"emitGenerativeSeriesDeployed"`.
 */
export function usePrepareIObservabilityEmitGenerativeSeriesDeployed(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iObservabilityABI,
      'emitGenerativeSeriesDeployed'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iObservabilityABI,
    functionName: 'emitGenerativeSeriesDeployed',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iObservabilityABI,
    'emitGenerativeSeriesDeployed'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iObservabilityABI}__ and `functionName` set to `"emitGranularRoyaltiesSet"`.
 */
export function usePrepareIObservabilityEmitGranularRoyaltiesSet(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iObservabilityABI,
      'emitGranularRoyaltiesSet'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iObservabilityABI,
    functionName: 'emitGranularRoyaltiesSet',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iObservabilityABI,
    'emitGranularRoyaltiesSet'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iObservabilityABI}__ and `functionName` set to `"emitGranularTokenManagersRemoved"`.
 */
export function usePrepareIObservabilityEmitGranularTokenManagersRemoved(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iObservabilityABI,
      'emitGranularTokenManagersRemoved'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iObservabilityABI,
    functionName: 'emitGranularTokenManagersRemoved',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iObservabilityABI,
    'emitGranularTokenManagersRemoved'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iObservabilityABI}__ and `functionName` set to `"emitGranularTokenManagersSet"`.
 */
export function usePrepareIObservabilityEmitGranularTokenManagersSet(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iObservabilityABI,
      'emitGranularTokenManagersSet'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iObservabilityABI,
    functionName: 'emitGranularTokenManagersSet',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iObservabilityABI,
    'emitGranularTokenManagersSet'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iObservabilityABI}__ and `functionName` set to `"emitHashedMetadataConfigSet"`.
 */
export function usePrepareIObservabilityEmitHashedMetadataConfigSet(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iObservabilityABI,
      'emitHashedMetadataConfigSet'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iObservabilityABI,
    functionName: 'emitHashedMetadataConfigSet',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iObservabilityABI,
    'emitHashedMetadataConfigSet'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iObservabilityABI}__ and `functionName` set to `"emitLimitSupplySet"`.
 */
export function usePrepareIObservabilityEmitLimitSupplySet(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iObservabilityABI,
      'emitLimitSupplySet'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iObservabilityABI,
    functionName: 'emitLimitSupplySet',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iObservabilityABI,
    'emitLimitSupplySet'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iObservabilityABI}__ and `functionName` set to `"emitMinterRegistrationChanged"`.
 */
export function usePrepareIObservabilityEmitMinterRegistrationChanged(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iObservabilityABI,
      'emitMinterRegistrationChanged'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iObservabilityABI,
    functionName: 'emitMinterRegistrationChanged',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iObservabilityABI,
    'emitMinterRegistrationChanged'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iObservabilityABI}__ and `functionName` set to `"emitMintsFrozen"`.
 */
export function usePrepareIObservabilityEmitMintsFrozen(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iObservabilityABI, 'emitMintsFrozen'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iObservabilityABI,
    functionName: 'emitMintsFrozen',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iObservabilityABI,
    'emitMintsFrozen'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iObservabilityABI}__ and `functionName` set to `"emitMultipleEditionsDeployed"`.
 */
export function usePrepareIObservabilityEmitMultipleEditionsDeployed(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iObservabilityABI,
      'emitMultipleEditionsDeployed'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iObservabilityABI,
    functionName: 'emitMultipleEditionsDeployed',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iObservabilityABI,
    'emitMultipleEditionsDeployed'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iObservabilityABI}__ and `functionName` set to `"emitRevealed"`.
 */
export function usePrepareIObservabilityEmitRevealed(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iObservabilityABI, 'emitRevealed'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iObservabilityABI,
    functionName: 'emitRevealed',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iObservabilityABI, 'emitRevealed'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iObservabilityABI}__ and `functionName` set to `"emitRoyaltyManagerChanged"`.
 */
export function usePrepareIObservabilityEmitRoyaltyManagerChanged(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iObservabilityABI,
      'emitRoyaltyManagerChanged'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iObservabilityABI,
    functionName: 'emitRoyaltyManagerChanged',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iObservabilityABI,
    'emitRoyaltyManagerChanged'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iObservabilityABI}__ and `functionName` set to `"emitSeriesDeployed"`.
 */
export function usePrepareIObservabilityEmitSeriesDeployed(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iObservabilityABI,
      'emitSeriesDeployed'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iObservabilityABI,
    functionName: 'emitSeriesDeployed',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iObservabilityABI,
    'emitSeriesDeployed'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iObservabilityABI}__ and `functionName` set to `"emitSingleEditionDeployed"`.
 */
export function usePrepareIObservabilityEmitSingleEditionDeployed(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iObservabilityABI,
      'emitSingleEditionDeployed'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iObservabilityABI,
    functionName: 'emitSingleEditionDeployed',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iObservabilityABI,
    'emitSingleEditionDeployed'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iObservabilityABI}__ and `functionName` set to `"emitTokenURIsSet"`.
 */
export function usePrepareIObservabilityEmitTokenUrIsSet(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iObservabilityABI, 'emitTokenURIsSet'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iObservabilityABI,
    functionName: 'emitTokenURIsSet',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iObservabilityABI,
    'emitTokenURIsSet'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iObservabilityABI}__ and `functionName` set to `"emitTransfer"`.
 */
export function usePrepareIObservabilityEmitTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iObservabilityABI, 'emitTransfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iObservabilityABI,
    functionName: 'emitTransfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iObservabilityABI, 'emitTransfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iObservabilityABI}__.
 */
export function useIObservabilityEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iObservabilityABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iObservabilityABI,
    ...config,
  } as UseContractEventConfig<typeof iObservabilityABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iObservabilityABI}__ and `eventName` set to `"BaseUriSet"`.
 */
export function useIObservabilityBaseUriSetEvent(
  config: Omit<
    UseContractEventConfig<typeof iObservabilityABI, 'BaseUriSet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iObservabilityABI,
    eventName: 'BaseUriSet',
    ...config,
  } as UseContractEventConfig<typeof iObservabilityABI, 'BaseUriSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iObservabilityABI}__ and `eventName` set to `"ContractMetadataSet"`.
 */
export function useIObservabilityContractMetadataSetEvent(
  config: Omit<
    UseContractEventConfig<typeof iObservabilityABI, 'ContractMetadataSet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iObservabilityABI,
    eventName: 'ContractMetadataSet',
    ...config,
  } as UseContractEventConfig<typeof iObservabilityABI, 'ContractMetadataSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iObservabilityABI}__ and `eventName` set to `"DefaultRoyaltySet"`.
 */
export function useIObservabilityDefaultRoyaltySetEvent(
  config: Omit<
    UseContractEventConfig<typeof iObservabilityABI, 'DefaultRoyaltySet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iObservabilityABI,
    eventName: 'DefaultRoyaltySet',
    ...config,
  } as UseContractEventConfig<typeof iObservabilityABI, 'DefaultRoyaltySet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iObservabilityABI}__ and `eventName` set to `"DefaultTokenManagerChanged"`.
 */
export function useIObservabilityDefaultTokenManagerChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iObservabilityABI,
      'DefaultTokenManagerChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iObservabilityABI,
    eventName: 'DefaultTokenManagerChanged',
    ...config,
  } as UseContractEventConfig<
    typeof iObservabilityABI,
    'DefaultTokenManagerChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iObservabilityABI}__ and `eventName` set to `"GenerativeSeriesDeployed"`.
 */
export function useIObservabilityGenerativeSeriesDeployedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iObservabilityABI,
      'GenerativeSeriesDeployed'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iObservabilityABI,
    eventName: 'GenerativeSeriesDeployed',
    ...config,
  } as UseContractEventConfig<
    typeof iObservabilityABI,
    'GenerativeSeriesDeployed'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iObservabilityABI}__ and `eventName` set to `"GranularRoyaltiesSet"`.
 */
export function useIObservabilityGranularRoyaltiesSetEvent(
  config: Omit<
    UseContractEventConfig<typeof iObservabilityABI, 'GranularRoyaltiesSet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iObservabilityABI,
    eventName: 'GranularRoyaltiesSet',
    ...config,
  } as UseContractEventConfig<typeof iObservabilityABI, 'GranularRoyaltiesSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iObservabilityABI}__ and `eventName` set to `"GranularTokenManagersRemoved"`.
 */
export function useIObservabilityGranularTokenManagersRemovedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iObservabilityABI,
      'GranularTokenManagersRemoved'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iObservabilityABI,
    eventName: 'GranularTokenManagersRemoved',
    ...config,
  } as UseContractEventConfig<
    typeof iObservabilityABI,
    'GranularTokenManagersRemoved'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iObservabilityABI}__ and `eventName` set to `"GranularTokenManagersSet"`.
 */
export function useIObservabilityGranularTokenManagersSetEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iObservabilityABI,
      'GranularTokenManagersSet'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iObservabilityABI,
    eventName: 'GranularTokenManagersSet',
    ...config,
  } as UseContractEventConfig<
    typeof iObservabilityABI,
    'GranularTokenManagersSet'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iObservabilityABI}__ and `eventName` set to `"HashedMetadataConfigSet"`.
 */
export function useIObservabilityHashedMetadataConfigSetEvent(
  config: Omit<
    UseContractEventConfig<typeof iObservabilityABI, 'HashedMetadataConfigSet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iObservabilityABI,
    eventName: 'HashedMetadataConfigSet',
    ...config,
  } as UseContractEventConfig<
    typeof iObservabilityABI,
    'HashedMetadataConfigSet'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iObservabilityABI}__ and `eventName` set to `"LimitSupplySet"`.
 */
export function useIObservabilityLimitSupplySetEvent(
  config: Omit<
    UseContractEventConfig<typeof iObservabilityABI, 'LimitSupplySet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iObservabilityABI,
    eventName: 'LimitSupplySet',
    ...config,
  } as UseContractEventConfig<typeof iObservabilityABI, 'LimitSupplySet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iObservabilityABI}__ and `eventName` set to `"MinterRegistrationChanged"`.
 */
export function useIObservabilityMinterRegistrationChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iObservabilityABI,
      'MinterRegistrationChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iObservabilityABI,
    eventName: 'MinterRegistrationChanged',
    ...config,
  } as UseContractEventConfig<
    typeof iObservabilityABI,
    'MinterRegistrationChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iObservabilityABI}__ and `eventName` set to `"MintsFrozen"`.
 */
export function useIObservabilityMintsFrozenEvent(
  config: Omit<
    UseContractEventConfig<typeof iObservabilityABI, 'MintsFrozen'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iObservabilityABI,
    eventName: 'MintsFrozen',
    ...config,
  } as UseContractEventConfig<typeof iObservabilityABI, 'MintsFrozen'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iObservabilityABI}__ and `eventName` set to `"MultipleEditionsDeployed"`.
 */
export function useIObservabilityMultipleEditionsDeployedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iObservabilityABI,
      'MultipleEditionsDeployed'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iObservabilityABI,
    eventName: 'MultipleEditionsDeployed',
    ...config,
  } as UseContractEventConfig<
    typeof iObservabilityABI,
    'MultipleEditionsDeployed'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iObservabilityABI}__ and `eventName` set to `"Revealed"`.
 */
export function useIObservabilityRevealedEvent(
  config: Omit<
    UseContractEventConfig<typeof iObservabilityABI, 'Revealed'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iObservabilityABI,
    eventName: 'Revealed',
    ...config,
  } as UseContractEventConfig<typeof iObservabilityABI, 'Revealed'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iObservabilityABI}__ and `eventName` set to `"RoyaltyManagerChanged"`.
 */
export function useIObservabilityRoyaltyManagerChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof iObservabilityABI, 'RoyaltyManagerChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iObservabilityABI,
    eventName: 'RoyaltyManagerChanged',
    ...config,
  } as UseContractEventConfig<
    typeof iObservabilityABI,
    'RoyaltyManagerChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iObservabilityABI}__ and `eventName` set to `"SeriesDeployed"`.
 */
export function useIObservabilitySeriesDeployedEvent(
  config: Omit<
    UseContractEventConfig<typeof iObservabilityABI, 'SeriesDeployed'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iObservabilityABI,
    eventName: 'SeriesDeployed',
    ...config,
  } as UseContractEventConfig<typeof iObservabilityABI, 'SeriesDeployed'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iObservabilityABI}__ and `eventName` set to `"SingleEditionDeployed"`.
 */
export function useIObservabilitySingleEditionDeployedEvent(
  config: Omit<
    UseContractEventConfig<typeof iObservabilityABI, 'SingleEditionDeployed'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iObservabilityABI,
    eventName: 'SingleEditionDeployed',
    ...config,
  } as UseContractEventConfig<
    typeof iObservabilityABI,
    'SingleEditionDeployed'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iObservabilityABI}__ and `eventName` set to `"TokenURIsSet"`.
 */
export function useIObservabilityTokenUrIsSetEvent(
  config: Omit<
    UseContractEventConfig<typeof iObservabilityABI, 'TokenURIsSet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iObservabilityABI,
    eventName: 'TokenURIsSet',
    ...config,
  } as UseContractEventConfig<typeof iObservabilityABI, 'TokenURIsSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iObservabilityABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIObservabilityTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof iObservabilityABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iObservabilityABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof iObservabilityABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPaymasterABI}__.
 */
export function useIPaymasterRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iPaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iPaymasterABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iPaymasterABI,
    ...config,
  } as UseContractReadConfig<typeof iPaymasterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPaymasterABI}__ and `functionName` set to `"getGasAndDataLimits"`.
 */
export function useIPaymasterGetGasAndDataLimits<
  TFunctionName extends 'getGasAndDataLimits',
  TSelectData = ReadContractResult<typeof iPaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iPaymasterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPaymasterABI,
    functionName: 'getGasAndDataLimits',
    ...config,
  } as UseContractReadConfig<typeof iPaymasterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPaymasterABI}__ and `functionName` set to `"getRelayHub"`.
 */
export function useIPaymasterGetRelayHub<
  TFunctionName extends 'getRelayHub',
  TSelectData = ReadContractResult<typeof iPaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iPaymasterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPaymasterABI,
    functionName: 'getRelayHub',
    ...config,
  } as UseContractReadConfig<typeof iPaymasterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPaymasterABI}__ and `functionName` set to `"getTrustedForwarder"`.
 */
export function useIPaymasterGetTrustedForwarder<
  TFunctionName extends 'getTrustedForwarder',
  TSelectData = ReadContractResult<typeof iPaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iPaymasterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPaymasterABI,
    functionName: 'getTrustedForwarder',
    ...config,
  } as UseContractReadConfig<typeof iPaymasterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPaymasterABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIPaymasterSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof iPaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iPaymasterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPaymasterABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof iPaymasterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPaymasterABI}__ and `functionName` set to `"versionPaymaster"`.
 */
export function useIPaymasterVersionPaymaster<
  TFunctionName extends 'versionPaymaster',
  TSelectData = ReadContractResult<typeof iPaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iPaymasterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPaymasterABI,
    functionName: 'versionPaymaster',
    ...config,
  } as UseContractReadConfig<typeof iPaymasterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPaymasterABI}__.
 */
export function useIPaymasterWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iPaymasterABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iPaymasterABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iPaymasterABI, TFunctionName, TMode>({
    abi: iPaymasterABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPaymasterABI}__ and `functionName` set to `"postRelayedCall"`.
 */
export function useIPaymasterPostRelayedCall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iPaymasterABI,
          'postRelayedCall'
        >['request']['abi'],
        'postRelayedCall',
        TMode
      > & { functionName?: 'postRelayedCall' }
    : UseContractWriteConfig<typeof iPaymasterABI, 'postRelayedCall', TMode> & {
        abi?: never
        functionName?: 'postRelayedCall'
      } = {} as any,
) {
  return useContractWrite<typeof iPaymasterABI, 'postRelayedCall', TMode>({
    abi: iPaymasterABI,
    functionName: 'postRelayedCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPaymasterABI}__ and `functionName` set to `"preRelayedCall"`.
 */
export function useIPaymasterPreRelayedCall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iPaymasterABI,
          'preRelayedCall'
        >['request']['abi'],
        'preRelayedCall',
        TMode
      > & { functionName?: 'preRelayedCall' }
    : UseContractWriteConfig<typeof iPaymasterABI, 'preRelayedCall', TMode> & {
        abi?: never
        functionName?: 'preRelayedCall'
      } = {} as any,
) {
  return useContractWrite<typeof iPaymasterABI, 'preRelayedCall', TMode>({
    abi: iPaymasterABI,
    functionName: 'preRelayedCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPaymasterABI}__.
 */
export function usePrepareIPaymasterWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPaymasterABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPaymasterABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPaymasterABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPaymasterABI}__ and `functionName` set to `"postRelayedCall"`.
 */
export function usePrepareIPaymasterPostRelayedCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPaymasterABI, 'postRelayedCall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPaymasterABI,
    functionName: 'postRelayedCall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPaymasterABI, 'postRelayedCall'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPaymasterABI}__ and `functionName` set to `"preRelayedCall"`.
 */
export function usePrepareIPaymasterPreRelayedCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPaymasterABI, 'preRelayedCall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPaymasterABI,
    functionName: 'preRelayedCall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPaymasterABI, 'preRelayedCall'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__.
 */
export function useIOperatorFilterRegistryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof iOperatorFilterRegistryABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iOperatorFilterRegistryABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iOperatorFilterRegistryABI,
    ...config,
  } as UseContractReadConfig<
    typeof iOperatorFilterRegistryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__ and `functionName` set to `"isOperatorAllowed"`.
 */
export function useIOperatorFilterRegistryIsOperatorAllowed<
  TFunctionName extends 'isOperatorAllowed',
  TSelectData = ReadContractResult<
    typeof iOperatorFilterRegistryABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iOperatorFilterRegistryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iOperatorFilterRegistryABI,
    functionName: 'isOperatorAllowed',
    ...config,
  } as UseContractReadConfig<
    typeof iOperatorFilterRegistryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__.
 */
export function useIOperatorFilterRegistryWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iOperatorFilterRegistryABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof iOperatorFilterRegistryABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    typeof iOperatorFilterRegistryABI,
    TFunctionName,
    TMode
  >({ abi: iOperatorFilterRegistryABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__ and `functionName` set to `"codeHashOf"`.
 */
export function useIOperatorFilterRegistryCodeHashOf<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iOperatorFilterRegistryABI,
          'codeHashOf'
        >['request']['abi'],
        'codeHashOf',
        TMode
      > & { functionName?: 'codeHashOf' }
    : UseContractWriteConfig<
        typeof iOperatorFilterRegistryABI,
        'codeHashOf',
        TMode
      > & {
        abi?: never
        functionName?: 'codeHashOf'
      } = {} as any,
) {
  return useContractWrite<
    typeof iOperatorFilterRegistryABI,
    'codeHashOf',
    TMode
  >({
    abi: iOperatorFilterRegistryABI,
    functionName: 'codeHashOf',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__ and `functionName` set to `"copyEntriesOf"`.
 */
export function useIOperatorFilterRegistryCopyEntriesOf<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iOperatorFilterRegistryABI,
          'copyEntriesOf'
        >['request']['abi'],
        'copyEntriesOf',
        TMode
      > & { functionName?: 'copyEntriesOf' }
    : UseContractWriteConfig<
        typeof iOperatorFilterRegistryABI,
        'copyEntriesOf',
        TMode
      > & {
        abi?: never
        functionName?: 'copyEntriesOf'
      } = {} as any,
) {
  return useContractWrite<
    typeof iOperatorFilterRegistryABI,
    'copyEntriesOf',
    TMode
  >({
    abi: iOperatorFilterRegistryABI,
    functionName: 'copyEntriesOf',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__ and `functionName` set to `"filteredCodeHashAt"`.
 */
export function useIOperatorFilterRegistryFilteredCodeHashAt<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iOperatorFilterRegistryABI,
          'filteredCodeHashAt'
        >['request']['abi'],
        'filteredCodeHashAt',
        TMode
      > & { functionName?: 'filteredCodeHashAt' }
    : UseContractWriteConfig<
        typeof iOperatorFilterRegistryABI,
        'filteredCodeHashAt',
        TMode
      > & {
        abi?: never
        functionName?: 'filteredCodeHashAt'
      } = {} as any,
) {
  return useContractWrite<
    typeof iOperatorFilterRegistryABI,
    'filteredCodeHashAt',
    TMode
  >({
    abi: iOperatorFilterRegistryABI,
    functionName: 'filteredCodeHashAt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__ and `functionName` set to `"filteredCodeHashes"`.
 */
export function useIOperatorFilterRegistryFilteredCodeHashes<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iOperatorFilterRegistryABI,
          'filteredCodeHashes'
        >['request']['abi'],
        'filteredCodeHashes',
        TMode
      > & { functionName?: 'filteredCodeHashes' }
    : UseContractWriteConfig<
        typeof iOperatorFilterRegistryABI,
        'filteredCodeHashes',
        TMode
      > & {
        abi?: never
        functionName?: 'filteredCodeHashes'
      } = {} as any,
) {
  return useContractWrite<
    typeof iOperatorFilterRegistryABI,
    'filteredCodeHashes',
    TMode
  >({
    abi: iOperatorFilterRegistryABI,
    functionName: 'filteredCodeHashes',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__ and `functionName` set to `"filteredOperatorAt"`.
 */
export function useIOperatorFilterRegistryFilteredOperatorAt<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iOperatorFilterRegistryABI,
          'filteredOperatorAt'
        >['request']['abi'],
        'filteredOperatorAt',
        TMode
      > & { functionName?: 'filteredOperatorAt' }
    : UseContractWriteConfig<
        typeof iOperatorFilterRegistryABI,
        'filteredOperatorAt',
        TMode
      > & {
        abi?: never
        functionName?: 'filteredOperatorAt'
      } = {} as any,
) {
  return useContractWrite<
    typeof iOperatorFilterRegistryABI,
    'filteredOperatorAt',
    TMode
  >({
    abi: iOperatorFilterRegistryABI,
    functionName: 'filteredOperatorAt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__ and `functionName` set to `"filteredOperators"`.
 */
export function useIOperatorFilterRegistryFilteredOperators<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iOperatorFilterRegistryABI,
          'filteredOperators'
        >['request']['abi'],
        'filteredOperators',
        TMode
      > & { functionName?: 'filteredOperators' }
    : UseContractWriteConfig<
        typeof iOperatorFilterRegistryABI,
        'filteredOperators',
        TMode
      > & {
        abi?: never
        functionName?: 'filteredOperators'
      } = {} as any,
) {
  return useContractWrite<
    typeof iOperatorFilterRegistryABI,
    'filteredOperators',
    TMode
  >({
    abi: iOperatorFilterRegistryABI,
    functionName: 'filteredOperators',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__ and `functionName` set to `"isCodeHashFiltered"`.
 */
export function useIOperatorFilterRegistryIsCodeHashFiltered<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iOperatorFilterRegistryABI,
          'isCodeHashFiltered'
        >['request']['abi'],
        'isCodeHashFiltered',
        TMode
      > & { functionName?: 'isCodeHashFiltered' }
    : UseContractWriteConfig<
        typeof iOperatorFilterRegistryABI,
        'isCodeHashFiltered',
        TMode
      > & {
        abi?: never
        functionName?: 'isCodeHashFiltered'
      } = {} as any,
) {
  return useContractWrite<
    typeof iOperatorFilterRegistryABI,
    'isCodeHashFiltered',
    TMode
  >({
    abi: iOperatorFilterRegistryABI,
    functionName: 'isCodeHashFiltered',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__ and `functionName` set to `"isCodeHashOfFiltered"`.
 */
export function useIOperatorFilterRegistryIsCodeHashOfFiltered<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iOperatorFilterRegistryABI,
          'isCodeHashOfFiltered'
        >['request']['abi'],
        'isCodeHashOfFiltered',
        TMode
      > & { functionName?: 'isCodeHashOfFiltered' }
    : UseContractWriteConfig<
        typeof iOperatorFilterRegistryABI,
        'isCodeHashOfFiltered',
        TMode
      > & {
        abi?: never
        functionName?: 'isCodeHashOfFiltered'
      } = {} as any,
) {
  return useContractWrite<
    typeof iOperatorFilterRegistryABI,
    'isCodeHashOfFiltered',
    TMode
  >({
    abi: iOperatorFilterRegistryABI,
    functionName: 'isCodeHashOfFiltered',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__ and `functionName` set to `"isOperatorFiltered"`.
 */
export function useIOperatorFilterRegistryIsOperatorFiltered<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iOperatorFilterRegistryABI,
          'isOperatorFiltered'
        >['request']['abi'],
        'isOperatorFiltered',
        TMode
      > & { functionName?: 'isOperatorFiltered' }
    : UseContractWriteConfig<
        typeof iOperatorFilterRegistryABI,
        'isOperatorFiltered',
        TMode
      > & {
        abi?: never
        functionName?: 'isOperatorFiltered'
      } = {} as any,
) {
  return useContractWrite<
    typeof iOperatorFilterRegistryABI,
    'isOperatorFiltered',
    TMode
  >({
    abi: iOperatorFilterRegistryABI,
    functionName: 'isOperatorFiltered',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__ and `functionName` set to `"isRegistered"`.
 */
export function useIOperatorFilterRegistryIsRegistered<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iOperatorFilterRegistryABI,
          'isRegistered'
        >['request']['abi'],
        'isRegistered',
        TMode
      > & { functionName?: 'isRegistered' }
    : UseContractWriteConfig<
        typeof iOperatorFilterRegistryABI,
        'isRegistered',
        TMode
      > & {
        abi?: never
        functionName?: 'isRegistered'
      } = {} as any,
) {
  return useContractWrite<
    typeof iOperatorFilterRegistryABI,
    'isRegistered',
    TMode
  >({
    abi: iOperatorFilterRegistryABI,
    functionName: 'isRegistered',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__ and `functionName` set to `"register"`.
 */
export function useIOperatorFilterRegistryRegister<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iOperatorFilterRegistryABI,
          'register'
        >['request']['abi'],
        'register',
        TMode
      > & { functionName?: 'register' }
    : UseContractWriteConfig<
        typeof iOperatorFilterRegistryABI,
        'register',
        TMode
      > & {
        abi?: never
        functionName?: 'register'
      } = {} as any,
) {
  return useContractWrite<typeof iOperatorFilterRegistryABI, 'register', TMode>(
    {
      abi: iOperatorFilterRegistryABI,
      functionName: 'register',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__ and `functionName` set to `"registerAndCopyEntries"`.
 */
export function useIOperatorFilterRegistryRegisterAndCopyEntries<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iOperatorFilterRegistryABI,
          'registerAndCopyEntries'
        >['request']['abi'],
        'registerAndCopyEntries',
        TMode
      > & { functionName?: 'registerAndCopyEntries' }
    : UseContractWriteConfig<
        typeof iOperatorFilterRegistryABI,
        'registerAndCopyEntries',
        TMode
      > & {
        abi?: never
        functionName?: 'registerAndCopyEntries'
      } = {} as any,
) {
  return useContractWrite<
    typeof iOperatorFilterRegistryABI,
    'registerAndCopyEntries',
    TMode
  >({
    abi: iOperatorFilterRegistryABI,
    functionName: 'registerAndCopyEntries',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__ and `functionName` set to `"registerAndSubscribe"`.
 */
export function useIOperatorFilterRegistryRegisterAndSubscribe<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iOperatorFilterRegistryABI,
          'registerAndSubscribe'
        >['request']['abi'],
        'registerAndSubscribe',
        TMode
      > & { functionName?: 'registerAndSubscribe' }
    : UseContractWriteConfig<
        typeof iOperatorFilterRegistryABI,
        'registerAndSubscribe',
        TMode
      > & {
        abi?: never
        functionName?: 'registerAndSubscribe'
      } = {} as any,
) {
  return useContractWrite<
    typeof iOperatorFilterRegistryABI,
    'registerAndSubscribe',
    TMode
  >({
    abi: iOperatorFilterRegistryABI,
    functionName: 'registerAndSubscribe',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__ and `functionName` set to `"subscribe"`.
 */
export function useIOperatorFilterRegistrySubscribe<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iOperatorFilterRegistryABI,
          'subscribe'
        >['request']['abi'],
        'subscribe',
        TMode
      > & { functionName?: 'subscribe' }
    : UseContractWriteConfig<
        typeof iOperatorFilterRegistryABI,
        'subscribe',
        TMode
      > & {
        abi?: never
        functionName?: 'subscribe'
      } = {} as any,
) {
  return useContractWrite<
    typeof iOperatorFilterRegistryABI,
    'subscribe',
    TMode
  >({
    abi: iOperatorFilterRegistryABI,
    functionName: 'subscribe',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__ and `functionName` set to `"subscriberAt"`.
 */
export function useIOperatorFilterRegistrySubscriberAt<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iOperatorFilterRegistryABI,
          'subscriberAt'
        >['request']['abi'],
        'subscriberAt',
        TMode
      > & { functionName?: 'subscriberAt' }
    : UseContractWriteConfig<
        typeof iOperatorFilterRegistryABI,
        'subscriberAt',
        TMode
      > & {
        abi?: never
        functionName?: 'subscriberAt'
      } = {} as any,
) {
  return useContractWrite<
    typeof iOperatorFilterRegistryABI,
    'subscriberAt',
    TMode
  >({
    abi: iOperatorFilterRegistryABI,
    functionName: 'subscriberAt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__ and `functionName` set to `"subscribers"`.
 */
export function useIOperatorFilterRegistrySubscribers<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iOperatorFilterRegistryABI,
          'subscribers'
        >['request']['abi'],
        'subscribers',
        TMode
      > & { functionName?: 'subscribers' }
    : UseContractWriteConfig<
        typeof iOperatorFilterRegistryABI,
        'subscribers',
        TMode
      > & {
        abi?: never
        functionName?: 'subscribers'
      } = {} as any,
) {
  return useContractWrite<
    typeof iOperatorFilterRegistryABI,
    'subscribers',
    TMode
  >({
    abi: iOperatorFilterRegistryABI,
    functionName: 'subscribers',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__ and `functionName` set to `"subscriptionOf"`.
 */
export function useIOperatorFilterRegistrySubscriptionOf<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iOperatorFilterRegistryABI,
          'subscriptionOf'
        >['request']['abi'],
        'subscriptionOf',
        TMode
      > & { functionName?: 'subscriptionOf' }
    : UseContractWriteConfig<
        typeof iOperatorFilterRegistryABI,
        'subscriptionOf',
        TMode
      > & {
        abi?: never
        functionName?: 'subscriptionOf'
      } = {} as any,
) {
  return useContractWrite<
    typeof iOperatorFilterRegistryABI,
    'subscriptionOf',
    TMode
  >({
    abi: iOperatorFilterRegistryABI,
    functionName: 'subscriptionOf',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__ and `functionName` set to `"unregister"`.
 */
export function useIOperatorFilterRegistryUnregister<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iOperatorFilterRegistryABI,
          'unregister'
        >['request']['abi'],
        'unregister',
        TMode
      > & { functionName?: 'unregister' }
    : UseContractWriteConfig<
        typeof iOperatorFilterRegistryABI,
        'unregister',
        TMode
      > & {
        abi?: never
        functionName?: 'unregister'
      } = {} as any,
) {
  return useContractWrite<
    typeof iOperatorFilterRegistryABI,
    'unregister',
    TMode
  >({
    abi: iOperatorFilterRegistryABI,
    functionName: 'unregister',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__ and `functionName` set to `"unsubscribe"`.
 */
export function useIOperatorFilterRegistryUnsubscribe<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iOperatorFilterRegistryABI,
          'unsubscribe'
        >['request']['abi'],
        'unsubscribe',
        TMode
      > & { functionName?: 'unsubscribe' }
    : UseContractWriteConfig<
        typeof iOperatorFilterRegistryABI,
        'unsubscribe',
        TMode
      > & {
        abi?: never
        functionName?: 'unsubscribe'
      } = {} as any,
) {
  return useContractWrite<
    typeof iOperatorFilterRegistryABI,
    'unsubscribe',
    TMode
  >({
    abi: iOperatorFilterRegistryABI,
    functionName: 'unsubscribe',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__ and `functionName` set to `"updateCodeHash"`.
 */
export function useIOperatorFilterRegistryUpdateCodeHash<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iOperatorFilterRegistryABI,
          'updateCodeHash'
        >['request']['abi'],
        'updateCodeHash',
        TMode
      > & { functionName?: 'updateCodeHash' }
    : UseContractWriteConfig<
        typeof iOperatorFilterRegistryABI,
        'updateCodeHash',
        TMode
      > & {
        abi?: never
        functionName?: 'updateCodeHash'
      } = {} as any,
) {
  return useContractWrite<
    typeof iOperatorFilterRegistryABI,
    'updateCodeHash',
    TMode
  >({
    abi: iOperatorFilterRegistryABI,
    functionName: 'updateCodeHash',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__ and `functionName` set to `"updateCodeHashes"`.
 */
export function useIOperatorFilterRegistryUpdateCodeHashes<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iOperatorFilterRegistryABI,
          'updateCodeHashes'
        >['request']['abi'],
        'updateCodeHashes',
        TMode
      > & { functionName?: 'updateCodeHashes' }
    : UseContractWriteConfig<
        typeof iOperatorFilterRegistryABI,
        'updateCodeHashes',
        TMode
      > & {
        abi?: never
        functionName?: 'updateCodeHashes'
      } = {} as any,
) {
  return useContractWrite<
    typeof iOperatorFilterRegistryABI,
    'updateCodeHashes',
    TMode
  >({
    abi: iOperatorFilterRegistryABI,
    functionName: 'updateCodeHashes',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__ and `functionName` set to `"updateOperator"`.
 */
export function useIOperatorFilterRegistryUpdateOperator<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iOperatorFilterRegistryABI,
          'updateOperator'
        >['request']['abi'],
        'updateOperator',
        TMode
      > & { functionName?: 'updateOperator' }
    : UseContractWriteConfig<
        typeof iOperatorFilterRegistryABI,
        'updateOperator',
        TMode
      > & {
        abi?: never
        functionName?: 'updateOperator'
      } = {} as any,
) {
  return useContractWrite<
    typeof iOperatorFilterRegistryABI,
    'updateOperator',
    TMode
  >({
    abi: iOperatorFilterRegistryABI,
    functionName: 'updateOperator',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__ and `functionName` set to `"updateOperators"`.
 */
export function useIOperatorFilterRegistryUpdateOperators<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iOperatorFilterRegistryABI,
          'updateOperators'
        >['request']['abi'],
        'updateOperators',
        TMode
      > & { functionName?: 'updateOperators' }
    : UseContractWriteConfig<
        typeof iOperatorFilterRegistryABI,
        'updateOperators',
        TMode
      > & {
        abi?: never
        functionName?: 'updateOperators'
      } = {} as any,
) {
  return useContractWrite<
    typeof iOperatorFilterRegistryABI,
    'updateOperators',
    TMode
  >({
    abi: iOperatorFilterRegistryABI,
    functionName: 'updateOperators',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__.
 */
export function usePrepareIOperatorFilterRegistryWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iOperatorFilterRegistryABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iOperatorFilterRegistryABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iOperatorFilterRegistryABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__ and `functionName` set to `"codeHashOf"`.
 */
export function usePrepareIOperatorFilterRegistryCodeHashOf(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iOperatorFilterRegistryABI,
      'codeHashOf'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iOperatorFilterRegistryABI,
    functionName: 'codeHashOf',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iOperatorFilterRegistryABI,
    'codeHashOf'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__ and `functionName` set to `"copyEntriesOf"`.
 */
export function usePrepareIOperatorFilterRegistryCopyEntriesOf(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iOperatorFilterRegistryABI,
      'copyEntriesOf'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iOperatorFilterRegistryABI,
    functionName: 'copyEntriesOf',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iOperatorFilterRegistryABI,
    'copyEntriesOf'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__ and `functionName` set to `"filteredCodeHashAt"`.
 */
export function usePrepareIOperatorFilterRegistryFilteredCodeHashAt(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iOperatorFilterRegistryABI,
      'filteredCodeHashAt'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iOperatorFilterRegistryABI,
    functionName: 'filteredCodeHashAt',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iOperatorFilterRegistryABI,
    'filteredCodeHashAt'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__ and `functionName` set to `"filteredCodeHashes"`.
 */
export function usePrepareIOperatorFilterRegistryFilteredCodeHashes(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iOperatorFilterRegistryABI,
      'filteredCodeHashes'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iOperatorFilterRegistryABI,
    functionName: 'filteredCodeHashes',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iOperatorFilterRegistryABI,
    'filteredCodeHashes'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__ and `functionName` set to `"filteredOperatorAt"`.
 */
export function usePrepareIOperatorFilterRegistryFilteredOperatorAt(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iOperatorFilterRegistryABI,
      'filteredOperatorAt'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iOperatorFilterRegistryABI,
    functionName: 'filteredOperatorAt',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iOperatorFilterRegistryABI,
    'filteredOperatorAt'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__ and `functionName` set to `"filteredOperators"`.
 */
export function usePrepareIOperatorFilterRegistryFilteredOperators(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iOperatorFilterRegistryABI,
      'filteredOperators'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iOperatorFilterRegistryABI,
    functionName: 'filteredOperators',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iOperatorFilterRegistryABI,
    'filteredOperators'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__ and `functionName` set to `"isCodeHashFiltered"`.
 */
export function usePrepareIOperatorFilterRegistryIsCodeHashFiltered(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iOperatorFilterRegistryABI,
      'isCodeHashFiltered'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iOperatorFilterRegistryABI,
    functionName: 'isCodeHashFiltered',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iOperatorFilterRegistryABI,
    'isCodeHashFiltered'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__ and `functionName` set to `"isCodeHashOfFiltered"`.
 */
export function usePrepareIOperatorFilterRegistryIsCodeHashOfFiltered(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iOperatorFilterRegistryABI,
      'isCodeHashOfFiltered'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iOperatorFilterRegistryABI,
    functionName: 'isCodeHashOfFiltered',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iOperatorFilterRegistryABI,
    'isCodeHashOfFiltered'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__ and `functionName` set to `"isOperatorFiltered"`.
 */
export function usePrepareIOperatorFilterRegistryIsOperatorFiltered(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iOperatorFilterRegistryABI,
      'isOperatorFiltered'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iOperatorFilterRegistryABI,
    functionName: 'isOperatorFiltered',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iOperatorFilterRegistryABI,
    'isOperatorFiltered'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__ and `functionName` set to `"isRegistered"`.
 */
export function usePrepareIOperatorFilterRegistryIsRegistered(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iOperatorFilterRegistryABI,
      'isRegistered'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iOperatorFilterRegistryABI,
    functionName: 'isRegistered',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iOperatorFilterRegistryABI,
    'isRegistered'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__ and `functionName` set to `"register"`.
 */
export function usePrepareIOperatorFilterRegistryRegister(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iOperatorFilterRegistryABI,
      'register'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iOperatorFilterRegistryABI,
    functionName: 'register',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iOperatorFilterRegistryABI,
    'register'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__ and `functionName` set to `"registerAndCopyEntries"`.
 */
export function usePrepareIOperatorFilterRegistryRegisterAndCopyEntries(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iOperatorFilterRegistryABI,
      'registerAndCopyEntries'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iOperatorFilterRegistryABI,
    functionName: 'registerAndCopyEntries',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iOperatorFilterRegistryABI,
    'registerAndCopyEntries'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__ and `functionName` set to `"registerAndSubscribe"`.
 */
export function usePrepareIOperatorFilterRegistryRegisterAndSubscribe(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iOperatorFilterRegistryABI,
      'registerAndSubscribe'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iOperatorFilterRegistryABI,
    functionName: 'registerAndSubscribe',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iOperatorFilterRegistryABI,
    'registerAndSubscribe'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__ and `functionName` set to `"subscribe"`.
 */
export function usePrepareIOperatorFilterRegistrySubscribe(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iOperatorFilterRegistryABI,
      'subscribe'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iOperatorFilterRegistryABI,
    functionName: 'subscribe',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iOperatorFilterRegistryABI,
    'subscribe'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__ and `functionName` set to `"subscriberAt"`.
 */
export function usePrepareIOperatorFilterRegistrySubscriberAt(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iOperatorFilterRegistryABI,
      'subscriberAt'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iOperatorFilterRegistryABI,
    functionName: 'subscriberAt',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iOperatorFilterRegistryABI,
    'subscriberAt'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__ and `functionName` set to `"subscribers"`.
 */
export function usePrepareIOperatorFilterRegistrySubscribers(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iOperatorFilterRegistryABI,
      'subscribers'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iOperatorFilterRegistryABI,
    functionName: 'subscribers',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iOperatorFilterRegistryABI,
    'subscribers'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__ and `functionName` set to `"subscriptionOf"`.
 */
export function usePrepareIOperatorFilterRegistrySubscriptionOf(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iOperatorFilterRegistryABI,
      'subscriptionOf'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iOperatorFilterRegistryABI,
    functionName: 'subscriptionOf',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iOperatorFilterRegistryABI,
    'subscriptionOf'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__ and `functionName` set to `"unregister"`.
 */
export function usePrepareIOperatorFilterRegistryUnregister(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iOperatorFilterRegistryABI,
      'unregister'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iOperatorFilterRegistryABI,
    functionName: 'unregister',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iOperatorFilterRegistryABI,
    'unregister'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__ and `functionName` set to `"unsubscribe"`.
 */
export function usePrepareIOperatorFilterRegistryUnsubscribe(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iOperatorFilterRegistryABI,
      'unsubscribe'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iOperatorFilterRegistryABI,
    functionName: 'unsubscribe',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iOperatorFilterRegistryABI,
    'unsubscribe'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__ and `functionName` set to `"updateCodeHash"`.
 */
export function usePrepareIOperatorFilterRegistryUpdateCodeHash(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iOperatorFilterRegistryABI,
      'updateCodeHash'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iOperatorFilterRegistryABI,
    functionName: 'updateCodeHash',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iOperatorFilterRegistryABI,
    'updateCodeHash'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__ and `functionName` set to `"updateCodeHashes"`.
 */
export function usePrepareIOperatorFilterRegistryUpdateCodeHashes(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iOperatorFilterRegistryABI,
      'updateCodeHashes'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iOperatorFilterRegistryABI,
    functionName: 'updateCodeHashes',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iOperatorFilterRegistryABI,
    'updateCodeHashes'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__ and `functionName` set to `"updateOperator"`.
 */
export function usePrepareIOperatorFilterRegistryUpdateOperator(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iOperatorFilterRegistryABI,
      'updateOperator'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iOperatorFilterRegistryABI,
    functionName: 'updateOperator',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iOperatorFilterRegistryABI,
    'updateOperator'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iOperatorFilterRegistryABI}__ and `functionName` set to `"updateOperators"`.
 */
export function usePrepareIOperatorFilterRegistryUpdateOperators(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iOperatorFilterRegistryABI,
      'updateOperators'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iOperatorFilterRegistryABI,
    functionName: 'updateOperators',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iOperatorFilterRegistryABI,
    'updateOperators'
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPostBurnABI}__.
 */
export function useIPostBurnWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iPostBurnABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iPostBurnABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iPostBurnABI, TFunctionName, TMode>({
    abi: iPostBurnABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPostBurnABI}__ and `functionName` set to `"postBurn"`.
 */
export function useIPostBurnPostBurn<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iPostBurnABI,
          'postBurn'
        >['request']['abi'],
        'postBurn',
        TMode
      > & { functionName?: 'postBurn' }
    : UseContractWriteConfig<typeof iPostBurnABI, 'postBurn', TMode> & {
        abi?: never
        functionName?: 'postBurn'
      } = {} as any,
) {
  return useContractWrite<typeof iPostBurnABI, 'postBurn', TMode>({
    abi: iPostBurnABI,
    functionName: 'postBurn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPostBurnABI}__.
 */
export function usePrepareIPostBurnWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPostBurnABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPostBurnABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPostBurnABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPostBurnABI}__ and `functionName` set to `"postBurn"`.
 */
export function usePrepareIPostBurnPostBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPostBurnABI, 'postBurn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPostBurnABI,
    functionName: 'postBurn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPostBurnABI, 'postBurn'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPostTransferABI}__.
 */
export function useIPostTransferWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iPostTransferABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iPostTransferABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iPostTransferABI, TFunctionName, TMode>({
    abi: iPostTransferABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPostTransferABI}__ and `functionName` set to `"postSafeTransferFrom"`.
 */
export function useIPostTransferPostSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iPostTransferABI,
          'postSafeTransferFrom'
        >['request']['abi'],
        'postSafeTransferFrom',
        TMode
      > & { functionName?: 'postSafeTransferFrom' }
    : UseContractWriteConfig<
        typeof iPostTransferABI,
        'postSafeTransferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'postSafeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<
    typeof iPostTransferABI,
    'postSafeTransferFrom',
    TMode
  >({
    abi: iPostTransferABI,
    functionName: 'postSafeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPostTransferABI}__ and `functionName` set to `"postTransferFrom"`.
 */
export function useIPostTransferPostTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iPostTransferABI,
          'postTransferFrom'
        >['request']['abi'],
        'postTransferFrom',
        TMode
      > & { functionName?: 'postTransferFrom' }
    : UseContractWriteConfig<
        typeof iPostTransferABI,
        'postTransferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'postTransferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof iPostTransferABI, 'postTransferFrom', TMode>({
    abi: iPostTransferABI,
    functionName: 'postTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPostTransferABI}__.
 */
export function usePrepareIPostTransferWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPostTransferABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPostTransferABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPostTransferABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPostTransferABI}__ and `functionName` set to `"postSafeTransferFrom"`.
 */
export function usePrepareIPostTransferPostSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iPostTransferABI,
      'postSafeTransferFrom'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPostTransferABI,
    functionName: 'postSafeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iPostTransferABI,
    'postSafeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPostTransferABI}__ and `functionName` set to `"postTransferFrom"`.
 */
export function usePrepareIPostTransferPostTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPostTransferABI, 'postTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPostTransferABI,
    functionName: 'postTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iPostTransferABI,
    'postTransferFrom'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRelayHubABI}__.
 */
export function useIRelayHubRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iRelayHubABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRelayHubABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iRelayHubABI,
    ...config,
  } as UseContractReadConfig<typeof iRelayHubABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRelayHubABI}__ and `functionName` set to `"aggregateGasleft"`.
 */
export function useIRelayHubAggregateGasleft<
  TFunctionName extends 'aggregateGasleft',
  TSelectData = ReadContractResult<typeof iRelayHubABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRelayHubABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRelayHubABI,
    functionName: 'aggregateGasleft',
    ...config,
  } as UseContractReadConfig<typeof iRelayHubABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRelayHubABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIRelayHubBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof iRelayHubABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRelayHubABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRelayHubABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof iRelayHubABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRelayHubABI}__ and `functionName` set to `"calculateCharge"`.
 */
export function useIRelayHubCalculateCharge<
  TFunctionName extends 'calculateCharge',
  TSelectData = ReadContractResult<typeof iRelayHubABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRelayHubABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRelayHubABI,
    functionName: 'calculateCharge',
    ...config,
  } as UseContractReadConfig<typeof iRelayHubABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRelayHubABI}__ and `functionName` set to `"calculateDevCharge"`.
 */
export function useIRelayHubCalculateDevCharge<
  TFunctionName extends 'calculateDevCharge',
  TSelectData = ReadContractResult<typeof iRelayHubABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRelayHubABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRelayHubABI,
    functionName: 'calculateDevCharge',
    ...config,
  } as UseContractReadConfig<typeof iRelayHubABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRelayHubABI}__ and `functionName` set to `"getBatchGateway"`.
 */
export function useIRelayHubGetBatchGateway<
  TFunctionName extends 'getBatchGateway',
  TSelectData = ReadContractResult<typeof iRelayHubABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRelayHubABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRelayHubABI,
    functionName: 'getBatchGateway',
    ...config,
  } as UseContractReadConfig<typeof iRelayHubABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRelayHubABI}__ and `functionName` set to `"getConfiguration"`.
 */
export function useIRelayHubGetConfiguration<
  TFunctionName extends 'getConfiguration',
  TSelectData = ReadContractResult<typeof iRelayHubABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRelayHubABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRelayHubABI,
    functionName: 'getConfiguration',
    ...config,
  } as UseContractReadConfig<typeof iRelayHubABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRelayHubABI}__ and `functionName` set to `"getCreationBlock"`.
 */
export function useIRelayHubGetCreationBlock<
  TFunctionName extends 'getCreationBlock',
  TSelectData = ReadContractResult<typeof iRelayHubABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRelayHubABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRelayHubABI,
    functionName: 'getCreationBlock',
    ...config,
  } as UseContractReadConfig<typeof iRelayHubABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRelayHubABI}__ and `functionName` set to `"getDeprecationTime"`.
 */
export function useIRelayHubGetDeprecationTime<
  TFunctionName extends 'getDeprecationTime',
  TSelectData = ReadContractResult<typeof iRelayHubABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRelayHubABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRelayHubABI,
    functionName: 'getDeprecationTime',
    ...config,
  } as UseContractReadConfig<typeof iRelayHubABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRelayHubABI}__ and `functionName` set to `"getMinimumStakePerToken"`.
 */
export function useIRelayHubGetMinimumStakePerToken<
  TFunctionName extends 'getMinimumStakePerToken',
  TSelectData = ReadContractResult<typeof iRelayHubABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRelayHubABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRelayHubABI,
    functionName: 'getMinimumStakePerToken',
    ...config,
  } as UseContractReadConfig<typeof iRelayHubABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRelayHubABI}__ and `functionName` set to `"getPenalizer"`.
 */
export function useIRelayHubGetPenalizer<
  TFunctionName extends 'getPenalizer',
  TSelectData = ReadContractResult<typeof iRelayHubABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRelayHubABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRelayHubABI,
    functionName: 'getPenalizer',
    ...config,
  } as UseContractReadConfig<typeof iRelayHubABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRelayHubABI}__ and `functionName` set to `"getRelayRegistrar"`.
 */
export function useIRelayHubGetRelayRegistrar<
  TFunctionName extends 'getRelayRegistrar',
  TSelectData = ReadContractResult<typeof iRelayHubABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRelayHubABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRelayHubABI,
    functionName: 'getRelayRegistrar',
    ...config,
  } as UseContractReadConfig<typeof iRelayHubABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRelayHubABI}__ and `functionName` set to `"getStakeManager"`.
 */
export function useIRelayHubGetStakeManager<
  TFunctionName extends 'getStakeManager',
  TSelectData = ReadContractResult<typeof iRelayHubABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRelayHubABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRelayHubABI,
    functionName: 'getStakeManager',
    ...config,
  } as UseContractReadConfig<typeof iRelayHubABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRelayHubABI}__ and `functionName` set to `"getWorkerCount"`.
 */
export function useIRelayHubGetWorkerCount<
  TFunctionName extends 'getWorkerCount',
  TSelectData = ReadContractResult<typeof iRelayHubABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRelayHubABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRelayHubABI,
    functionName: 'getWorkerCount',
    ...config,
  } as UseContractReadConfig<typeof iRelayHubABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRelayHubABI}__ and `functionName` set to `"getWorkerManager"`.
 */
export function useIRelayHubGetWorkerManager<
  TFunctionName extends 'getWorkerManager',
  TSelectData = ReadContractResult<typeof iRelayHubABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRelayHubABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRelayHubABI,
    functionName: 'getWorkerManager',
    ...config,
  } as UseContractReadConfig<typeof iRelayHubABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRelayHubABI}__ and `functionName` set to `"isDeprecated"`.
 */
export function useIRelayHubIsDeprecated<
  TFunctionName extends 'isDeprecated',
  TSelectData = ReadContractResult<typeof iRelayHubABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRelayHubABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRelayHubABI,
    functionName: 'isDeprecated',
    ...config,
  } as UseContractReadConfig<typeof iRelayHubABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRelayHubABI}__ and `functionName` set to `"isRelayEscheatable"`.
 */
export function useIRelayHubIsRelayEscheatable<
  TFunctionName extends 'isRelayEscheatable',
  TSelectData = ReadContractResult<typeof iRelayHubABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRelayHubABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRelayHubABI,
    functionName: 'isRelayEscheatable',
    ...config,
  } as UseContractReadConfig<typeof iRelayHubABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRelayHubABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIRelayHubSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof iRelayHubABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRelayHubABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRelayHubABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof iRelayHubABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRelayHubABI}__ and `functionName` set to `"verifyRelayManagerStaked"`.
 */
export function useIRelayHubVerifyRelayManagerStaked<
  TFunctionName extends 'verifyRelayManagerStaked',
  TSelectData = ReadContractResult<typeof iRelayHubABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRelayHubABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRelayHubABI,
    functionName: 'verifyRelayManagerStaked',
    ...config,
  } as UseContractReadConfig<typeof iRelayHubABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRelayHubABI}__ and `functionName` set to `"versionHub"`.
 */
export function useIRelayHubVersionHub<
  TFunctionName extends 'versionHub',
  TSelectData = ReadContractResult<typeof iRelayHubABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iRelayHubABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRelayHubABI,
    functionName: 'versionHub',
    ...config,
  } as UseContractReadConfig<typeof iRelayHubABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRelayHubABI}__.
 */
export function useIRelayHubWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iRelayHubABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iRelayHubABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iRelayHubABI, TFunctionName, TMode>({
    abi: iRelayHubABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRelayHubABI}__ and `functionName` set to `"addRelayWorkers"`.
 */
export function useIRelayHubAddRelayWorkers<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iRelayHubABI,
          'addRelayWorkers'
        >['request']['abi'],
        'addRelayWorkers',
        TMode
      > & { functionName?: 'addRelayWorkers' }
    : UseContractWriteConfig<typeof iRelayHubABI, 'addRelayWorkers', TMode> & {
        abi?: never
        functionName?: 'addRelayWorkers'
      } = {} as any,
) {
  return useContractWrite<typeof iRelayHubABI, 'addRelayWorkers', TMode>({
    abi: iRelayHubABI,
    functionName: 'addRelayWorkers',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRelayHubABI}__ and `functionName` set to `"depositFor"`.
 */
export function useIRelayHubDepositFor<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iRelayHubABI,
          'depositFor'
        >['request']['abi'],
        'depositFor',
        TMode
      > & { functionName?: 'depositFor' }
    : UseContractWriteConfig<typeof iRelayHubABI, 'depositFor', TMode> & {
        abi?: never
        functionName?: 'depositFor'
      } = {} as any,
) {
  return useContractWrite<typeof iRelayHubABI, 'depositFor', TMode>({
    abi: iRelayHubABI,
    functionName: 'depositFor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRelayHubABI}__ and `functionName` set to `"deprecateHub"`.
 */
export function useIRelayHubDeprecateHub<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iRelayHubABI,
          'deprecateHub'
        >['request']['abi'],
        'deprecateHub',
        TMode
      > & { functionName?: 'deprecateHub' }
    : UseContractWriteConfig<typeof iRelayHubABI, 'deprecateHub', TMode> & {
        abi?: never
        functionName?: 'deprecateHub'
      } = {} as any,
) {
  return useContractWrite<typeof iRelayHubABI, 'deprecateHub', TMode>({
    abi: iRelayHubABI,
    functionName: 'deprecateHub',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRelayHubABI}__ and `functionName` set to `"escheatAbandonedRelayBalance"`.
 */
export function useIRelayHubEscheatAbandonedRelayBalance<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iRelayHubABI,
          'escheatAbandonedRelayBalance'
        >['request']['abi'],
        'escheatAbandonedRelayBalance',
        TMode
      > & { functionName?: 'escheatAbandonedRelayBalance' }
    : UseContractWriteConfig<
        typeof iRelayHubABI,
        'escheatAbandonedRelayBalance',
        TMode
      > & {
        abi?: never
        functionName?: 'escheatAbandonedRelayBalance'
      } = {} as any,
) {
  return useContractWrite<
    typeof iRelayHubABI,
    'escheatAbandonedRelayBalance',
    TMode
  >({
    abi: iRelayHubABI,
    functionName: 'escheatAbandonedRelayBalance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRelayHubABI}__ and `functionName` set to `"onRelayServerRegistered"`.
 */
export function useIRelayHubOnRelayServerRegistered<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iRelayHubABI,
          'onRelayServerRegistered'
        >['request']['abi'],
        'onRelayServerRegistered',
        TMode
      > & { functionName?: 'onRelayServerRegistered' }
    : UseContractWriteConfig<
        typeof iRelayHubABI,
        'onRelayServerRegistered',
        TMode
      > & {
        abi?: never
        functionName?: 'onRelayServerRegistered'
      } = {} as any,
) {
  return useContractWrite<
    typeof iRelayHubABI,
    'onRelayServerRegistered',
    TMode
  >({
    abi: iRelayHubABI,
    functionName: 'onRelayServerRegistered',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRelayHubABI}__ and `functionName` set to `"penalize"`.
 */
export function useIRelayHubPenalize<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iRelayHubABI,
          'penalize'
        >['request']['abi'],
        'penalize',
        TMode
      > & { functionName?: 'penalize' }
    : UseContractWriteConfig<typeof iRelayHubABI, 'penalize', TMode> & {
        abi?: never
        functionName?: 'penalize'
      } = {} as any,
) {
  return useContractWrite<typeof iRelayHubABI, 'penalize', TMode>({
    abi: iRelayHubABI,
    functionName: 'penalize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRelayHubABI}__ and `functionName` set to `"relayCall"`.
 */
export function useIRelayHubRelayCall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iRelayHubABI,
          'relayCall'
        >['request']['abi'],
        'relayCall',
        TMode
      > & { functionName?: 'relayCall' }
    : UseContractWriteConfig<typeof iRelayHubABI, 'relayCall', TMode> & {
        abi?: never
        functionName?: 'relayCall'
      } = {} as any,
) {
  return useContractWrite<typeof iRelayHubABI, 'relayCall', TMode>({
    abi: iRelayHubABI,
    functionName: 'relayCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRelayHubABI}__ and `functionName` set to `"setConfiguration"`.
 */
export function useIRelayHubSetConfiguration<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iRelayHubABI,
          'setConfiguration'
        >['request']['abi'],
        'setConfiguration',
        TMode
      > & { functionName?: 'setConfiguration' }
    : UseContractWriteConfig<typeof iRelayHubABI, 'setConfiguration', TMode> & {
        abi?: never
        functionName?: 'setConfiguration'
      } = {} as any,
) {
  return useContractWrite<typeof iRelayHubABI, 'setConfiguration', TMode>({
    abi: iRelayHubABI,
    functionName: 'setConfiguration',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRelayHubABI}__ and `functionName` set to `"setMinimumStakes"`.
 */
export function useIRelayHubSetMinimumStakes<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iRelayHubABI,
          'setMinimumStakes'
        >['request']['abi'],
        'setMinimumStakes',
        TMode
      > & { functionName?: 'setMinimumStakes' }
    : UseContractWriteConfig<typeof iRelayHubABI, 'setMinimumStakes', TMode> & {
        abi?: never
        functionName?: 'setMinimumStakes'
      } = {} as any,
) {
  return useContractWrite<typeof iRelayHubABI, 'setMinimumStakes', TMode>({
    abi: iRelayHubABI,
    functionName: 'setMinimumStakes',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRelayHubABI}__ and `functionName` set to `"withdraw"`.
 */
export function useIRelayHubWithdraw<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iRelayHubABI,
          'withdraw'
        >['request']['abi'],
        'withdraw',
        TMode
      > & { functionName?: 'withdraw' }
    : UseContractWriteConfig<typeof iRelayHubABI, 'withdraw', TMode> & {
        abi?: never
        functionName?: 'withdraw'
      } = {} as any,
) {
  return useContractWrite<typeof iRelayHubABI, 'withdraw', TMode>({
    abi: iRelayHubABI,
    functionName: 'withdraw',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iRelayHubABI}__ and `functionName` set to `"withdrawMultiple"`.
 */
export function useIRelayHubWithdrawMultiple<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iRelayHubABI,
          'withdrawMultiple'
        >['request']['abi'],
        'withdrawMultiple',
        TMode
      > & { functionName?: 'withdrawMultiple' }
    : UseContractWriteConfig<typeof iRelayHubABI, 'withdrawMultiple', TMode> & {
        abi?: never
        functionName?: 'withdrawMultiple'
      } = {} as any,
) {
  return useContractWrite<typeof iRelayHubABI, 'withdrawMultiple', TMode>({
    abi: iRelayHubABI,
    functionName: 'withdrawMultiple',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRelayHubABI}__.
 */
export function usePrepareIRelayHubWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRelayHubABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRelayHubABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRelayHubABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRelayHubABI}__ and `functionName` set to `"addRelayWorkers"`.
 */
export function usePrepareIRelayHubAddRelayWorkers(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRelayHubABI, 'addRelayWorkers'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRelayHubABI,
    functionName: 'addRelayWorkers',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRelayHubABI, 'addRelayWorkers'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRelayHubABI}__ and `functionName` set to `"depositFor"`.
 */
export function usePrepareIRelayHubDepositFor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRelayHubABI, 'depositFor'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRelayHubABI,
    functionName: 'depositFor',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRelayHubABI, 'depositFor'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRelayHubABI}__ and `functionName` set to `"deprecateHub"`.
 */
export function usePrepareIRelayHubDeprecateHub(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRelayHubABI, 'deprecateHub'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRelayHubABI,
    functionName: 'deprecateHub',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRelayHubABI, 'deprecateHub'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRelayHubABI}__ and `functionName` set to `"escheatAbandonedRelayBalance"`.
 */
export function usePrepareIRelayHubEscheatAbandonedRelayBalance(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRelayHubABI,
      'escheatAbandonedRelayBalance'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRelayHubABI,
    functionName: 'escheatAbandonedRelayBalance',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRelayHubABI,
    'escheatAbandonedRelayBalance'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRelayHubABI}__ and `functionName` set to `"onRelayServerRegistered"`.
 */
export function usePrepareIRelayHubOnRelayServerRegistered(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iRelayHubABI,
      'onRelayServerRegistered'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRelayHubABI,
    functionName: 'onRelayServerRegistered',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iRelayHubABI,
    'onRelayServerRegistered'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRelayHubABI}__ and `functionName` set to `"penalize"`.
 */
export function usePrepareIRelayHubPenalize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRelayHubABI, 'penalize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRelayHubABI,
    functionName: 'penalize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRelayHubABI, 'penalize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRelayHubABI}__ and `functionName` set to `"relayCall"`.
 */
export function usePrepareIRelayHubRelayCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRelayHubABI, 'relayCall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRelayHubABI,
    functionName: 'relayCall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRelayHubABI, 'relayCall'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRelayHubABI}__ and `functionName` set to `"setConfiguration"`.
 */
export function usePrepareIRelayHubSetConfiguration(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRelayHubABI, 'setConfiguration'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRelayHubABI,
    functionName: 'setConfiguration',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRelayHubABI, 'setConfiguration'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRelayHubABI}__ and `functionName` set to `"setMinimumStakes"`.
 */
export function usePrepareIRelayHubSetMinimumStakes(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRelayHubABI, 'setMinimumStakes'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRelayHubABI,
    functionName: 'setMinimumStakes',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRelayHubABI, 'setMinimumStakes'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRelayHubABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePrepareIRelayHubWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRelayHubABI, 'withdraw'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRelayHubABI,
    functionName: 'withdraw',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRelayHubABI, 'withdraw'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iRelayHubABI}__ and `functionName` set to `"withdrawMultiple"`.
 */
export function usePrepareIRelayHubWithdrawMultiple(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iRelayHubABI, 'withdrawMultiple'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iRelayHubABI,
    functionName: 'withdrawMultiple',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iRelayHubABI, 'withdrawMultiple'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRelayHubABI}__.
 */
export function useIRelayHubEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iRelayHubABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRelayHubABI,
    ...config,
  } as UseContractEventConfig<typeof iRelayHubABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRelayHubABI}__ and `eventName` set to `"AbandonedRelayManagerBalanceEscheated"`.
 */
export function useIRelayHubAbandonedRelayManagerBalanceEscheatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iRelayHubABI,
      'AbandonedRelayManagerBalanceEscheated'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRelayHubABI,
    eventName: 'AbandonedRelayManagerBalanceEscheated',
    ...config,
  } as UseContractEventConfig<
    typeof iRelayHubABI,
    'AbandonedRelayManagerBalanceEscheated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRelayHubABI}__ and `eventName` set to `"Deposited"`.
 */
export function useIRelayHubDepositedEvent(
  config: Omit<
    UseContractEventConfig<typeof iRelayHubABI, 'Deposited'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRelayHubABI,
    eventName: 'Deposited',
    ...config,
  } as UseContractEventConfig<typeof iRelayHubABI, 'Deposited'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRelayHubABI}__ and `eventName` set to `"HubDeprecated"`.
 */
export function useIRelayHubHubDeprecatedEvent(
  config: Omit<
    UseContractEventConfig<typeof iRelayHubABI, 'HubDeprecated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRelayHubABI,
    eventName: 'HubDeprecated',
    ...config,
  } as UseContractEventConfig<typeof iRelayHubABI, 'HubDeprecated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRelayHubABI}__ and `eventName` set to `"RelayHubConfigured"`.
 */
export function useIRelayHubRelayHubConfiguredEvent(
  config: Omit<
    UseContractEventConfig<typeof iRelayHubABI, 'RelayHubConfigured'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRelayHubABI,
    eventName: 'RelayHubConfigured',
    ...config,
  } as UseContractEventConfig<typeof iRelayHubABI, 'RelayHubConfigured'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRelayHubABI}__ and `eventName` set to `"RelayWorkersAdded"`.
 */
export function useIRelayHubRelayWorkersAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof iRelayHubABI, 'RelayWorkersAdded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRelayHubABI,
    eventName: 'RelayWorkersAdded',
    ...config,
  } as UseContractEventConfig<typeof iRelayHubABI, 'RelayWorkersAdded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRelayHubABI}__ and `eventName` set to `"StakingTokenDataChanged"`.
 */
export function useIRelayHubStakingTokenDataChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof iRelayHubABI, 'StakingTokenDataChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRelayHubABI,
    eventName: 'StakingTokenDataChanged',
    ...config,
  } as UseContractEventConfig<typeof iRelayHubABI, 'StakingTokenDataChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRelayHubABI}__ and `eventName` set to `"TransactionRejectedByPaymaster"`.
 */
export function useIRelayHubTransactionRejectedByPaymasterEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iRelayHubABI,
      'TransactionRejectedByPaymaster'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRelayHubABI,
    eventName: 'TransactionRejectedByPaymaster',
    ...config,
  } as UseContractEventConfig<
    typeof iRelayHubABI,
    'TransactionRejectedByPaymaster'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRelayHubABI}__ and `eventName` set to `"TransactionRelayed"`.
 */
export function useIRelayHubTransactionRelayedEvent(
  config: Omit<
    UseContractEventConfig<typeof iRelayHubABI, 'TransactionRelayed'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRelayHubABI,
    eventName: 'TransactionRelayed',
    ...config,
  } as UseContractEventConfig<typeof iRelayHubABI, 'TransactionRelayed'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRelayHubABI}__ and `eventName` set to `"TransactionResult"`.
 */
export function useIRelayHubTransactionResultEvent(
  config: Omit<
    UseContractEventConfig<typeof iRelayHubABI, 'TransactionResult'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRelayHubABI,
    eventName: 'TransactionResult',
    ...config,
  } as UseContractEventConfig<typeof iRelayHubABI, 'TransactionResult'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iRelayHubABI}__ and `eventName` set to `"Withdrawn"`.
 */
export function useIRelayHubWithdrawnEvent(
  config: Omit<
    UseContractEventConfig<typeof iRelayHubABI, 'Withdrawn'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iRelayHubABI,
    eventName: 'Withdrawn',
    ...config,
  } as UseContractEventConfig<typeof iRelayHubABI, 'Withdrawn'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRoyaltyManagerABI}__.
 */
export function useIRoyaltyManagerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iRoyaltyManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRoyaltyManagerABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iRoyaltyManagerABI,
    ...config,
  } as UseContractReadConfig<
    typeof iRoyaltyManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRoyaltyManagerABI}__ and `functionName` set to `"canRemoveItself"`.
 */
export function useIRoyaltyManagerCanRemoveItself<
  TFunctionName extends 'canRemoveItself',
  TSelectData = ReadContractResult<typeof iRoyaltyManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRoyaltyManagerABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRoyaltyManagerABI,
    functionName: 'canRemoveItself',
    ...config,
  } as UseContractReadConfig<
    typeof iRoyaltyManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRoyaltyManagerABI}__ and `functionName` set to `"canSetDefaultRoyalty"`.
 */
export function useIRoyaltyManagerCanSetDefaultRoyalty<
  TFunctionName extends 'canSetDefaultRoyalty',
  TSelectData = ReadContractResult<typeof iRoyaltyManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRoyaltyManagerABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRoyaltyManagerABI,
    functionName: 'canSetDefaultRoyalty',
    ...config,
  } as UseContractReadConfig<
    typeof iRoyaltyManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRoyaltyManagerABI}__ and `functionName` set to `"canSetGranularRoyalty"`.
 */
export function useIRoyaltyManagerCanSetGranularRoyalty<
  TFunctionName extends 'canSetGranularRoyalty',
  TSelectData = ReadContractResult<typeof iRoyaltyManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRoyaltyManagerABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRoyaltyManagerABI,
    functionName: 'canSetGranularRoyalty',
    ...config,
  } as UseContractReadConfig<
    typeof iRoyaltyManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iRoyaltyManagerABI}__ and `functionName` set to `"canSwap"`.
 */
export function useIRoyaltyManagerCanSwap<
  TFunctionName extends 'canSwap',
  TSelectData = ReadContractResult<typeof iRoyaltyManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iRoyaltyManagerABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iRoyaltyManagerABI,
    functionName: 'canSwap',
    ...config,
  } as UseContractReadConfig<
    typeof iRoyaltyManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSchemaRegistryABI}__.
 */
export function useISchemaRegistryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iSchemaRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSchemaRegistryABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iSchemaRegistryABI,
    ...config,
  } as UseContractReadConfig<
    typeof iSchemaRegistryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSchemaRegistryABI}__ and `functionName` set to `"getSchema"`.
 */
export function useISchemaRegistryGetSchema<
  TFunctionName extends 'getSchema',
  TSelectData = ReadContractResult<typeof iSchemaRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSchemaRegistryABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSchemaRegistryABI,
    functionName: 'getSchema',
    ...config,
  } as UseContractReadConfig<
    typeof iSchemaRegistryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSchemaRegistryABI}__.
 */
export function useISchemaRegistryWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSchemaRegistryABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof iSchemaRegistryABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iSchemaRegistryABI, TFunctionName, TMode>({
    abi: iSchemaRegistryABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSchemaRegistryABI}__ and `functionName` set to `"register"`.
 */
export function useISchemaRegistryRegister<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSchemaRegistryABI,
          'register'
        >['request']['abi'],
        'register',
        TMode
      > & { functionName?: 'register' }
    : UseContractWriteConfig<typeof iSchemaRegistryABI, 'register', TMode> & {
        abi?: never
        functionName?: 'register'
      } = {} as any,
) {
  return useContractWrite<typeof iSchemaRegistryABI, 'register', TMode>({
    abi: iSchemaRegistryABI,
    functionName: 'register',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSchemaRegistryABI}__.
 */
export function usePrepareISchemaRegistryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSchemaRegistryABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSchemaRegistryABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSchemaRegistryABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSchemaRegistryABI}__ and `functionName` set to `"register"`.
 */
export function usePrepareISchemaRegistryRegister(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSchemaRegistryABI, 'register'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSchemaRegistryABI,
    functionName: 'register',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSchemaRegistryABI, 'register'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSchemaRegistryABI}__.
 */
export function useISchemaRegistryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iSchemaRegistryABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSchemaRegistryABI,
    ...config,
  } as UseContractEventConfig<typeof iSchemaRegistryABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iSchemaRegistryABI}__ and `eventName` set to `"Registered"`.
 */
export function useISchemaRegistryRegisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof iSchemaRegistryABI, 'Registered'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iSchemaRegistryABI,
    eventName: 'Registered',
    ...config,
  } as UseContractEventConfig<typeof iSchemaRegistryABI, 'Registered'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSchemaResolverABI}__.
 */
export function useISchemaResolverRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iSchemaResolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSchemaResolverABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iSchemaResolverABI,
    ...config,
  } as UseContractReadConfig<
    typeof iSchemaResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iSchemaResolverABI}__ and `functionName` set to `"isPayable"`.
 */
export function useISchemaResolverIsPayable<
  TFunctionName extends 'isPayable',
  TSelectData = ReadContractResult<typeof iSchemaResolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof iSchemaResolverABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iSchemaResolverABI,
    functionName: 'isPayable',
    ...config,
  } as UseContractReadConfig<
    typeof iSchemaResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSchemaResolverABI}__.
 */
export function useISchemaResolverWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSchemaResolverABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof iSchemaResolverABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iSchemaResolverABI, TFunctionName, TMode>({
    abi: iSchemaResolverABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSchemaResolverABI}__ and `functionName` set to `"attest"`.
 */
export function useISchemaResolverAttest<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSchemaResolverABI,
          'attest'
        >['request']['abi'],
        'attest',
        TMode
      > & { functionName?: 'attest' }
    : UseContractWriteConfig<typeof iSchemaResolverABI, 'attest', TMode> & {
        abi?: never
        functionName?: 'attest'
      } = {} as any,
) {
  return useContractWrite<typeof iSchemaResolverABI, 'attest', TMode>({
    abi: iSchemaResolverABI,
    functionName: 'attest',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSchemaResolverABI}__ and `functionName` set to `"multiAttest"`.
 */
export function useISchemaResolverMultiAttest<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSchemaResolverABI,
          'multiAttest'
        >['request']['abi'],
        'multiAttest',
        TMode
      > & { functionName?: 'multiAttest' }
    : UseContractWriteConfig<
        typeof iSchemaResolverABI,
        'multiAttest',
        TMode
      > & {
        abi?: never
        functionName?: 'multiAttest'
      } = {} as any,
) {
  return useContractWrite<typeof iSchemaResolverABI, 'multiAttest', TMode>({
    abi: iSchemaResolverABI,
    functionName: 'multiAttest',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSchemaResolverABI}__ and `functionName` set to `"multiRevoke"`.
 */
export function useISchemaResolverMultiRevoke<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSchemaResolverABI,
          'multiRevoke'
        >['request']['abi'],
        'multiRevoke',
        TMode
      > & { functionName?: 'multiRevoke' }
    : UseContractWriteConfig<
        typeof iSchemaResolverABI,
        'multiRevoke',
        TMode
      > & {
        abi?: never
        functionName?: 'multiRevoke'
      } = {} as any,
) {
  return useContractWrite<typeof iSchemaResolverABI, 'multiRevoke', TMode>({
    abi: iSchemaResolverABI,
    functionName: 'multiRevoke',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSchemaResolverABI}__ and `functionName` set to `"revoke"`.
 */
export function useISchemaResolverRevoke<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iSchemaResolverABI,
          'revoke'
        >['request']['abi'],
        'revoke',
        TMode
      > & { functionName?: 'revoke' }
    : UseContractWriteConfig<typeof iSchemaResolverABI, 'revoke', TMode> & {
        abi?: never
        functionName?: 'revoke'
      } = {} as any,
) {
  return useContractWrite<typeof iSchemaResolverABI, 'revoke', TMode>({
    abi: iSchemaResolverABI,
    functionName: 'revoke',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSchemaResolverABI}__.
 */
export function usePrepareISchemaResolverWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSchemaResolverABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSchemaResolverABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSchemaResolverABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSchemaResolverABI}__ and `functionName` set to `"attest"`.
 */
export function usePrepareISchemaResolverAttest(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSchemaResolverABI, 'attest'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSchemaResolverABI,
    functionName: 'attest',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSchemaResolverABI, 'attest'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSchemaResolverABI}__ and `functionName` set to `"multiAttest"`.
 */
export function usePrepareISchemaResolverMultiAttest(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSchemaResolverABI, 'multiAttest'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSchemaResolverABI,
    functionName: 'multiAttest',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSchemaResolverABI, 'multiAttest'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSchemaResolverABI}__ and `functionName` set to `"multiRevoke"`.
 */
export function usePrepareISchemaResolverMultiRevoke(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSchemaResolverABI, 'multiRevoke'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSchemaResolverABI,
    functionName: 'multiRevoke',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSchemaResolverABI, 'multiRevoke'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSchemaResolverABI}__ and `functionName` set to `"revoke"`.
 */
export function usePrepareISchemaResolverRevoke(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSchemaResolverABI, 'revoke'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSchemaResolverABI,
    functionName: 'revoke',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSchemaResolverABI, 'revoke'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iTokenManagerABI}__.
 */
export function useITokenManagerWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iTokenManagerABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iTokenManagerABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iTokenManagerABI, TFunctionName, TMode>({
    abi: iTokenManagerABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iTokenManagerABI}__ and `functionName` set to `"canRemoveItself"`.
 */
export function useITokenManagerCanRemoveItself<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iTokenManagerABI,
          'canRemoveItself'
        >['request']['abi'],
        'canRemoveItself',
        TMode
      > & { functionName?: 'canRemoveItself' }
    : UseContractWriteConfig<
        typeof iTokenManagerABI,
        'canRemoveItself',
        TMode
      > & {
        abi?: never
        functionName?: 'canRemoveItself'
      } = {} as any,
) {
  return useContractWrite<typeof iTokenManagerABI, 'canRemoveItself', TMode>({
    abi: iTokenManagerABI,
    functionName: 'canRemoveItself',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iTokenManagerABI}__ and `functionName` set to `"canSwap"`.
 */
export function useITokenManagerCanSwap<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iTokenManagerABI,
          'canSwap'
        >['request']['abi'],
        'canSwap',
        TMode
      > & { functionName?: 'canSwap' }
    : UseContractWriteConfig<typeof iTokenManagerABI, 'canSwap', TMode> & {
        abi?: never
        functionName?: 'canSwap'
      } = {} as any,
) {
  return useContractWrite<typeof iTokenManagerABI, 'canSwap', TMode>({
    abi: iTokenManagerABI,
    functionName: 'canSwap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iTokenManagerABI}__ and `functionName` set to `"canUpdateMetadata"`.
 */
export function useITokenManagerCanUpdateMetadata<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iTokenManagerABI,
          'canUpdateMetadata'
        >['request']['abi'],
        'canUpdateMetadata',
        TMode
      > & { functionName?: 'canUpdateMetadata' }
    : UseContractWriteConfig<
        typeof iTokenManagerABI,
        'canUpdateMetadata',
        TMode
      > & {
        abi?: never
        functionName?: 'canUpdateMetadata'
      } = {} as any,
) {
  return useContractWrite<typeof iTokenManagerABI, 'canUpdateMetadata', TMode>({
    abi: iTokenManagerABI,
    functionName: 'canUpdateMetadata',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iTokenManagerABI}__.
 */
export function usePrepareITokenManagerWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iTokenManagerABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iTokenManagerABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iTokenManagerABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iTokenManagerABI}__ and `functionName` set to `"canRemoveItself"`.
 */
export function usePrepareITokenManagerCanRemoveItself(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iTokenManagerABI, 'canRemoveItself'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iTokenManagerABI,
    functionName: 'canRemoveItself',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iTokenManagerABI,
    'canRemoveItself'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iTokenManagerABI}__ and `functionName` set to `"canSwap"`.
 */
export function usePrepareITokenManagerCanSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iTokenManagerABI, 'canSwap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iTokenManagerABI,
    functionName: 'canSwap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iTokenManagerABI, 'canSwap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iTokenManagerABI}__ and `functionName` set to `"canUpdateMetadata"`.
 */
export function usePrepareITokenManagerCanUpdateMetadata(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iTokenManagerABI, 'canUpdateMetadata'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iTokenManagerABI,
    functionName: 'canUpdateMetadata',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iTokenManagerABI,
    'canUpdateMetadata'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketplaceFiltererABI}__.
 */
export function useMarketplaceFiltererRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof marketplaceFiltererABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof marketplaceFiltererABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: marketplaceFiltererABI,
    ...config,
  } as UseContractReadConfig<
    typeof marketplaceFiltererABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketplaceFiltererABI}__ and `functionName` set to `"DEFAULT_SUBSCRIPTION"`.
 */
export function useMarketplaceFiltererDefaultSubscription<
  TFunctionName extends 'DEFAULT_SUBSCRIPTION',
  TSelectData = ReadContractResult<
    typeof marketplaceFiltererABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof marketplaceFiltererABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: marketplaceFiltererABI,
    functionName: 'DEFAULT_SUBSCRIPTION',
    ...config,
  } as UseContractReadConfig<
    typeof marketplaceFiltererABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketplaceFiltererABI}__ and `functionName` set to `"MARKETPLACE_FILTERER_REGISTRY"`.
 */
export function useMarketplaceFiltererMarketplaceFiltererRegistry<
  TFunctionName extends 'MARKETPLACE_FILTERER_REGISTRY',
  TSelectData = ReadContractResult<
    typeof marketplaceFiltererABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof marketplaceFiltererABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: marketplaceFiltererABI,
    functionName: 'MARKETPLACE_FILTERER_REGISTRY',
    ...config,
  } as UseContractReadConfig<
    typeof marketplaceFiltererABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketplaceFiltererABI}__ and `functionName` set to `"operatorFiltererRegistry"`.
 */
export function useMarketplaceFiltererOperatorFiltererRegistry<
  TFunctionName extends 'operatorFiltererRegistry',
  TSelectData = ReadContractResult<
    typeof marketplaceFiltererABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof marketplaceFiltererABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: marketplaceFiltererABI,
    functionName: 'operatorFiltererRegistry',
    ...config,
  } as UseContractReadConfig<
    typeof marketplaceFiltererABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link marketplaceFiltererABI}__ and `functionName` set to `"owner"`.
 */
export function useMarketplaceFiltererOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<
    typeof marketplaceFiltererABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof marketplaceFiltererABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: marketplaceFiltererABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof marketplaceFiltererABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketplaceFiltererABI}__.
 */
export function useMarketplaceFiltererWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof marketplaceFiltererABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof marketplaceFiltererABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof marketplaceFiltererABI, TFunctionName, TMode>({
    abi: marketplaceFiltererABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketplaceFiltererABI}__ and `functionName` set to `"removeMarketplaceFiltererRegistryAndUnregister"`.
 */
export function useMarketplaceFiltererRemoveMarketplaceFiltererRegistryAndUnregister<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof marketplaceFiltererABI,
          'removeMarketplaceFiltererRegistryAndUnregister'
        >['request']['abi'],
        'removeMarketplaceFiltererRegistryAndUnregister',
        TMode
      > & { functionName?: 'removeMarketplaceFiltererRegistryAndUnregister' }
    : UseContractWriteConfig<
        typeof marketplaceFiltererABI,
        'removeMarketplaceFiltererRegistryAndUnregister',
        TMode
      > & {
        abi?: never
        functionName?: 'removeMarketplaceFiltererRegistryAndUnregister'
      } = {} as any,
) {
  return useContractWrite<
    typeof marketplaceFiltererABI,
    'removeMarketplaceFiltererRegistryAndUnregister',
    TMode
  >({
    abi: marketplaceFiltererABI,
    functionName: 'removeMarketplaceFiltererRegistryAndUnregister',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketplaceFiltererABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useMarketplaceFiltererRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof marketplaceFiltererABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        typeof marketplaceFiltererABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof marketplaceFiltererABI,
    'renounceOwnership',
    TMode
  >({
    abi: marketplaceFiltererABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketplaceFiltererABI}__ and `functionName` set to `"setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription"`.
 */
export function useMarketplaceFiltererSetCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof marketplaceFiltererABI,
          'setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription'
        >['request']['abi'],
        'setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
        TMode
      > & {
        functionName?: 'setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription'
      }
    : UseContractWriteConfig<
        typeof marketplaceFiltererABI,
        'setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
        TMode
      > & {
        abi?: never
        functionName?: 'setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription'
      } = {} as any,
) {
  return useContractWrite<
    typeof marketplaceFiltererABI,
    'setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
    TMode
  >({
    abi: marketplaceFiltererABI,
    functionName:
      'setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketplaceFiltererABI}__ and `functionName` set to `"setMarketplaceFiltererRegistryAndRegisterDefaultSubscription"`.
 */
export function useMarketplaceFiltererSetMarketplaceFiltererRegistryAndRegisterDefaultSubscription<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof marketplaceFiltererABI,
          'setMarketplaceFiltererRegistryAndRegisterDefaultSubscription'
        >['request']['abi'],
        'setMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
        TMode
      > & {
        functionName?: 'setMarketplaceFiltererRegistryAndRegisterDefaultSubscription'
      }
    : UseContractWriteConfig<
        typeof marketplaceFiltererABI,
        'setMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
        TMode
      > & {
        abi?: never
        functionName?: 'setMarketplaceFiltererRegistryAndRegisterDefaultSubscription'
      } = {} as any,
) {
  return useContractWrite<
    typeof marketplaceFiltererABI,
    'setMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
    TMode
  >({
    abi: marketplaceFiltererABI,
    functionName:
      'setMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link marketplaceFiltererABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useMarketplaceFiltererTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof marketplaceFiltererABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        typeof marketplaceFiltererABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof marketplaceFiltererABI,
    'transferOwnership',
    TMode
  >({
    abi: marketplaceFiltererABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketplaceFiltererABI}__.
 */
export function usePrepareMarketplaceFiltererWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof marketplaceFiltererABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketplaceFiltererABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof marketplaceFiltererABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketplaceFiltererABI}__ and `functionName` set to `"removeMarketplaceFiltererRegistryAndUnregister"`.
 */
export function usePrepareMarketplaceFiltererRemoveMarketplaceFiltererRegistryAndUnregister(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof marketplaceFiltererABI,
      'removeMarketplaceFiltererRegistryAndUnregister'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketplaceFiltererABI,
    functionName: 'removeMarketplaceFiltererRegistryAndUnregister',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof marketplaceFiltererABI,
    'removeMarketplaceFiltererRegistryAndUnregister'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketplaceFiltererABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareMarketplaceFiltererRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof marketplaceFiltererABI,
      'renounceOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketplaceFiltererABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof marketplaceFiltererABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketplaceFiltererABI}__ and `functionName` set to `"setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription"`.
 */
export function usePrepareMarketplaceFiltererSetCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof marketplaceFiltererABI,
      'setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketplaceFiltererABI,
    functionName:
      'setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof marketplaceFiltererABI,
    'setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketplaceFiltererABI}__ and `functionName` set to `"setMarketplaceFiltererRegistryAndRegisterDefaultSubscription"`.
 */
export function usePrepareMarketplaceFiltererSetMarketplaceFiltererRegistryAndRegisterDefaultSubscription(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof marketplaceFiltererABI,
      'setMarketplaceFiltererRegistryAndRegisterDefaultSubscription'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketplaceFiltererABI,
    functionName:
      'setMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof marketplaceFiltererABI,
    'setMarketplaceFiltererRegistryAndRegisterDefaultSubscription'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link marketplaceFiltererABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareMarketplaceFiltererTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof marketplaceFiltererABI,
      'transferOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: marketplaceFiltererABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof marketplaceFiltererABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link marketplaceFiltererABI}__.
 */
export function useMarketplaceFiltererEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof marketplaceFiltererABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: marketplaceFiltererABI,
    ...config,
  } as UseContractEventConfig<typeof marketplaceFiltererABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link marketplaceFiltererABI}__ and `eventName` set to `"Initialized"`.
 */
export function useMarketplaceFiltererInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof marketplaceFiltererABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: marketplaceFiltererABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof marketplaceFiltererABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link marketplaceFiltererABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useMarketplaceFiltererOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<
      typeof marketplaceFiltererABI,
      'OwnershipTransferred'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: marketplaceFiltererABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<
    typeof marketplaceFiltererABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link initializableABI}__.
 */
export function useInitializableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof initializableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: initializableABI,
    ...config,
  } as UseContractEventConfig<typeof initializableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link initializableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useInitializableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof initializableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: initializableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof initializableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iStakeManagerABI}__.
 */
export function useIStakeManagerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iStakeManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iStakeManagerABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iStakeManagerABI,
    ...config,
  } as UseContractReadConfig<
    typeof iStakeManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"getAbandonedRelayServerConfig"`.
 */
export function useIStakeManagerGetAbandonedRelayServerConfig<
  TFunctionName extends 'getAbandonedRelayServerConfig',
  TSelectData = ReadContractResult<typeof iStakeManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iStakeManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iStakeManagerABI,
    functionName: 'getAbandonedRelayServerConfig',
    ...config,
  } as UseContractReadConfig<
    typeof iStakeManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"getBurnAddress"`.
 */
export function useIStakeManagerGetBurnAddress<
  TFunctionName extends 'getBurnAddress',
  TSelectData = ReadContractResult<typeof iStakeManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iStakeManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iStakeManagerABI,
    functionName: 'getBurnAddress',
    ...config,
  } as UseContractReadConfig<
    typeof iStakeManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"getCreationBlock"`.
 */
export function useIStakeManagerGetCreationBlock<
  TFunctionName extends 'getCreationBlock',
  TSelectData = ReadContractResult<typeof iStakeManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iStakeManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iStakeManagerABI,
    functionName: 'getCreationBlock',
    ...config,
  } as UseContractReadConfig<
    typeof iStakeManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"getMaxUnstakeDelay"`.
 */
export function useIStakeManagerGetMaxUnstakeDelay<
  TFunctionName extends 'getMaxUnstakeDelay',
  TSelectData = ReadContractResult<typeof iStakeManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iStakeManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iStakeManagerABI,
    functionName: 'getMaxUnstakeDelay',
    ...config,
  } as UseContractReadConfig<
    typeof iStakeManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"getStakeInfo"`.
 */
export function useIStakeManagerGetStakeInfo<
  TFunctionName extends 'getStakeInfo',
  TSelectData = ReadContractResult<typeof iStakeManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iStakeManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iStakeManagerABI,
    functionName: 'getStakeInfo',
    ...config,
  } as UseContractReadConfig<
    typeof iStakeManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"isRelayEscheatable"`.
 */
export function useIStakeManagerIsRelayEscheatable<
  TFunctionName extends 'isRelayEscheatable',
  TSelectData = ReadContractResult<typeof iStakeManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iStakeManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iStakeManagerABI,
    functionName: 'isRelayEscheatable',
    ...config,
  } as UseContractReadConfig<
    typeof iStakeManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIStakeManagerSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof iStakeManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iStakeManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iStakeManagerABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof iStakeManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"versionSM"`.
 */
export function useIStakeManagerVersionSm<
  TFunctionName extends 'versionSM',
  TSelectData = ReadContractResult<typeof iStakeManagerABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iStakeManagerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iStakeManagerABI,
    functionName: 'versionSM',
    ...config,
  } as UseContractReadConfig<
    typeof iStakeManagerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__.
 */
export function useIStakeManagerWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iStakeManagerABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof iStakeManagerABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof iStakeManagerABI, TFunctionName, TMode>({
    abi: iStakeManagerABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"authorizeHubByManager"`.
 */
export function useIStakeManagerAuthorizeHubByManager<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iStakeManagerABI,
          'authorizeHubByManager'
        >['request']['abi'],
        'authorizeHubByManager',
        TMode
      > & { functionName?: 'authorizeHubByManager' }
    : UseContractWriteConfig<
        typeof iStakeManagerABI,
        'authorizeHubByManager',
        TMode
      > & {
        abi?: never
        functionName?: 'authorizeHubByManager'
      } = {} as any,
) {
  return useContractWrite<
    typeof iStakeManagerABI,
    'authorizeHubByManager',
    TMode
  >({
    abi: iStakeManagerABI,
    functionName: 'authorizeHubByManager',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"authorizeHubByOwner"`.
 */
export function useIStakeManagerAuthorizeHubByOwner<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iStakeManagerABI,
          'authorizeHubByOwner'
        >['request']['abi'],
        'authorizeHubByOwner',
        TMode
      > & { functionName?: 'authorizeHubByOwner' }
    : UseContractWriteConfig<
        typeof iStakeManagerABI,
        'authorizeHubByOwner',
        TMode
      > & {
        abi?: never
        functionName?: 'authorizeHubByOwner'
      } = {} as any,
) {
  return useContractWrite<
    typeof iStakeManagerABI,
    'authorizeHubByOwner',
    TMode
  >({
    abi: iStakeManagerABI,
    functionName: 'authorizeHubByOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"escheatAbandonedRelayStake"`.
 */
export function useIStakeManagerEscheatAbandonedRelayStake<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iStakeManagerABI,
          'escheatAbandonedRelayStake'
        >['request']['abi'],
        'escheatAbandonedRelayStake',
        TMode
      > & { functionName?: 'escheatAbandonedRelayStake' }
    : UseContractWriteConfig<
        typeof iStakeManagerABI,
        'escheatAbandonedRelayStake',
        TMode
      > & {
        abi?: never
        functionName?: 'escheatAbandonedRelayStake'
      } = {} as any,
) {
  return useContractWrite<
    typeof iStakeManagerABI,
    'escheatAbandonedRelayStake',
    TMode
  >({
    abi: iStakeManagerABI,
    functionName: 'escheatAbandonedRelayStake',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"markRelayAbandoned"`.
 */
export function useIStakeManagerMarkRelayAbandoned<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iStakeManagerABI,
          'markRelayAbandoned'
        >['request']['abi'],
        'markRelayAbandoned',
        TMode
      > & { functionName?: 'markRelayAbandoned' }
    : UseContractWriteConfig<
        typeof iStakeManagerABI,
        'markRelayAbandoned',
        TMode
      > & {
        abi?: never
        functionName?: 'markRelayAbandoned'
      } = {} as any,
) {
  return useContractWrite<typeof iStakeManagerABI, 'markRelayAbandoned', TMode>(
    {
      abi: iStakeManagerABI,
      functionName: 'markRelayAbandoned',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"penalizeRelayManager"`.
 */
export function useIStakeManagerPenalizeRelayManager<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iStakeManagerABI,
          'penalizeRelayManager'
        >['request']['abi'],
        'penalizeRelayManager',
        TMode
      > & { functionName?: 'penalizeRelayManager' }
    : UseContractWriteConfig<
        typeof iStakeManagerABI,
        'penalizeRelayManager',
        TMode
      > & {
        abi?: never
        functionName?: 'penalizeRelayManager'
      } = {} as any,
) {
  return useContractWrite<
    typeof iStakeManagerABI,
    'penalizeRelayManager',
    TMode
  >({
    abi: iStakeManagerABI,
    functionName: 'penalizeRelayManager',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"setBurnAddress"`.
 */
export function useIStakeManagerSetBurnAddress<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iStakeManagerABI,
          'setBurnAddress'
        >['request']['abi'],
        'setBurnAddress',
        TMode
      > & { functionName?: 'setBurnAddress' }
    : UseContractWriteConfig<
        typeof iStakeManagerABI,
        'setBurnAddress',
        TMode
      > & {
        abi?: never
        functionName?: 'setBurnAddress'
      } = {} as any,
) {
  return useContractWrite<typeof iStakeManagerABI, 'setBurnAddress', TMode>({
    abi: iStakeManagerABI,
    functionName: 'setBurnAddress',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"setDevAddress"`.
 */
export function useIStakeManagerSetDevAddress<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iStakeManagerABI,
          'setDevAddress'
        >['request']['abi'],
        'setDevAddress',
        TMode
      > & { functionName?: 'setDevAddress' }
    : UseContractWriteConfig<
        typeof iStakeManagerABI,
        'setDevAddress',
        TMode
      > & {
        abi?: never
        functionName?: 'setDevAddress'
      } = {} as any,
) {
  return useContractWrite<typeof iStakeManagerABI, 'setDevAddress', TMode>({
    abi: iStakeManagerABI,
    functionName: 'setDevAddress',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"setRelayManagerOwner"`.
 */
export function useIStakeManagerSetRelayManagerOwner<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iStakeManagerABI,
          'setRelayManagerOwner'
        >['request']['abi'],
        'setRelayManagerOwner',
        TMode
      > & { functionName?: 'setRelayManagerOwner' }
    : UseContractWriteConfig<
        typeof iStakeManagerABI,
        'setRelayManagerOwner',
        TMode
      > & {
        abi?: never
        functionName?: 'setRelayManagerOwner'
      } = {} as any,
) {
  return useContractWrite<
    typeof iStakeManagerABI,
    'setRelayManagerOwner',
    TMode
  >({
    abi: iStakeManagerABI,
    functionName: 'setRelayManagerOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"stakeForRelayManager"`.
 */
export function useIStakeManagerStakeForRelayManager<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iStakeManagerABI,
          'stakeForRelayManager'
        >['request']['abi'],
        'stakeForRelayManager',
        TMode
      > & { functionName?: 'stakeForRelayManager' }
    : UseContractWriteConfig<
        typeof iStakeManagerABI,
        'stakeForRelayManager',
        TMode
      > & {
        abi?: never
        functionName?: 'stakeForRelayManager'
      } = {} as any,
) {
  return useContractWrite<
    typeof iStakeManagerABI,
    'stakeForRelayManager',
    TMode
  >({
    abi: iStakeManagerABI,
    functionName: 'stakeForRelayManager',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"unauthorizeHubByManager"`.
 */
export function useIStakeManagerUnauthorizeHubByManager<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iStakeManagerABI,
          'unauthorizeHubByManager'
        >['request']['abi'],
        'unauthorizeHubByManager',
        TMode
      > & { functionName?: 'unauthorizeHubByManager' }
    : UseContractWriteConfig<
        typeof iStakeManagerABI,
        'unauthorizeHubByManager',
        TMode
      > & {
        abi?: never
        functionName?: 'unauthorizeHubByManager'
      } = {} as any,
) {
  return useContractWrite<
    typeof iStakeManagerABI,
    'unauthorizeHubByManager',
    TMode
  >({
    abi: iStakeManagerABI,
    functionName: 'unauthorizeHubByManager',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"unauthorizeHubByOwner"`.
 */
export function useIStakeManagerUnauthorizeHubByOwner<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iStakeManagerABI,
          'unauthorizeHubByOwner'
        >['request']['abi'],
        'unauthorizeHubByOwner',
        TMode
      > & { functionName?: 'unauthorizeHubByOwner' }
    : UseContractWriteConfig<
        typeof iStakeManagerABI,
        'unauthorizeHubByOwner',
        TMode
      > & {
        abi?: never
        functionName?: 'unauthorizeHubByOwner'
      } = {} as any,
) {
  return useContractWrite<
    typeof iStakeManagerABI,
    'unauthorizeHubByOwner',
    TMode
  >({
    abi: iStakeManagerABI,
    functionName: 'unauthorizeHubByOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"unlockStake"`.
 */
export function useIStakeManagerUnlockStake<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iStakeManagerABI,
          'unlockStake'
        >['request']['abi'],
        'unlockStake',
        TMode
      > & { functionName?: 'unlockStake' }
    : UseContractWriteConfig<typeof iStakeManagerABI, 'unlockStake', TMode> & {
        abi?: never
        functionName?: 'unlockStake'
      } = {} as any,
) {
  return useContractWrite<typeof iStakeManagerABI, 'unlockStake', TMode>({
    abi: iStakeManagerABI,
    functionName: 'unlockStake',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"updateRelayKeepaliveTime"`.
 */
export function useIStakeManagerUpdateRelayKeepaliveTime<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iStakeManagerABI,
          'updateRelayKeepaliveTime'
        >['request']['abi'],
        'updateRelayKeepaliveTime',
        TMode
      > & { functionName?: 'updateRelayKeepaliveTime' }
    : UseContractWriteConfig<
        typeof iStakeManagerABI,
        'updateRelayKeepaliveTime',
        TMode
      > & {
        abi?: never
        functionName?: 'updateRelayKeepaliveTime'
      } = {} as any,
) {
  return useContractWrite<
    typeof iStakeManagerABI,
    'updateRelayKeepaliveTime',
    TMode
  >({
    abi: iStakeManagerABI,
    functionName: 'updateRelayKeepaliveTime',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"withdrawStake"`.
 */
export function useIStakeManagerWithdrawStake<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof iStakeManagerABI,
          'withdrawStake'
        >['request']['abi'],
        'withdrawStake',
        TMode
      > & { functionName?: 'withdrawStake' }
    : UseContractWriteConfig<
        typeof iStakeManagerABI,
        'withdrawStake',
        TMode
      > & {
        abi?: never
        functionName?: 'withdrawStake'
      } = {} as any,
) {
  return useContractWrite<typeof iStakeManagerABI, 'withdrawStake', TMode>({
    abi: iStakeManagerABI,
    functionName: 'withdrawStake',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__.
 */
export function usePrepareIStakeManagerWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iStakeManagerABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iStakeManagerABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iStakeManagerABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"authorizeHubByManager"`.
 */
export function usePrepareIStakeManagerAuthorizeHubByManager(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iStakeManagerABI,
      'authorizeHubByManager'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iStakeManagerABI,
    functionName: 'authorizeHubByManager',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iStakeManagerABI,
    'authorizeHubByManager'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"authorizeHubByOwner"`.
 */
export function usePrepareIStakeManagerAuthorizeHubByOwner(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iStakeManagerABI,
      'authorizeHubByOwner'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iStakeManagerABI,
    functionName: 'authorizeHubByOwner',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iStakeManagerABI,
    'authorizeHubByOwner'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"escheatAbandonedRelayStake"`.
 */
export function usePrepareIStakeManagerEscheatAbandonedRelayStake(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iStakeManagerABI,
      'escheatAbandonedRelayStake'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iStakeManagerABI,
    functionName: 'escheatAbandonedRelayStake',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iStakeManagerABI,
    'escheatAbandonedRelayStake'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"markRelayAbandoned"`.
 */
export function usePrepareIStakeManagerMarkRelayAbandoned(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iStakeManagerABI,
      'markRelayAbandoned'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iStakeManagerABI,
    functionName: 'markRelayAbandoned',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iStakeManagerABI,
    'markRelayAbandoned'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"penalizeRelayManager"`.
 */
export function usePrepareIStakeManagerPenalizeRelayManager(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iStakeManagerABI,
      'penalizeRelayManager'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iStakeManagerABI,
    functionName: 'penalizeRelayManager',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iStakeManagerABI,
    'penalizeRelayManager'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"setBurnAddress"`.
 */
export function usePrepareIStakeManagerSetBurnAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iStakeManagerABI, 'setBurnAddress'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iStakeManagerABI,
    functionName: 'setBurnAddress',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iStakeManagerABI, 'setBurnAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"setDevAddress"`.
 */
export function usePrepareIStakeManagerSetDevAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iStakeManagerABI, 'setDevAddress'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iStakeManagerABI,
    functionName: 'setDevAddress',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iStakeManagerABI, 'setDevAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"setRelayManagerOwner"`.
 */
export function usePrepareIStakeManagerSetRelayManagerOwner(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iStakeManagerABI,
      'setRelayManagerOwner'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iStakeManagerABI,
    functionName: 'setRelayManagerOwner',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iStakeManagerABI,
    'setRelayManagerOwner'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"stakeForRelayManager"`.
 */
export function usePrepareIStakeManagerStakeForRelayManager(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iStakeManagerABI,
      'stakeForRelayManager'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iStakeManagerABI,
    functionName: 'stakeForRelayManager',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iStakeManagerABI,
    'stakeForRelayManager'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"unauthorizeHubByManager"`.
 */
export function usePrepareIStakeManagerUnauthorizeHubByManager(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iStakeManagerABI,
      'unauthorizeHubByManager'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iStakeManagerABI,
    functionName: 'unauthorizeHubByManager',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iStakeManagerABI,
    'unauthorizeHubByManager'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"unauthorizeHubByOwner"`.
 */
export function usePrepareIStakeManagerUnauthorizeHubByOwner(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iStakeManagerABI,
      'unauthorizeHubByOwner'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iStakeManagerABI,
    functionName: 'unauthorizeHubByOwner',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iStakeManagerABI,
    'unauthorizeHubByOwner'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"unlockStake"`.
 */
export function usePrepareIStakeManagerUnlockStake(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iStakeManagerABI, 'unlockStake'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iStakeManagerABI,
    functionName: 'unlockStake',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iStakeManagerABI, 'unlockStake'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"updateRelayKeepaliveTime"`.
 */
export function usePrepareIStakeManagerUpdateRelayKeepaliveTime(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iStakeManagerABI,
      'updateRelayKeepaliveTime'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iStakeManagerABI,
    functionName: 'updateRelayKeepaliveTime',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iStakeManagerABI,
    'updateRelayKeepaliveTime'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iStakeManagerABI}__ and `functionName` set to `"withdrawStake"`.
 */
export function usePrepareIStakeManagerWithdrawStake(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iStakeManagerABI, 'withdrawStake'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iStakeManagerABI,
    functionName: 'withdrawStake',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iStakeManagerABI, 'withdrawStake'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeManagerABI}__.
 */
export function useIStakeManagerEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iStakeManagerABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iStakeManagerABI,
    ...config,
  } as UseContractEventConfig<typeof iStakeManagerABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeManagerABI}__ and `eventName` set to `"AbandonedRelayManagerStakeEscheated"`.
 */
export function useIStakeManagerAbandonedRelayManagerStakeEscheatedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iStakeManagerABI,
      'AbandonedRelayManagerStakeEscheated'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iStakeManagerABI,
    eventName: 'AbandonedRelayManagerStakeEscheated',
    ...config,
  } as UseContractEventConfig<
    typeof iStakeManagerABI,
    'AbandonedRelayManagerStakeEscheated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeManagerABI}__ and `eventName` set to `"BurnAddressSet"`.
 */
export function useIStakeManagerBurnAddressSetEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeManagerABI, 'BurnAddressSet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iStakeManagerABI,
    eventName: 'BurnAddressSet',
    ...config,
  } as UseContractEventConfig<typeof iStakeManagerABI, 'BurnAddressSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeManagerABI}__ and `eventName` set to `"DevAddressSet"`.
 */
export function useIStakeManagerDevAddressSetEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeManagerABI, 'DevAddressSet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iStakeManagerABI,
    eventName: 'DevAddressSet',
    ...config,
  } as UseContractEventConfig<typeof iStakeManagerABI, 'DevAddressSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeManagerABI}__ and `eventName` set to `"HubAuthorized"`.
 */
export function useIStakeManagerHubAuthorizedEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeManagerABI, 'HubAuthorized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iStakeManagerABI,
    eventName: 'HubAuthorized',
    ...config,
  } as UseContractEventConfig<typeof iStakeManagerABI, 'HubAuthorized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeManagerABI}__ and `eventName` set to `"HubUnauthorized"`.
 */
export function useIStakeManagerHubUnauthorizedEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeManagerABI, 'HubUnauthorized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iStakeManagerABI,
    eventName: 'HubUnauthorized',
    ...config,
  } as UseContractEventConfig<typeof iStakeManagerABI, 'HubUnauthorized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeManagerABI}__ and `eventName` set to `"OwnerSet"`.
 */
export function useIStakeManagerOwnerSetEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeManagerABI, 'OwnerSet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iStakeManagerABI,
    eventName: 'OwnerSet',
    ...config,
  } as UseContractEventConfig<typeof iStakeManagerABI, 'OwnerSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeManagerABI}__ and `eventName` set to `"RelayServerAbandoned"`.
 */
export function useIStakeManagerRelayServerAbandonedEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeManagerABI, 'RelayServerAbandoned'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iStakeManagerABI,
    eventName: 'RelayServerAbandoned',
    ...config,
  } as UseContractEventConfig<typeof iStakeManagerABI, 'RelayServerAbandoned'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeManagerABI}__ and `eventName` set to `"RelayServerKeepalive"`.
 */
export function useIStakeManagerRelayServerKeepaliveEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeManagerABI, 'RelayServerKeepalive'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iStakeManagerABI,
    eventName: 'RelayServerKeepalive',
    ...config,
  } as UseContractEventConfig<typeof iStakeManagerABI, 'RelayServerKeepalive'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeManagerABI}__ and `eventName` set to `"StakeAdded"`.
 */
export function useIStakeManagerStakeAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeManagerABI, 'StakeAdded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iStakeManagerABI,
    eventName: 'StakeAdded',
    ...config,
  } as UseContractEventConfig<typeof iStakeManagerABI, 'StakeAdded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeManagerABI}__ and `eventName` set to `"StakePenalized"`.
 */
export function useIStakeManagerStakePenalizedEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeManagerABI, 'StakePenalized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iStakeManagerABI,
    eventName: 'StakePenalized',
    ...config,
  } as UseContractEventConfig<typeof iStakeManagerABI, 'StakePenalized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeManagerABI}__ and `eventName` set to `"StakeUnlocked"`.
 */
export function useIStakeManagerStakeUnlockedEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeManagerABI, 'StakeUnlocked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iStakeManagerABI,
    eventName: 'StakeUnlocked',
    ...config,
  } as UseContractEventConfig<typeof iStakeManagerABI, 'StakeUnlocked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iStakeManagerABI}__ and `eventName` set to `"StakeWithdrawn"`.
 */
export function useIStakeManagerStakeWithdrawnEvent(
  config: Omit<
    UseContractEventConfig<typeof iStakeManagerABI, 'StakeWithdrawn'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iStakeManagerABI,
    eventName: 'StakeWithdrawn',
    ...config,
  } as UseContractEventConfig<typeof iStakeManagerABI, 'StakeWithdrawn'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link metadataEncryptionABI}__.
 */
export function useMetadataEncryptionRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof metadataEncryptionABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof metadataEncryptionABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: metadataEncryptionABI,
    ...config,
  } as UseContractReadConfig<
    typeof metadataEncryptionABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link metadataEncryptionABI}__ and `functionName` set to `"encryptDecrypt"`.
 */
export function useMetadataEncryptionEncryptDecrypt<
  TFunctionName extends 'encryptDecrypt',
  TSelectData = ReadContractResult<typeof metadataEncryptionABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof metadataEncryptionABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: metadataEncryptionABI,
    functionName: 'encryptDecrypt',
    ...config,
  } as UseContractReadConfig<
    typeof metadataEncryptionABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ownableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ownableABI,
    ...config,
  } as UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"owner"`.
 */
export function useOwnableOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof ownableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ownableABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ownableABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof ownableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ownableABI, TFunctionName, TMode>({
    abi: ownableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useOwnableRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownableABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof ownableABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof ownableABI, 'renounceOwnership', TMode>({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useOwnableTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownableABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof ownableABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof ownableABI, 'transferOwnership', TMode>({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function usePrepareOwnableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareOwnableRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareOwnableTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ownableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ownableABI,
    ...config,
  } as UseContractEventConfig<typeof ownableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useOwnableOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ownableABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pausableABI}__.
 */
export function usePausableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof pausableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pausableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: pausableABI,
    ...config,
  } as UseContractReadConfig<typeof pausableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pausableABI}__ and `functionName` set to `"paused"`.
 */
export function usePausablePaused<
  TFunctionName extends 'paused',
  TSelectData = ReadContractResult<typeof pausableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof pausableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pausableABI,
    functionName: 'paused',
    ...config,
  } as UseContractReadConfig<typeof pausableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pausableABI}__.
 */
export function usePausableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof pausableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: pausableABI,
    ...config,
  } as UseContractEventConfig<typeof pausableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pausableABI}__ and `eventName` set to `"Paused"`.
 */
export function usePausablePausedEvent(
  config: Omit<
    UseContractEventConfig<typeof pausableABI, 'Paused'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pausableABI,
    eventName: 'Paused',
    ...config,
  } as UseContractEventConfig<typeof pausableABI, 'Paused'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pausableABI}__ and `eventName` set to `"Unpaused"`.
 */
export function usePausableUnpausedEvent(
  config: Omit<
    UseContractEventConfig<typeof pausableABI, 'Unpaused'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pausableABI,
    eventName: 'Unpaused',
    ...config,
  } as UseContractEventConfig<typeof pausableABI, 'Unpaused'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableUpgradeableABI}__.
 */
export function useOwnableUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ownableUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ownableUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ownableUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof ownableUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableUpgradeableABI}__ and `functionName` set to `"owner"`.
 */
export function useOwnableUpgradeableOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof ownableUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ownableUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ownableUpgradeableABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof ownableUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableUpgradeableABI}__.
 */
export function useOwnableUpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownableUpgradeableABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof ownableUpgradeableABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof ownableUpgradeableABI, TFunctionName, TMode>({
    abi: ownableUpgradeableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableUpgradeableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useOwnableUpgradeableRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownableUpgradeableABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        typeof ownableUpgradeableABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof ownableUpgradeableABI,
    'renounceOwnership',
    TMode
  >({
    abi: ownableUpgradeableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableUpgradeableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useOwnableUpgradeableTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof ownableUpgradeableABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        typeof ownableUpgradeableABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<
    typeof ownableUpgradeableABI,
    'transferOwnership',
    TMode
  >({
    abi: ownableUpgradeableABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableUpgradeableABI}__.
 */
export function usePrepareOwnableUpgradeableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ownableUpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ownableUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableUpgradeableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareOwnableUpgradeableRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ownableUpgradeableABI,
      'renounceOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableUpgradeableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ownableUpgradeableABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableUpgradeableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareOwnableUpgradeableTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof ownableUpgradeableABI,
      'transferOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ownableUpgradeableABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ownableUpgradeableABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableUpgradeableABI}__.
 */
export function useOwnableUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ownableUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ownableUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof ownableUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useOwnableUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof ownableUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ownableUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof ownableUpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableUpgradeableABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useOwnableUpgradeableOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<
      typeof ownableUpgradeableABI,
      'OwnershipTransferred'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ownableUpgradeableABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<
    typeof ownableUpgradeableABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pausableUpgradeableABI}__.
 */
export function usePausableUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof pausableUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pausableUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: pausableUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof pausableUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pausableUpgradeableABI}__ and `functionName` set to `"paused"`.
 */
export function usePausableUpgradeablePaused<
  TFunctionName extends 'paused',
  TSelectData = ReadContractResult<
    typeof pausableUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof pausableUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pausableUpgradeableABI,
    functionName: 'paused',
    ...config,
  } as UseContractReadConfig<
    typeof pausableUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pausableUpgradeableABI}__.
 */
export function usePausableUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof pausableUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: pausableUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof pausableUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pausableUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function usePausableUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof pausableUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pausableUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof pausableUpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pausableUpgradeableABI}__ and `eventName` set to `"Paused"`.
 */
export function usePausableUpgradeablePausedEvent(
  config: Omit<
    UseContractEventConfig<typeof pausableUpgradeableABI, 'Paused'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pausableUpgradeableABI,
    eventName: 'Paused',
    ...config,
  } as UseContractEventConfig<typeof pausableUpgradeableABI, 'Paused'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pausableUpgradeableABI}__ and `eventName` set to `"Unpaused"`.
 */
export function usePausableUpgradeableUnpausedEvent(
  config: Omit<
    UseContractEventConfig<typeof pausableUpgradeableABI, 'Unpaused'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pausableUpgradeableABI,
    eventName: 'Unpaused',
    ...config,
  } as UseContractEventConfig<typeof pausableUpgradeableABI, 'Unpaused'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link reentrancyGuardUpgradeableABI}__.
 */
export function useReentrancyGuardUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof reentrancyGuardUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: reentrancyGuardUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof reentrancyGuardUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link reentrancyGuardUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useReentrancyGuardUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof reentrancyGuardUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: reentrancyGuardUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<
    typeof reentrancyGuardUpgradeableABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link schemaResolverABI}__.
 */
export function useSchemaResolverRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof schemaResolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof schemaResolverABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: schemaResolverABI,
    ...config,
  } as UseContractReadConfig<
    typeof schemaResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link schemaResolverABI}__ and `functionName` set to `"isPayable"`.
 */
export function useSchemaResolverIsPayable<
  TFunctionName extends 'isPayable',
  TSelectData = ReadContractResult<typeof schemaResolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof schemaResolverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: schemaResolverABI,
    functionName: 'isPayable',
    ...config,
  } as UseContractReadConfig<
    typeof schemaResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link schemaResolverABI}__ and `functionName` set to `"version"`.
 */
export function useSchemaResolverVersion<
  TFunctionName extends 'version',
  TSelectData = ReadContractResult<typeof schemaResolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof schemaResolverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: schemaResolverABI,
    functionName: 'version',
    ...config,
  } as UseContractReadConfig<
    typeof schemaResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link schemaResolverABI}__.
 */
export function useSchemaResolverWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof schemaResolverABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof schemaResolverABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof schemaResolverABI, TFunctionName, TMode>({
    abi: schemaResolverABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link schemaResolverABI}__ and `functionName` set to `"attest"`.
 */
export function useSchemaResolverAttest<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof schemaResolverABI,
          'attest'
        >['request']['abi'],
        'attest',
        TMode
      > & { functionName?: 'attest' }
    : UseContractWriteConfig<typeof schemaResolverABI, 'attest', TMode> & {
        abi?: never
        functionName?: 'attest'
      } = {} as any,
) {
  return useContractWrite<typeof schemaResolverABI, 'attest', TMode>({
    abi: schemaResolverABI,
    functionName: 'attest',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link schemaResolverABI}__ and `functionName` set to `"multiAttest"`.
 */
export function useSchemaResolverMultiAttest<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof schemaResolverABI,
          'multiAttest'
        >['request']['abi'],
        'multiAttest',
        TMode
      > & { functionName?: 'multiAttest' }
    : UseContractWriteConfig<typeof schemaResolverABI, 'multiAttest', TMode> & {
        abi?: never
        functionName?: 'multiAttest'
      } = {} as any,
) {
  return useContractWrite<typeof schemaResolverABI, 'multiAttest', TMode>({
    abi: schemaResolverABI,
    functionName: 'multiAttest',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link schemaResolverABI}__ and `functionName` set to `"multiRevoke"`.
 */
export function useSchemaResolverMultiRevoke<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof schemaResolverABI,
          'multiRevoke'
        >['request']['abi'],
        'multiRevoke',
        TMode
      > & { functionName?: 'multiRevoke' }
    : UseContractWriteConfig<typeof schemaResolverABI, 'multiRevoke', TMode> & {
        abi?: never
        functionName?: 'multiRevoke'
      } = {} as any,
) {
  return useContractWrite<typeof schemaResolverABI, 'multiRevoke', TMode>({
    abi: schemaResolverABI,
    functionName: 'multiRevoke',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link schemaResolverABI}__ and `functionName` set to `"revoke"`.
 */
export function useSchemaResolverRevoke<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof schemaResolverABI,
          'revoke'
        >['request']['abi'],
        'revoke',
        TMode
      > & { functionName?: 'revoke' }
    : UseContractWriteConfig<typeof schemaResolverABI, 'revoke', TMode> & {
        abi?: never
        functionName?: 'revoke'
      } = {} as any,
) {
  return useContractWrite<typeof schemaResolverABI, 'revoke', TMode>({
    abi: schemaResolverABI,
    functionName: 'revoke',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link schemaResolverABI}__.
 */
export function usePrepareSchemaResolverWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof schemaResolverABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: schemaResolverABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof schemaResolverABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link schemaResolverABI}__ and `functionName` set to `"attest"`.
 */
export function usePrepareSchemaResolverAttest(
  config: Omit<
    UsePrepareContractWriteConfig<typeof schemaResolverABI, 'attest'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: schemaResolverABI,
    functionName: 'attest',
    ...config,
  } as UsePrepareContractWriteConfig<typeof schemaResolverABI, 'attest'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link schemaResolverABI}__ and `functionName` set to `"multiAttest"`.
 */
export function usePrepareSchemaResolverMultiAttest(
  config: Omit<
    UsePrepareContractWriteConfig<typeof schemaResolverABI, 'multiAttest'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: schemaResolverABI,
    functionName: 'multiAttest',
    ...config,
  } as UsePrepareContractWriteConfig<typeof schemaResolverABI, 'multiAttest'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link schemaResolverABI}__ and `functionName` set to `"multiRevoke"`.
 */
export function usePrepareSchemaResolverMultiRevoke(
  config: Omit<
    UsePrepareContractWriteConfig<typeof schemaResolverABI, 'multiRevoke'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: schemaResolverABI,
    functionName: 'multiRevoke',
    ...config,
  } as UsePrepareContractWriteConfig<typeof schemaResolverABI, 'multiRevoke'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link schemaResolverABI}__ and `functionName` set to `"revoke"`.
 */
export function usePrepareSchemaResolverRevoke(
  config: Omit<
    UsePrepareContractWriteConfig<typeof schemaResolverABI, 'revoke'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: schemaResolverABI,
    functionName: 'revoke',
    ...config,
  } as UsePrepareContractWriteConfig<typeof schemaResolverABI, 'revoke'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semverABI}__.
 */
export function useSemverRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof semverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof semverABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: semverABI, ...config } as UseContractReadConfig<
    typeof semverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semverABI}__ and `functionName` set to `"version"`.
 */
export function useSemverVersion<
  TFunctionName extends 'version',
  TSelectData = ReadContractResult<typeof semverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof semverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: semverABI,
    functionName: 'version',
    ...config,
  } as UseContractReadConfig<typeof semverABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthAccountABI}__.
 */
export function useSynthAccountRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof synthAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthAccountABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: synthAccountABI,
    ...config,
  } as UseContractReadConfig<
    typeof synthAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"DEFAULT_SUBSCRIPTION"`.
 */
export function useSynthAccountDefaultSubscription<
  TFunctionName extends 'DEFAULT_SUBSCRIPTION',
  TSelectData = ReadContractResult<typeof synthAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: synthAccountABI,
    functionName: 'DEFAULT_SUBSCRIPTION',
    ...config,
  } as UseContractReadConfig<
    typeof synthAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"MARKETPLACE_FILTERER_REGISTRY"`.
 */
export function useSynthAccountMarketplaceFiltererRegistry<
  TFunctionName extends 'MARKETPLACE_FILTERER_REGISTRY',
  TSelectData = ReadContractResult<typeof synthAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: synthAccountABI,
    functionName: 'MARKETPLACE_FILTERER_REGISTRY',
    ...config,
  } as UseContractReadConfig<
    typeof synthAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useSynthAccountBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof synthAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: synthAccountABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof synthAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"baseURI"`.
 */
export function useSynthAccountBaseUri<
  TFunctionName extends 'baseURI',
  TSelectData = ReadContractResult<typeof synthAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: synthAccountABI,
    functionName: 'baseURI',
    ...config,
  } as UseContractReadConfig<
    typeof synthAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"contractURI"`.
 */
export function useSynthAccountContractUri<
  TFunctionName extends 'contractURI',
  TSelectData = ReadContractResult<typeof synthAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: synthAccountABI,
    functionName: 'contractURI',
    ...config,
  } as UseContractReadConfig<
    typeof synthAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"defaultManager"`.
 */
export function useSynthAccountDefaultManager<
  TFunctionName extends 'defaultManager',
  TSelectData = ReadContractResult<typeof synthAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: synthAccountABI,
    functionName: 'defaultManager',
    ...config,
  } as UseContractReadConfig<
    typeof synthAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"generativeCodeUri"`.
 */
export function useSynthAccountGenerativeCodeUri<
  TFunctionName extends 'generativeCodeUri',
  TSelectData = ReadContractResult<typeof synthAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: synthAccountABI,
    functionName: 'generativeCodeUri',
    ...config,
  } as UseContractReadConfig<
    typeof synthAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"getApproved"`.
 */
export function useSynthAccountGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof synthAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: synthAccountABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<
    typeof synthAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useSynthAccountIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof synthAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: synthAccountABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<
    typeof synthAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"isTrustedForwarder"`.
 */
export function useSynthAccountIsTrustedForwarder<
  TFunctionName extends 'isTrustedForwarder',
  TSelectData = ReadContractResult<typeof synthAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: synthAccountABI,
    functionName: 'isTrustedForwarder',
    ...config,
  } as UseContractReadConfig<
    typeof synthAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"isValidSignature"`.
 */
export function useSynthAccountIsValidSignature<
  TFunctionName extends 'isValidSignature',
  TSelectData = ReadContractResult<typeof synthAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: synthAccountABI,
    functionName: 'isValidSignature',
    ...config,
  } as UseContractReadConfig<
    typeof synthAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"isValidSigner"`.
 */
export function useSynthAccountIsValidSigner<
  TFunctionName extends 'isValidSigner',
  TSelectData = ReadContractResult<typeof synthAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: synthAccountABI,
    functionName: 'isValidSigner',
    ...config,
  } as UseContractReadConfig<
    typeof synthAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"limitSupply"`.
 */
export function useSynthAccountLimitSupply<
  TFunctionName extends 'limitSupply',
  TSelectData = ReadContractResult<typeof synthAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: synthAccountABI,
    functionName: 'limitSupply',
    ...config,
  } as UseContractReadConfig<
    typeof synthAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"minters"`.
 */
export function useSynthAccountMinters<
  TFunctionName extends 'minters',
  TSelectData = ReadContractResult<typeof synthAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: synthAccountABI,
    functionName: 'minters',
    ...config,
  } as UseContractReadConfig<
    typeof synthAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"name"`.
 */
export function useSynthAccountName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof synthAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: synthAccountABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<
    typeof synthAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"observability"`.
 */
export function useSynthAccountObservability<
  TFunctionName extends 'observability',
  TSelectData = ReadContractResult<typeof synthAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: synthAccountABI,
    functionName: 'observability',
    ...config,
  } as UseContractReadConfig<
    typeof synthAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"operatorFiltererRegistry"`.
 */
export function useSynthAccountOperatorFiltererRegistry<
  TFunctionName extends 'operatorFiltererRegistry',
  TSelectData = ReadContractResult<typeof synthAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: synthAccountABI,
    functionName: 'operatorFiltererRegistry',
    ...config,
  } as UseContractReadConfig<
    typeof synthAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"owner"`.
 */
export function useSynthAccountOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof synthAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: synthAccountABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof synthAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useSynthAccountOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof synthAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: synthAccountABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<
    typeof synthAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"royaltyInfo"`.
 */
export function useSynthAccountRoyaltyInfo<
  TFunctionName extends 'royaltyInfo',
  TSelectData = ReadContractResult<typeof synthAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: synthAccountABI,
    functionName: 'royaltyInfo',
    ...config,
  } as UseContractReadConfig<
    typeof synthAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"royaltyManager"`.
 */
export function useSynthAccountRoyaltyManager<
  TFunctionName extends 'royaltyManager',
  TSelectData = ReadContractResult<typeof synthAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: synthAccountABI,
    functionName: 'royaltyManager',
    ...config,
  } as UseContractReadConfig<
    typeof synthAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"state"`.
 */
export function useSynthAccountState<
  TFunctionName extends 'state',
  TSelectData = ReadContractResult<typeof synthAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: synthAccountABI,
    functionName: 'state',
    ...config,
  } as UseContractReadConfig<
    typeof synthAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useSynthAccountSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof synthAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: synthAccountABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof synthAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"symbol"`.
 */
export function useSynthAccountSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof synthAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: synthAccountABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<
    typeof synthAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"token"`.
 */
export function useSynthAccountToken<
  TFunctionName extends 'token',
  TSelectData = ReadContractResult<typeof synthAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: synthAccountABI,
    functionName: 'token',
    ...config,
  } as UseContractReadConfig<
    typeof synthAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"tokenManager"`.
 */
export function useSynthAccountTokenManager<
  TFunctionName extends 'tokenManager',
  TSelectData = ReadContractResult<typeof synthAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: synthAccountABI,
    functionName: 'tokenManager',
    ...config,
  } as UseContractReadConfig<
    typeof synthAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useSynthAccountTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<typeof synthAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: synthAccountABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<
    typeof synthAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useSynthAccountTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof synthAccountABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthAccountABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: synthAccountABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof synthAccountABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthAccountABI}__.
 */
export function useSynthAccountWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthAccountABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof synthAccountABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof synthAccountABI, TFunctionName, TMode>({
    abi: synthAccountABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"approve"`.
 */
export function useSynthAccountApprove<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthAccountABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof synthAccountABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof synthAccountABI, 'approve', TMode>({
    abi: synthAccountABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"burn"`.
 */
export function useSynthAccountBurn<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthAccountABI,
          'burn'
        >['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<typeof synthAccountABI, 'burn', TMode> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<typeof synthAccountABI, 'burn', TMode>({
    abi: synthAccountABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"execute"`.
 */
export function useSynthAccountExecute<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthAccountABI,
          'execute'
        >['request']['abi'],
        'execute',
        TMode
      > & { functionName?: 'execute' }
    : UseContractWriteConfig<typeof synthAccountABI, 'execute', TMode> & {
        abi?: never
        functionName?: 'execute'
      } = {} as any,
) {
  return useContractWrite<typeof synthAccountABI, 'execute', TMode>({
    abi: synthAccountABI,
    functionName: 'execute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"freezeMints"`.
 */
export function useSynthAccountFreezeMints<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthAccountABI,
          'freezeMints'
        >['request']['abi'],
        'freezeMints',
        TMode
      > & { functionName?: 'freezeMints' }
    : UseContractWriteConfig<typeof synthAccountABI, 'freezeMints', TMode> & {
        abi?: never
        functionName?: 'freezeMints'
      } = {} as any,
) {
  return useContractWrite<typeof synthAccountABI, 'freezeMints', TMode>({
    abi: synthAccountABI,
    functionName: 'freezeMints',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"generateArt"`.
 */
export function useSynthAccountGenerateArt<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthAccountABI,
          'generateArt'
        >['request']['abi'],
        'generateArt',
        TMode
      > & { functionName?: 'generateArt' }
    : UseContractWriteConfig<typeof synthAccountABI, 'generateArt', TMode> & {
        abi?: never
        functionName?: 'generateArt'
      } = {} as any,
) {
  return useContractWrite<typeof synthAccountABI, 'generateArt', TMode>({
    abi: synthAccountABI,
    functionName: 'generateArt',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"initialize"`.
 */
export function useSynthAccountInitialize<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthAccountABI,
          'initialize'
        >['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof synthAccountABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<typeof synthAccountABI, 'initialize', TMode>({
    abi: synthAccountABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"mintAmountToOneRecipient"`.
 */
export function useSynthAccountMintAmountToOneRecipient<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthAccountABI,
          'mintAmountToOneRecipient'
        >['request']['abi'],
        'mintAmountToOneRecipient',
        TMode
      > & { functionName?: 'mintAmountToOneRecipient' }
    : UseContractWriteConfig<
        typeof synthAccountABI,
        'mintAmountToOneRecipient',
        TMode
      > & {
        abi?: never
        functionName?: 'mintAmountToOneRecipient'
      } = {} as any,
) {
  return useContractWrite<
    typeof synthAccountABI,
    'mintAmountToOneRecipient',
    TMode
  >({
    abi: synthAccountABI,
    functionName: 'mintAmountToOneRecipient',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"mintOneToMultipleRecipients"`.
 */
export function useSynthAccountMintOneToMultipleRecipients<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthAccountABI,
          'mintOneToMultipleRecipients'
        >['request']['abi'],
        'mintOneToMultipleRecipients',
        TMode
      > & { functionName?: 'mintOneToMultipleRecipients' }
    : UseContractWriteConfig<
        typeof synthAccountABI,
        'mintOneToMultipleRecipients',
        TMode
      > & {
        abi?: never
        functionName?: 'mintOneToMultipleRecipients'
      } = {} as any,
) {
  return useContractWrite<
    typeof synthAccountABI,
    'mintOneToMultipleRecipients',
    TMode
  >({
    abi: synthAccountABI,
    functionName: 'mintOneToMultipleRecipients',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"mintOneToOneRecipient"`.
 */
export function useSynthAccountMintOneToOneRecipient<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthAccountABI,
          'mintOneToOneRecipient'
        >['request']['abi'],
        'mintOneToOneRecipient',
        TMode
      > & { functionName?: 'mintOneToOneRecipient' }
    : UseContractWriteConfig<
        typeof synthAccountABI,
        'mintOneToOneRecipient',
        TMode
      > & {
        abi?: never
        functionName?: 'mintOneToOneRecipient'
      } = {} as any,
) {
  return useContractWrite<
    typeof synthAccountABI,
    'mintOneToOneRecipient',
    TMode
  >({
    abi: synthAccountABI,
    functionName: 'mintOneToOneRecipient',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"mintSameAmountToMultipleRecipients"`.
 */
export function useSynthAccountMintSameAmountToMultipleRecipients<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthAccountABI,
          'mintSameAmountToMultipleRecipients'
        >['request']['abi'],
        'mintSameAmountToMultipleRecipients',
        TMode
      > & { functionName?: 'mintSameAmountToMultipleRecipients' }
    : UseContractWriteConfig<
        typeof synthAccountABI,
        'mintSameAmountToMultipleRecipients',
        TMode
      > & {
        abi?: never
        functionName?: 'mintSameAmountToMultipleRecipients'
      } = {} as any,
) {
  return useContractWrite<
    typeof synthAccountABI,
    'mintSameAmountToMultipleRecipients',
    TMode
  >({
    abi: synthAccountABI,
    functionName: 'mintSameAmountToMultipleRecipients',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"mintSpecificTokenToOneRecipient"`.
 */
export function useSynthAccountMintSpecificTokenToOneRecipient<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthAccountABI,
          'mintSpecificTokenToOneRecipient'
        >['request']['abi'],
        'mintSpecificTokenToOneRecipient',
        TMode
      > & { functionName?: 'mintSpecificTokenToOneRecipient' }
    : UseContractWriteConfig<
        typeof synthAccountABI,
        'mintSpecificTokenToOneRecipient',
        TMode
      > & {
        abi?: never
        functionName?: 'mintSpecificTokenToOneRecipient'
      } = {} as any,
) {
  return useContractWrite<
    typeof synthAccountABI,
    'mintSpecificTokenToOneRecipient',
    TMode
  >({
    abi: synthAccountABI,
    functionName: 'mintSpecificTokenToOneRecipient',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"mintSpecificTokensToOneRecipient"`.
 */
export function useSynthAccountMintSpecificTokensToOneRecipient<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthAccountABI,
          'mintSpecificTokensToOneRecipient'
        >['request']['abi'],
        'mintSpecificTokensToOneRecipient',
        TMode
      > & { functionName?: 'mintSpecificTokensToOneRecipient' }
    : UseContractWriteConfig<
        typeof synthAccountABI,
        'mintSpecificTokensToOneRecipient',
        TMode
      > & {
        abi?: never
        functionName?: 'mintSpecificTokensToOneRecipient'
      } = {} as any,
) {
  return useContractWrite<
    typeof synthAccountABI,
    'mintSpecificTokensToOneRecipient',
    TMode
  >({
    abi: synthAccountABI,
    functionName: 'mintSpecificTokensToOneRecipient',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"registerMinter"`.
 */
export function useSynthAccountRegisterMinter<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthAccountABI,
          'registerMinter'
        >['request']['abi'],
        'registerMinter',
        TMode
      > & { functionName?: 'registerMinter' }
    : UseContractWriteConfig<
        typeof synthAccountABI,
        'registerMinter',
        TMode
      > & {
        abi?: never
        functionName?: 'registerMinter'
      } = {} as any,
) {
  return useContractWrite<typeof synthAccountABI, 'registerMinter', TMode>({
    abi: synthAccountABI,
    functionName: 'registerMinter',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"removeDefaultTokenManager"`.
 */
export function useSynthAccountRemoveDefaultTokenManager<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthAccountABI,
          'removeDefaultTokenManager'
        >['request']['abi'],
        'removeDefaultTokenManager',
        TMode
      > & { functionName?: 'removeDefaultTokenManager' }
    : UseContractWriteConfig<
        typeof synthAccountABI,
        'removeDefaultTokenManager',
        TMode
      > & {
        abi?: never
        functionName?: 'removeDefaultTokenManager'
      } = {} as any,
) {
  return useContractWrite<
    typeof synthAccountABI,
    'removeDefaultTokenManager',
    TMode
  >({
    abi: synthAccountABI,
    functionName: 'removeDefaultTokenManager',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"removeGranularTokenManagers"`.
 */
export function useSynthAccountRemoveGranularTokenManagers<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthAccountABI,
          'removeGranularTokenManagers'
        >['request']['abi'],
        'removeGranularTokenManagers',
        TMode
      > & { functionName?: 'removeGranularTokenManagers' }
    : UseContractWriteConfig<
        typeof synthAccountABI,
        'removeGranularTokenManagers',
        TMode
      > & {
        abi?: never
        functionName?: 'removeGranularTokenManagers'
      } = {} as any,
) {
  return useContractWrite<
    typeof synthAccountABI,
    'removeGranularTokenManagers',
    TMode
  >({
    abi: synthAccountABI,
    functionName: 'removeGranularTokenManagers',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"removeMarketplaceFiltererRegistryAndUnregister"`.
 */
export function useSynthAccountRemoveMarketplaceFiltererRegistryAndUnregister<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthAccountABI,
          'removeMarketplaceFiltererRegistryAndUnregister'
        >['request']['abi'],
        'removeMarketplaceFiltererRegistryAndUnregister',
        TMode
      > & { functionName?: 'removeMarketplaceFiltererRegistryAndUnregister' }
    : UseContractWriteConfig<
        typeof synthAccountABI,
        'removeMarketplaceFiltererRegistryAndUnregister',
        TMode
      > & {
        abi?: never
        functionName?: 'removeMarketplaceFiltererRegistryAndUnregister'
      } = {} as any,
) {
  return useContractWrite<
    typeof synthAccountABI,
    'removeMarketplaceFiltererRegistryAndUnregister',
    TMode
  >({
    abi: synthAccountABI,
    functionName: 'removeMarketplaceFiltererRegistryAndUnregister',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"removeRoyaltyManager"`.
 */
export function useSynthAccountRemoveRoyaltyManager<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthAccountABI,
          'removeRoyaltyManager'
        >['request']['abi'],
        'removeRoyaltyManager',
        TMode
      > & { functionName?: 'removeRoyaltyManager' }
    : UseContractWriteConfig<
        typeof synthAccountABI,
        'removeRoyaltyManager',
        TMode
      > & {
        abi?: never
        functionName?: 'removeRoyaltyManager'
      } = {} as any,
) {
  return useContractWrite<
    typeof synthAccountABI,
    'removeRoyaltyManager',
    TMode
  >({
    abi: synthAccountABI,
    functionName: 'removeRoyaltyManager',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useSynthAccountRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthAccountABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        typeof synthAccountABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof synthAccountABI, 'renounceOwnership', TMode>({
    abi: synthAccountABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useSynthAccountSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthAccountABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<
        typeof synthAccountABI,
        'safeTransferFrom',
        TMode
      > & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof synthAccountABI, 'safeTransferFrom', TMode>({
    abi: synthAccountABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useSynthAccountSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthAccountABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<
        typeof synthAccountABI,
        'setApprovalForAll',
        TMode
      > & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<typeof synthAccountABI, 'setApprovalForAll', TMode>({
    abi: synthAccountABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"setBaseURI"`.
 */
export function useSynthAccountSetBaseUri<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthAccountABI,
          'setBaseURI'
        >['request']['abi'],
        'setBaseURI',
        TMode
      > & { functionName?: 'setBaseURI' }
    : UseContractWriteConfig<typeof synthAccountABI, 'setBaseURI', TMode> & {
        abi?: never
        functionName?: 'setBaseURI'
      } = {} as any,
) {
  return useContractWrite<typeof synthAccountABI, 'setBaseURI', TMode>({
    abi: synthAccountABI,
    functionName: 'setBaseURI',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"setContractMetadata"`.
 */
export function useSynthAccountSetContractMetadata<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthAccountABI,
          'setContractMetadata'
        >['request']['abi'],
        'setContractMetadata',
        TMode
      > & { functionName?: 'setContractMetadata' }
    : UseContractWriteConfig<
        typeof synthAccountABI,
        'setContractMetadata',
        TMode
      > & {
        abi?: never
        functionName?: 'setContractMetadata'
      } = {} as any,
) {
  return useContractWrite<typeof synthAccountABI, 'setContractMetadata', TMode>(
    {
      abi: synthAccountABI,
      functionName: 'setContractMetadata',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription"`.
 */
export function useSynthAccountSetCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthAccountABI,
          'setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription'
        >['request']['abi'],
        'setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
        TMode
      > & {
        functionName?: 'setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription'
      }
    : UseContractWriteConfig<
        typeof synthAccountABI,
        'setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
        TMode
      > & {
        abi?: never
        functionName?: 'setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription'
      } = {} as any,
) {
  return useContractWrite<
    typeof synthAccountABI,
    'setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
    TMode
  >({
    abi: synthAccountABI,
    functionName:
      'setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"setDefaultRoyalty"`.
 */
export function useSynthAccountSetDefaultRoyalty<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthAccountABI,
          'setDefaultRoyalty'
        >['request']['abi'],
        'setDefaultRoyalty',
        TMode
      > & { functionName?: 'setDefaultRoyalty' }
    : UseContractWriteConfig<
        typeof synthAccountABI,
        'setDefaultRoyalty',
        TMode
      > & {
        abi?: never
        functionName?: 'setDefaultRoyalty'
      } = {} as any,
) {
  return useContractWrite<typeof synthAccountABI, 'setDefaultRoyalty', TMode>({
    abi: synthAccountABI,
    functionName: 'setDefaultRoyalty',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"setDefaultTokenManager"`.
 */
export function useSynthAccountSetDefaultTokenManager<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthAccountABI,
          'setDefaultTokenManager'
        >['request']['abi'],
        'setDefaultTokenManager',
        TMode
      > & { functionName?: 'setDefaultTokenManager' }
    : UseContractWriteConfig<
        typeof synthAccountABI,
        'setDefaultTokenManager',
        TMode
      > & {
        abi?: never
        functionName?: 'setDefaultTokenManager'
      } = {} as any,
) {
  return useContractWrite<
    typeof synthAccountABI,
    'setDefaultTokenManager',
    TMode
  >({
    abi: synthAccountABI,
    functionName: 'setDefaultTokenManager',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"setGranularRoyalties"`.
 */
export function useSynthAccountSetGranularRoyalties<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthAccountABI,
          'setGranularRoyalties'
        >['request']['abi'],
        'setGranularRoyalties',
        TMode
      > & { functionName?: 'setGranularRoyalties' }
    : UseContractWriteConfig<
        typeof synthAccountABI,
        'setGranularRoyalties',
        TMode
      > & {
        abi?: never
        functionName?: 'setGranularRoyalties'
      } = {} as any,
) {
  return useContractWrite<
    typeof synthAccountABI,
    'setGranularRoyalties',
    TMode
  >({
    abi: synthAccountABI,
    functionName: 'setGranularRoyalties',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"setGranularTokenManagers"`.
 */
export function useSynthAccountSetGranularTokenManagers<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthAccountABI,
          'setGranularTokenManagers'
        >['request']['abi'],
        'setGranularTokenManagers',
        TMode
      > & { functionName?: 'setGranularTokenManagers' }
    : UseContractWriteConfig<
        typeof synthAccountABI,
        'setGranularTokenManagers',
        TMode
      > & {
        abi?: never
        functionName?: 'setGranularTokenManagers'
      } = {} as any,
) {
  return useContractWrite<
    typeof synthAccountABI,
    'setGranularTokenManagers',
    TMode
  >({
    abi: synthAccountABI,
    functionName: 'setGranularTokenManagers',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"setLimitSupply"`.
 */
export function useSynthAccountSetLimitSupply<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthAccountABI,
          'setLimitSupply'
        >['request']['abi'],
        'setLimitSupply',
        TMode
      > & { functionName?: 'setLimitSupply' }
    : UseContractWriteConfig<
        typeof synthAccountABI,
        'setLimitSupply',
        TMode
      > & {
        abi?: never
        functionName?: 'setLimitSupply'
      } = {} as any,
) {
  return useContractWrite<typeof synthAccountABI, 'setLimitSupply', TMode>({
    abi: synthAccountABI,
    functionName: 'setLimitSupply',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"setMarketplaceFiltererRegistryAndRegisterDefaultSubscription"`.
 */
export function useSynthAccountSetMarketplaceFiltererRegistryAndRegisterDefaultSubscription<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthAccountABI,
          'setMarketplaceFiltererRegistryAndRegisterDefaultSubscription'
        >['request']['abi'],
        'setMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
        TMode
      > & {
        functionName?: 'setMarketplaceFiltererRegistryAndRegisterDefaultSubscription'
      }
    : UseContractWriteConfig<
        typeof synthAccountABI,
        'setMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
        TMode
      > & {
        abi?: never
        functionName?: 'setMarketplaceFiltererRegistryAndRegisterDefaultSubscription'
      } = {} as any,
) {
  return useContractWrite<
    typeof synthAccountABI,
    'setMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
    TMode
  >({
    abi: synthAccountABI,
    functionName:
      'setMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"setRoyaltyManager"`.
 */
export function useSynthAccountSetRoyaltyManager<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthAccountABI,
          'setRoyaltyManager'
        >['request']['abi'],
        'setRoyaltyManager',
        TMode
      > & { functionName?: 'setRoyaltyManager' }
    : UseContractWriteConfig<
        typeof synthAccountABI,
        'setRoyaltyManager',
        TMode
      > & {
        abi?: never
        functionName?: 'setRoyaltyManager'
      } = {} as any,
) {
  return useContractWrite<typeof synthAccountABI, 'setRoyaltyManager', TMode>({
    abi: synthAccountABI,
    functionName: 'setRoyaltyManager',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"setTokenURIs"`.
 */
export function useSynthAccountSetTokenUrIs<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthAccountABI,
          'setTokenURIs'
        >['request']['abi'],
        'setTokenURIs',
        TMode
      > & { functionName?: 'setTokenURIs' }
    : UseContractWriteConfig<typeof synthAccountABI, 'setTokenURIs', TMode> & {
        abi?: never
        functionName?: 'setTokenURIs'
      } = {} as any,
) {
  return useContractWrite<typeof synthAccountABI, 'setTokenURIs', TMode>({
    abi: synthAccountABI,
    functionName: 'setTokenURIs',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useSynthAccountTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthAccountABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof synthAccountABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof synthAccountABI, 'transferFrom', TMode>({
    abi: synthAccountABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useSynthAccountTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthAccountABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        typeof synthAccountABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof synthAccountABI, 'transferOwnership', TMode>({
    abi: synthAccountABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"unregisterMinter"`.
 */
export function useSynthAccountUnregisterMinter<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthAccountABI,
          'unregisterMinter'
        >['request']['abi'],
        'unregisterMinter',
        TMode
      > & { functionName?: 'unregisterMinter' }
    : UseContractWriteConfig<
        typeof synthAccountABI,
        'unregisterMinter',
        TMode
      > & {
        abi?: never
        functionName?: 'unregisterMinter'
      } = {} as any,
) {
  return useContractWrite<typeof synthAccountABI, 'unregisterMinter', TMode>({
    abi: synthAccountABI,
    functionName: 'unregisterMinter',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthAccountABI}__.
 */
export function usePrepareSynthAccountWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof synthAccountABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthAccountABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof synthAccountABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareSynthAccountApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof synthAccountABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthAccountABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof synthAccountABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareSynthAccountBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof synthAccountABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthAccountABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof synthAccountABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"execute"`.
 */
export function usePrepareSynthAccountExecute(
  config: Omit<
    UsePrepareContractWriteConfig<typeof synthAccountABI, 'execute'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthAccountABI,
    functionName: 'execute',
    ...config,
  } as UsePrepareContractWriteConfig<typeof synthAccountABI, 'execute'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"freezeMints"`.
 */
export function usePrepareSynthAccountFreezeMints(
  config: Omit<
    UsePrepareContractWriteConfig<typeof synthAccountABI, 'freezeMints'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthAccountABI,
    functionName: 'freezeMints',
    ...config,
  } as UsePrepareContractWriteConfig<typeof synthAccountABI, 'freezeMints'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"generateArt"`.
 */
export function usePrepareSynthAccountGenerateArt(
  config: Omit<
    UsePrepareContractWriteConfig<typeof synthAccountABI, 'generateArt'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthAccountABI,
    functionName: 'generateArt',
    ...config,
  } as UsePrepareContractWriteConfig<typeof synthAccountABI, 'generateArt'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareSynthAccountInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof synthAccountABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthAccountABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof synthAccountABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"mintAmountToOneRecipient"`.
 */
export function usePrepareSynthAccountMintAmountToOneRecipient(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof synthAccountABI,
      'mintAmountToOneRecipient'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthAccountABI,
    functionName: 'mintAmountToOneRecipient',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof synthAccountABI,
    'mintAmountToOneRecipient'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"mintOneToMultipleRecipients"`.
 */
export function usePrepareSynthAccountMintOneToMultipleRecipients(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof synthAccountABI,
      'mintOneToMultipleRecipients'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthAccountABI,
    functionName: 'mintOneToMultipleRecipients',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof synthAccountABI,
    'mintOneToMultipleRecipients'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"mintOneToOneRecipient"`.
 */
export function usePrepareSynthAccountMintOneToOneRecipient(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof synthAccountABI,
      'mintOneToOneRecipient'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthAccountABI,
    functionName: 'mintOneToOneRecipient',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof synthAccountABI,
    'mintOneToOneRecipient'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"mintSameAmountToMultipleRecipients"`.
 */
export function usePrepareSynthAccountMintSameAmountToMultipleRecipients(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof synthAccountABI,
      'mintSameAmountToMultipleRecipients'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthAccountABI,
    functionName: 'mintSameAmountToMultipleRecipients',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof synthAccountABI,
    'mintSameAmountToMultipleRecipients'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"mintSpecificTokenToOneRecipient"`.
 */
export function usePrepareSynthAccountMintSpecificTokenToOneRecipient(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof synthAccountABI,
      'mintSpecificTokenToOneRecipient'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthAccountABI,
    functionName: 'mintSpecificTokenToOneRecipient',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof synthAccountABI,
    'mintSpecificTokenToOneRecipient'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"mintSpecificTokensToOneRecipient"`.
 */
export function usePrepareSynthAccountMintSpecificTokensToOneRecipient(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof synthAccountABI,
      'mintSpecificTokensToOneRecipient'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthAccountABI,
    functionName: 'mintSpecificTokensToOneRecipient',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof synthAccountABI,
    'mintSpecificTokensToOneRecipient'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"registerMinter"`.
 */
export function usePrepareSynthAccountRegisterMinter(
  config: Omit<
    UsePrepareContractWriteConfig<typeof synthAccountABI, 'registerMinter'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthAccountABI,
    functionName: 'registerMinter',
    ...config,
  } as UsePrepareContractWriteConfig<typeof synthAccountABI, 'registerMinter'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"removeDefaultTokenManager"`.
 */
export function usePrepareSynthAccountRemoveDefaultTokenManager(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof synthAccountABI,
      'removeDefaultTokenManager'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthAccountABI,
    functionName: 'removeDefaultTokenManager',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof synthAccountABI,
    'removeDefaultTokenManager'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"removeGranularTokenManagers"`.
 */
export function usePrepareSynthAccountRemoveGranularTokenManagers(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof synthAccountABI,
      'removeGranularTokenManagers'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthAccountABI,
    functionName: 'removeGranularTokenManagers',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof synthAccountABI,
    'removeGranularTokenManagers'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"removeMarketplaceFiltererRegistryAndUnregister"`.
 */
export function usePrepareSynthAccountRemoveMarketplaceFiltererRegistryAndUnregister(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof synthAccountABI,
      'removeMarketplaceFiltererRegistryAndUnregister'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthAccountABI,
    functionName: 'removeMarketplaceFiltererRegistryAndUnregister',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof synthAccountABI,
    'removeMarketplaceFiltererRegistryAndUnregister'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"removeRoyaltyManager"`.
 */
export function usePrepareSynthAccountRemoveRoyaltyManager(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof synthAccountABI,
      'removeRoyaltyManager'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthAccountABI,
    functionName: 'removeRoyaltyManager',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof synthAccountABI,
    'removeRoyaltyManager'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareSynthAccountRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof synthAccountABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthAccountABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof synthAccountABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareSynthAccountSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof synthAccountABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthAccountABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof synthAccountABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareSynthAccountSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof synthAccountABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthAccountABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof synthAccountABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"setBaseURI"`.
 */
export function usePrepareSynthAccountSetBaseUri(
  config: Omit<
    UsePrepareContractWriteConfig<typeof synthAccountABI, 'setBaseURI'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthAccountABI,
    functionName: 'setBaseURI',
    ...config,
  } as UsePrepareContractWriteConfig<typeof synthAccountABI, 'setBaseURI'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"setContractMetadata"`.
 */
export function usePrepareSynthAccountSetContractMetadata(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof synthAccountABI,
      'setContractMetadata'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthAccountABI,
    functionName: 'setContractMetadata',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof synthAccountABI,
    'setContractMetadata'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription"`.
 */
export function usePrepareSynthAccountSetCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof synthAccountABI,
      'setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthAccountABI,
    functionName:
      'setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof synthAccountABI,
    'setCustomMarketplaceFiltererRegistryAndRegisterDefaultSubscription'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"setDefaultRoyalty"`.
 */
export function usePrepareSynthAccountSetDefaultRoyalty(
  config: Omit<
    UsePrepareContractWriteConfig<typeof synthAccountABI, 'setDefaultRoyalty'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthAccountABI,
    functionName: 'setDefaultRoyalty',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof synthAccountABI,
    'setDefaultRoyalty'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"setDefaultTokenManager"`.
 */
export function usePrepareSynthAccountSetDefaultTokenManager(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof synthAccountABI,
      'setDefaultTokenManager'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthAccountABI,
    functionName: 'setDefaultTokenManager',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof synthAccountABI,
    'setDefaultTokenManager'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"setGranularRoyalties"`.
 */
export function usePrepareSynthAccountSetGranularRoyalties(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof synthAccountABI,
      'setGranularRoyalties'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthAccountABI,
    functionName: 'setGranularRoyalties',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof synthAccountABI,
    'setGranularRoyalties'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"setGranularTokenManagers"`.
 */
export function usePrepareSynthAccountSetGranularTokenManagers(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof synthAccountABI,
      'setGranularTokenManagers'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthAccountABI,
    functionName: 'setGranularTokenManagers',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof synthAccountABI,
    'setGranularTokenManagers'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"setLimitSupply"`.
 */
export function usePrepareSynthAccountSetLimitSupply(
  config: Omit<
    UsePrepareContractWriteConfig<typeof synthAccountABI, 'setLimitSupply'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthAccountABI,
    functionName: 'setLimitSupply',
    ...config,
  } as UsePrepareContractWriteConfig<typeof synthAccountABI, 'setLimitSupply'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"setMarketplaceFiltererRegistryAndRegisterDefaultSubscription"`.
 */
export function usePrepareSynthAccountSetMarketplaceFiltererRegistryAndRegisterDefaultSubscription(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof synthAccountABI,
      'setMarketplaceFiltererRegistryAndRegisterDefaultSubscription'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthAccountABI,
    functionName:
      'setMarketplaceFiltererRegistryAndRegisterDefaultSubscription',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof synthAccountABI,
    'setMarketplaceFiltererRegistryAndRegisterDefaultSubscription'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"setRoyaltyManager"`.
 */
export function usePrepareSynthAccountSetRoyaltyManager(
  config: Omit<
    UsePrepareContractWriteConfig<typeof synthAccountABI, 'setRoyaltyManager'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthAccountABI,
    functionName: 'setRoyaltyManager',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof synthAccountABI,
    'setRoyaltyManager'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"setTokenURIs"`.
 */
export function usePrepareSynthAccountSetTokenUrIs(
  config: Omit<
    UsePrepareContractWriteConfig<typeof synthAccountABI, 'setTokenURIs'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthAccountABI,
    functionName: 'setTokenURIs',
    ...config,
  } as UsePrepareContractWriteConfig<typeof synthAccountABI, 'setTokenURIs'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareSynthAccountTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof synthAccountABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthAccountABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof synthAccountABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareSynthAccountTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof synthAccountABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthAccountABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof synthAccountABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthAccountABI}__ and `functionName` set to `"unregisterMinter"`.
 */
export function usePrepareSynthAccountUnregisterMinter(
  config: Omit<
    UsePrepareContractWriteConfig<typeof synthAccountABI, 'unregisterMinter'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthAccountABI,
    functionName: 'unregisterMinter',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof synthAccountABI,
    'unregisterMinter'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link synthAccountABI}__.
 */
export function useSynthAccountEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof synthAccountABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: synthAccountABI,
    ...config,
  } as UseContractEventConfig<typeof synthAccountABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link synthAccountABI}__ and `eventName` set to `"Approval"`.
 */
export function useSynthAccountApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof synthAccountABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: synthAccountABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof synthAccountABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link synthAccountABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useSynthAccountApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof synthAccountABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: synthAccountABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof synthAccountABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link synthAccountABI}__ and `eventName` set to `"BaseURISet"`.
 */
export function useSynthAccountBaseUriSetEvent(
  config: Omit<
    UseContractEventConfig<typeof synthAccountABI, 'BaseURISet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: synthAccountABI,
    eventName: 'BaseURISet',
    ...config,
  } as UseContractEventConfig<typeof synthAccountABI, 'BaseURISet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link synthAccountABI}__ and `eventName` set to `"DefaultRoyaltySet"`.
 */
export function useSynthAccountDefaultRoyaltySetEvent(
  config: Omit<
    UseContractEventConfig<typeof synthAccountABI, 'DefaultRoyaltySet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: synthAccountABI,
    eventName: 'DefaultRoyaltySet',
    ...config,
  } as UseContractEventConfig<typeof synthAccountABI, 'DefaultRoyaltySet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link synthAccountABI}__ and `eventName` set to `"DefaultTokenManagerChanged"`.
 */
export function useSynthAccountDefaultTokenManagerChangedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof synthAccountABI,
      'DefaultTokenManagerChanged'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: synthAccountABI,
    eventName: 'DefaultTokenManagerChanged',
    ...config,
  } as UseContractEventConfig<
    typeof synthAccountABI,
    'DefaultTokenManagerChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link synthAccountABI}__ and `eventName` set to `"GranularRoyaltiesSet"`.
 */
export function useSynthAccountGranularRoyaltiesSetEvent(
  config: Omit<
    UseContractEventConfig<typeof synthAccountABI, 'GranularRoyaltiesSet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: synthAccountABI,
    eventName: 'GranularRoyaltiesSet',
    ...config,
  } as UseContractEventConfig<typeof synthAccountABI, 'GranularRoyaltiesSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link synthAccountABI}__ and `eventName` set to `"GranularTokenManagersRemoved"`.
 */
export function useSynthAccountGranularTokenManagersRemovedEvent(
  config: Omit<
    UseContractEventConfig<
      typeof synthAccountABI,
      'GranularTokenManagersRemoved'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: synthAccountABI,
    eventName: 'GranularTokenManagersRemoved',
    ...config,
  } as UseContractEventConfig<
    typeof synthAccountABI,
    'GranularTokenManagersRemoved'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link synthAccountABI}__ and `eventName` set to `"GranularTokenManagersSet"`.
 */
export function useSynthAccountGranularTokenManagersSetEvent(
  config: Omit<
    UseContractEventConfig<typeof synthAccountABI, 'GranularTokenManagersSet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: synthAccountABI,
    eventName: 'GranularTokenManagersSet',
    ...config,
  } as UseContractEventConfig<
    typeof synthAccountABI,
    'GranularTokenManagersSet'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link synthAccountABI}__ and `eventName` set to `"Initialized"`.
 */
export function useSynthAccountInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof synthAccountABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: synthAccountABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof synthAccountABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link synthAccountABI}__ and `eventName` set to `"LimitSupplySet"`.
 */
export function useSynthAccountLimitSupplySetEvent(
  config: Omit<
    UseContractEventConfig<typeof synthAccountABI, 'LimitSupplySet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: synthAccountABI,
    eventName: 'LimitSupplySet',
    ...config,
  } as UseContractEventConfig<typeof synthAccountABI, 'LimitSupplySet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link synthAccountABI}__ and `eventName` set to `"MinterRegistrationChanged"`.
 */
export function useSynthAccountMinterRegistrationChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof synthAccountABI, 'MinterRegistrationChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: synthAccountABI,
    eventName: 'MinterRegistrationChanged',
    ...config,
  } as UseContractEventConfig<
    typeof synthAccountABI,
    'MinterRegistrationChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link synthAccountABI}__ and `eventName` set to `"MintsFrozen"`.
 */
export function useSynthAccountMintsFrozenEvent(
  config: Omit<
    UseContractEventConfig<typeof synthAccountABI, 'MintsFrozen'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: synthAccountABI,
    eventName: 'MintsFrozen',
    ...config,
  } as UseContractEventConfig<typeof synthAccountABI, 'MintsFrozen'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link synthAccountABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useSynthAccountOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof synthAccountABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: synthAccountABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof synthAccountABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link synthAccountABI}__ and `eventName` set to `"RoyaltyManagerChanged"`.
 */
export function useSynthAccountRoyaltyManagerChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof synthAccountABI, 'RoyaltyManagerChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: synthAccountABI,
    eventName: 'RoyaltyManagerChanged',
    ...config,
  } as UseContractEventConfig<typeof synthAccountABI, 'RoyaltyManagerChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link synthAccountABI}__ and `eventName` set to `"TokenURIsSet"`.
 */
export function useSynthAccountTokenUrIsSetEvent(
  config: Omit<
    UseContractEventConfig<typeof synthAccountABI, 'TokenURIsSet'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: synthAccountABI,
    eventName: 'TokenURIsSet',
    ...config,
  } as UseContractEventConfig<typeof synthAccountABI, 'TokenURIsSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link synthAccountABI}__ and `eventName` set to `"Transfer"`.
 */
export function useSynthAccountTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof synthAccountABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: synthAccountABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof synthAccountABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function useUupsUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof uupsUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof uupsUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: uupsUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof uupsUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useUupsUpgradeableProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof uupsUpgradeableABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof uupsUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: uupsUpgradeableABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<
    typeof uupsUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function useUupsUpgradeableWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof uupsUpgradeableABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<
        typeof uupsUpgradeableABI,
        TFunctionName,
        TMode
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof uupsUpgradeableABI, TFunctionName, TMode>({
    abi: uupsUpgradeableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useUupsUpgradeableUpgradeTo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof uupsUpgradeableABI,
          'upgradeTo'
        >['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<typeof uupsUpgradeableABI, 'upgradeTo', TMode> & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any,
) {
  return useContractWrite<typeof uupsUpgradeableABI, 'upgradeTo', TMode>({
    abi: uupsUpgradeableABI,
    functionName: 'upgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useUupsUpgradeableUpgradeToAndCall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof uupsUpgradeableABI,
          'upgradeToAndCall'
        >['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<
        typeof uupsUpgradeableABI,
        'upgradeToAndCall',
        TMode
      > & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any,
) {
  return useContractWrite<typeof uupsUpgradeableABI, 'upgradeToAndCall', TMode>(
    {
      abi: uupsUpgradeableABI,
      functionName: 'upgradeToAndCall',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function usePrepareUupsUpgradeableWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof uupsUpgradeableABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: uupsUpgradeableABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof uupsUpgradeableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareUupsUpgradeableUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof uupsUpgradeableABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: uupsUpgradeableABI,
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof uupsUpgradeableABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareUupsUpgradeableUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof uupsUpgradeableABI,
      'upgradeToAndCall'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: uupsUpgradeableABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof uupsUpgradeableABI,
    'upgradeToAndCall'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function useUupsUpgradeableEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof uupsUpgradeableABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: uupsUpgradeableABI,
    ...config,
  } as UseContractEventConfig<typeof uupsUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useUupsUpgradeableAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof uupsUpgradeableABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: uupsUpgradeableABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof uupsUpgradeableABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useUupsUpgradeableBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof uupsUpgradeableABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: uupsUpgradeableABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof uupsUpgradeableABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useUupsUpgradeableInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof uupsUpgradeableABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: uupsUpgradeableABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof uupsUpgradeableABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useUupsUpgradeableUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof uupsUpgradeableABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: uupsUpgradeableABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof uupsUpgradeableABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthRegistryABI}__.
 */
export function useSynthRegistryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof synthRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthRegistryABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: synthRegistryABI,
    ...config,
  } as UseContractReadConfig<
    typeof synthRegistryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthRegistryABI}__ and `functionName` set to `"owner"`.
 */
export function useSynthRegistryOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof synthRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthRegistryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: synthRegistryABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof synthRegistryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthRegistryABI}__ and `functionName` set to `"paused"`.
 */
export function useSynthRegistryPaused<
  TFunctionName extends 'paused',
  TSelectData = ReadContractResult<typeof synthRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthRegistryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: synthRegistryABI,
    functionName: 'paused',
    ...config,
  } as UseContractReadConfig<
    typeof synthRegistryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthRegistryABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useSynthRegistryProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof synthRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthRegistryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: synthRegistryABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<
    typeof synthRegistryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthRegistryABI}__ and `functionName` set to `"synthExists"`.
 */
export function useSynthRegistrySynthExists<
  TFunctionName extends 'synthExists',
  TSelectData = ReadContractResult<typeof synthRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthRegistryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: synthRegistryABI,
    functionName: 'synthExists',
    ...config,
  } as UseContractReadConfig<
    typeof synthRegistryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthRegistryABI}__.
 */
export function useSynthRegistryWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthRegistryABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof synthRegistryABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof synthRegistryABI, TFunctionName, TMode>({
    abi: synthRegistryABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthRegistryABI}__ and `functionName` set to `"createSynth"`.
 */
export function useSynthRegistryCreateSynth<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthRegistryABI,
          'createSynth'
        >['request']['abi'],
        'createSynth',
        TMode
      > & { functionName?: 'createSynth' }
    : UseContractWriteConfig<typeof synthRegistryABI, 'createSynth', TMode> & {
        abi?: never
        functionName?: 'createSynth'
      } = {} as any,
) {
  return useContractWrite<typeof synthRegistryABI, 'createSynth', TMode>({
    abi: synthRegistryABI,
    functionName: 'createSynth',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthRegistryABI}__ and `functionName` set to `"initialize"`.
 */
export function useSynthRegistryInitialize<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthRegistryABI,
          'initialize'
        >['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof synthRegistryABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<typeof synthRegistryABI, 'initialize', TMode>({
    abi: synthRegistryABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthRegistryABI}__ and `functionName` set to `"pause"`.
 */
export function useSynthRegistryPause<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthRegistryABI,
          'pause'
        >['request']['abi'],
        'pause',
        TMode
      > & { functionName?: 'pause' }
    : UseContractWriteConfig<typeof synthRegistryABI, 'pause', TMode> & {
        abi?: never
        functionName?: 'pause'
      } = {} as any,
) {
  return useContractWrite<typeof synthRegistryABI, 'pause', TMode>({
    abi: synthRegistryABI,
    functionName: 'pause',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthRegistryABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useSynthRegistryRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthRegistryABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        typeof synthRegistryABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof synthRegistryABI, 'renounceOwnership', TMode>({
    abi: synthRegistryABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthRegistryABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useSynthRegistryTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthRegistryABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        typeof synthRegistryABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof synthRegistryABI, 'transferOwnership', TMode>({
    abi: synthRegistryABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthRegistryABI}__ and `functionName` set to `"unpause"`.
 */
export function useSynthRegistryUnpause<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthRegistryABI,
          'unpause'
        >['request']['abi'],
        'unpause',
        TMode
      > & { functionName?: 'unpause' }
    : UseContractWriteConfig<typeof synthRegistryABI, 'unpause', TMode> & {
        abi?: never
        functionName?: 'unpause'
      } = {} as any,
) {
  return useContractWrite<typeof synthRegistryABI, 'unpause', TMode>({
    abi: synthRegistryABI,
    functionName: 'unpause',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthRegistryABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useSynthRegistryUpgradeTo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthRegistryABI,
          'upgradeTo'
        >['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<typeof synthRegistryABI, 'upgradeTo', TMode> & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any,
) {
  return useContractWrite<typeof synthRegistryABI, 'upgradeTo', TMode>({
    abi: synthRegistryABI,
    functionName: 'upgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthRegistryABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useSynthRegistryUpgradeToAndCall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthRegistryABI,
          'upgradeToAndCall'
        >['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<
        typeof synthRegistryABI,
        'upgradeToAndCall',
        TMode
      > & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any,
) {
  return useContractWrite<typeof synthRegistryABI, 'upgradeToAndCall', TMode>({
    abi: synthRegistryABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthRegistryABI}__.
 */
export function usePrepareSynthRegistryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof synthRegistryABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthRegistryABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof synthRegistryABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthRegistryABI}__ and `functionName` set to `"createSynth"`.
 */
export function usePrepareSynthRegistryCreateSynth(
  config: Omit<
    UsePrepareContractWriteConfig<typeof synthRegistryABI, 'createSynth'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthRegistryABI,
    functionName: 'createSynth',
    ...config,
  } as UsePrepareContractWriteConfig<typeof synthRegistryABI, 'createSynth'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthRegistryABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareSynthRegistryInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof synthRegistryABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthRegistryABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof synthRegistryABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthRegistryABI}__ and `functionName` set to `"pause"`.
 */
export function usePrepareSynthRegistryPause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof synthRegistryABI, 'pause'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthRegistryABI,
    functionName: 'pause',
    ...config,
  } as UsePrepareContractWriteConfig<typeof synthRegistryABI, 'pause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthRegistryABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareSynthRegistryRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof synthRegistryABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthRegistryABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof synthRegistryABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthRegistryABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareSynthRegistryTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof synthRegistryABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthRegistryABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof synthRegistryABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthRegistryABI}__ and `functionName` set to `"unpause"`.
 */
export function usePrepareSynthRegistryUnpause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof synthRegistryABI, 'unpause'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthRegistryABI,
    functionName: 'unpause',
    ...config,
  } as UsePrepareContractWriteConfig<typeof synthRegistryABI, 'unpause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthRegistryABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareSynthRegistryUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof synthRegistryABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthRegistryABI,
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof synthRegistryABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthRegistryABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareSynthRegistryUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof synthRegistryABI, 'upgradeToAndCall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthRegistryABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof synthRegistryABI,
    'upgradeToAndCall'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link synthRegistryABI}__.
 */
export function useSynthRegistryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof synthRegistryABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: synthRegistryABI,
    ...config,
  } as UseContractEventConfig<typeof synthRegistryABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link synthRegistryABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useSynthRegistryAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof synthRegistryABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: synthRegistryABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof synthRegistryABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link synthRegistryABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useSynthRegistryBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof synthRegistryABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: synthRegistryABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof synthRegistryABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link synthRegistryABI}__ and `eventName` set to `"Initialized"`.
 */
export function useSynthRegistryInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof synthRegistryABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: synthRegistryABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof synthRegistryABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link synthRegistryABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useSynthRegistryOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof synthRegistryABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: synthRegistryABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof synthRegistryABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link synthRegistryABI}__ and `eventName` set to `"Paused"`.
 */
export function useSynthRegistryPausedEvent(
  config: Omit<
    UseContractEventConfig<typeof synthRegistryABI, 'Paused'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: synthRegistryABI,
    eventName: 'Paused',
    ...config,
  } as UseContractEventConfig<typeof synthRegistryABI, 'Paused'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link synthRegistryABI}__ and `eventName` set to `"SynthCreated"`.
 */
export function useSynthRegistrySynthCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof synthRegistryABI, 'SynthCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: synthRegistryABI,
    eventName: 'SynthCreated',
    ...config,
  } as UseContractEventConfig<typeof synthRegistryABI, 'SynthCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link synthRegistryABI}__ and `eventName` set to `"Unpaused"`.
 */
export function useSynthRegistryUnpausedEvent(
  config: Omit<
    UseContractEventConfig<typeof synthRegistryABI, 'Unpaused'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: synthRegistryABI,
    eventName: 'Unpaused',
    ...config,
  } as UseContractEventConfig<typeof synthRegistryABI, 'Unpaused'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link synthRegistryABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useSynthRegistryUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof synthRegistryABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: synthRegistryABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof synthRegistryABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthABI}__.
 */
export function useSynthRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof synthABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: synthABI, ...config } as UseContractReadConfig<
    typeof synthABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useSynthDefaultAdminRole<
  TFunctionName extends 'DEFAULT_ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof synthABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: synthABI,
    functionName: 'DEFAULT_ADMIN_ROLE',
    ...config,
  } as UseContractReadConfig<typeof synthABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useSynthBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof synthABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: synthABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof synthABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthABI}__ and `functionName` set to `"getApproved"`.
 */
export function useSynthGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof synthABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: synthABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof synthABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useSynthGetRoleAdmin<
  TFunctionName extends 'getRoleAdmin',
  TSelectData = ReadContractResult<typeof synthABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: synthABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<typeof synthABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthABI}__ and `functionName` set to `"hasRole"`.
 */
export function useSynthHasRole<
  TFunctionName extends 'hasRole',
  TSelectData = ReadContractResult<typeof synthABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: synthABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof synthABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useSynthIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof synthABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: synthABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof synthABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthABI}__ and `functionName` set to `"name"`.
 */
export function useSynthName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof synthABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: synthABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof synthABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthABI}__ and `functionName` set to `"nftWhitelist"`.
 */
export function useSynthNftWhitelist<
  TFunctionName extends 'nftWhitelist',
  TSelectData = ReadContractResult<typeof synthABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: synthABI,
    functionName: 'nftWhitelist',
    ...config,
  } as UseContractReadConfig<typeof synthABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useSynthOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof synthABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: synthABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof synthABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthABI}__ and `functionName` set to `"paused"`.
 */
export function useSynthPaused<
  TFunctionName extends 'paused',
  TSelectData = ReadContractResult<typeof synthABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: synthABI,
    functionName: 'paused',
    ...config,
  } as UseContractReadConfig<typeof synthABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useSynthSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof synthABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: synthABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof synthABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthABI}__ and `functionName` set to `"symbol"`.
 */
export function useSynthSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof synthABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: synthABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof synthABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useSynthTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<typeof synthABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: synthABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof synthABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link synthABI}__ and `functionName` set to `"waveExists"`.
 */
export function useSynthWaveExists<
  TFunctionName extends 'waveExists',
  TSelectData = ReadContractResult<typeof synthABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof synthABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: synthABI,
    functionName: 'waveExists',
    ...config,
  } as UseContractReadConfig<typeof synthABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthABI}__.
 */
export function useSynthWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof synthABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof synthABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof synthABI, TFunctionName, TMode>({
    abi: synthABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthABI}__ and `functionName` set to `"addToNFTWhitelist"`.
 */
export function useSynthAddToNftWhitelist<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthABI,
          'addToNFTWhitelist'
        >['request']['abi'],
        'addToNFTWhitelist',
        TMode
      > & { functionName?: 'addToNFTWhitelist' }
    : UseContractWriteConfig<typeof synthABI, 'addToNFTWhitelist', TMode> & {
        abi?: never
        functionName?: 'addToNFTWhitelist'
      } = {} as any,
) {
  return useContractWrite<typeof synthABI, 'addToNFTWhitelist', TMode>({
    abi: synthABI,
    functionName: 'addToNFTWhitelist',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthABI}__ and `functionName` set to `"addWave"`.
 */
export function useSynthAddWave<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthABI,
          'addWave'
        >['request']['abi'],
        'addWave',
        TMode
      > & { functionName?: 'addWave' }
    : UseContractWriteConfig<typeof synthABI, 'addWave', TMode> & {
        abi?: never
        functionName?: 'addWave'
      } = {} as any,
) {
  return useContractWrite<typeof synthABI, 'addWave', TMode>({
    abi: synthABI,
    functionName: 'addWave',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthABI}__ and `functionName` set to `"approve"`.
 */
export function useSynthApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthABI,
          'approve'
        >['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof synthABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof synthABI, 'approve', TMode>({
    abi: synthABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthABI}__ and `functionName` set to `"grantRole"`.
 */
export function useSynthGrantRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthABI,
          'grantRole'
        >['request']['abi'],
        'grantRole',
        TMode
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<typeof synthABI, 'grantRole', TMode> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<typeof synthABI, 'grantRole', TMode>({
    abi: synthABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthABI}__ and `functionName` set to `"mint"`.
 */
export function useSynthMint<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof synthABI, 'mint'>['request']['abi'],
        'mint',
        TMode
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<typeof synthABI, 'mint', TMode> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<typeof synthABI, 'mint', TMode>({
    abi: synthABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthABI}__ and `functionName` set to `"pause"`.
 */
export function useSynthPause<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof synthABI, 'pause'>['request']['abi'],
        'pause',
        TMode
      > & { functionName?: 'pause' }
    : UseContractWriteConfig<typeof synthABI, 'pause', TMode> & {
        abi?: never
        functionName?: 'pause'
      } = {} as any,
) {
  return useContractWrite<typeof synthABI, 'pause', TMode>({
    abi: synthABI,
    functionName: 'pause',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthABI}__ and `functionName` set to `"removeFromNFTWhitelist"`.
 */
export function useSynthRemoveFromNftWhitelist<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthABI,
          'removeFromNFTWhitelist'
        >['request']['abi'],
        'removeFromNFTWhitelist',
        TMode
      > & { functionName?: 'removeFromNFTWhitelist' }
    : UseContractWriteConfig<
        typeof synthABI,
        'removeFromNFTWhitelist',
        TMode
      > & {
        abi?: never
        functionName?: 'removeFromNFTWhitelist'
      } = {} as any,
) {
  return useContractWrite<typeof synthABI, 'removeFromNFTWhitelist', TMode>({
    abi: synthABI,
    functionName: 'removeFromNFTWhitelist',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthABI}__ and `functionName` set to `"removeWave"`.
 */
export function useSynthRemoveWave<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthABI,
          'removeWave'
        >['request']['abi'],
        'removeWave',
        TMode
      > & { functionName?: 'removeWave' }
    : UseContractWriteConfig<typeof synthABI, 'removeWave', TMode> & {
        abi?: never
        functionName?: 'removeWave'
      } = {} as any,
) {
  return useContractWrite<typeof synthABI, 'removeWave', TMode>({
    abi: synthABI,
    functionName: 'removeWave',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useSynthRenounceRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthABI,
          'renounceRole'
        >['request']['abi'],
        'renounceRole',
        TMode
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<typeof synthABI, 'renounceRole', TMode> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<typeof synthABI, 'renounceRole', TMode>({
    abi: synthABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useSynthRevokeRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthABI,
          'revokeRole'
        >['request']['abi'],
        'revokeRole',
        TMode
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<typeof synthABI, 'revokeRole', TMode> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<typeof synthABI, 'revokeRole', TMode>({
    abi: synthABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useSynthSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<typeof synthABI, 'safeTransferFrom', TMode> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof synthABI, 'safeTransferFrom', TMode>({
    abi: synthABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useSynthSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<typeof synthABI, 'setApprovalForAll', TMode> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<typeof synthABI, 'setApprovalForAll', TMode>({
    abi: synthABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useSynthTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof synthABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof synthABI, 'transferFrom', TMode>({
    abi: synthABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link synthABI}__ and `functionName` set to `"unpause"`.
 */
export function useSynthUnpause<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof synthABI,
          'unpause'
        >['request']['abi'],
        'unpause',
        TMode
      > & { functionName?: 'unpause' }
    : UseContractWriteConfig<typeof synthABI, 'unpause', TMode> & {
        abi?: never
        functionName?: 'unpause'
      } = {} as any,
) {
  return useContractWrite<typeof synthABI, 'unpause', TMode>({
    abi: synthABI,
    functionName: 'unpause',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthABI}__.
 */
export function usePrepareSynthWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof synthABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof synthABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthABI}__ and `functionName` set to `"addToNFTWhitelist"`.
 */
export function usePrepareSynthAddToNftWhitelist(
  config: Omit<
    UsePrepareContractWriteConfig<typeof synthABI, 'addToNFTWhitelist'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthABI,
    functionName: 'addToNFTWhitelist',
    ...config,
  } as UsePrepareContractWriteConfig<typeof synthABI, 'addToNFTWhitelist'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthABI}__ and `functionName` set to `"addWave"`.
 */
export function usePrepareSynthAddWave(
  config: Omit<
    UsePrepareContractWriteConfig<typeof synthABI, 'addWave'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthABI,
    functionName: 'addWave',
    ...config,
  } as UsePrepareContractWriteConfig<typeof synthABI, 'addWave'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareSynthApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof synthABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof synthABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareSynthGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof synthABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof synthABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareSynthMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof synthABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof synthABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthABI}__ and `functionName` set to `"pause"`.
 */
export function usePrepareSynthPause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof synthABI, 'pause'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthABI,
    functionName: 'pause',
    ...config,
  } as UsePrepareContractWriteConfig<typeof synthABI, 'pause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthABI}__ and `functionName` set to `"removeFromNFTWhitelist"`.
 */
export function usePrepareSynthRemoveFromNftWhitelist(
  config: Omit<
    UsePrepareContractWriteConfig<typeof synthABI, 'removeFromNFTWhitelist'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthABI,
    functionName: 'removeFromNFTWhitelist',
    ...config,
  } as UsePrepareContractWriteConfig<typeof synthABI, 'removeFromNFTWhitelist'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthABI}__ and `functionName` set to `"removeWave"`.
 */
export function usePrepareSynthRemoveWave(
  config: Omit<
    UsePrepareContractWriteConfig<typeof synthABI, 'removeWave'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthABI,
    functionName: 'removeWave',
    ...config,
  } as UsePrepareContractWriteConfig<typeof synthABI, 'removeWave'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareSynthRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof synthABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof synthABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareSynthRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof synthABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof synthABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareSynthSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof synthABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof synthABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareSynthSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof synthABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof synthABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareSynthTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof synthABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof synthABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link synthABI}__ and `functionName` set to `"unpause"`.
 */
export function usePrepareSynthUnpause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof synthABI, 'unpause'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: synthABI,
    functionName: 'unpause',
    ...config,
  } as UsePrepareContractWriteConfig<typeof synthABI, 'unpause'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link synthABI}__.
 */
export function useSynthEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof synthABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: synthABI,
    ...config,
  } as UseContractEventConfig<typeof synthABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link synthABI}__ and `eventName` set to `"Approval"`.
 */
export function useSynthApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof synthABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: synthABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof synthABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link synthABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useSynthApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof synthABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: synthABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof synthABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link synthABI}__ and `eventName` set to `"Paused"`.
 */
export function useSynthPausedEvent(
  config: Omit<
    UseContractEventConfig<typeof synthABI, 'Paused'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: synthABI,
    eventName: 'Paused',
    ...config,
  } as UseContractEventConfig<typeof synthABI, 'Paused'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link synthABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useSynthRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof synthABI, 'RoleAdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: synthABI,
    eventName: 'RoleAdminChanged',
    ...config,
  } as UseContractEventConfig<typeof synthABI, 'RoleAdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link synthABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useSynthRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof synthABI, 'RoleGranted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: synthABI,
    eventName: 'RoleGranted',
    ...config,
  } as UseContractEventConfig<typeof synthABI, 'RoleGranted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link synthABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useSynthRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof synthABI, 'RoleRevoked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: synthABI,
    eventName: 'RoleRevoked',
    ...config,
  } as UseContractEventConfig<typeof synthABI, 'RoleRevoked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link synthABI}__ and `eventName` set to `"SynthMinted"`.
 */
export function useSynthSynthMintedEvent(
  config: Omit<
    UseContractEventConfig<typeof synthABI, 'SynthMinted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: synthABI,
    eventName: 'SynthMinted',
    ...config,
  } as UseContractEventConfig<typeof synthABI, 'SynthMinted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link synthABI}__ and `eventName` set to `"Transfer"`.
 */
export function useSynthTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof synthABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: synthABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof synthABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link synthABI}__ and `eventName` set to `"Unpaused"`.
 */
export function useSynthUnpausedEvent(
  config: Omit<
    UseContractEventConfig<typeof synthABI, 'Unpaused'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: synthABI,
    eventName: 'Unpaused',
    ...config,
  } as UseContractEventConfig<typeof synthABI, 'Unpaused'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link waveABI}__.
 */
export function useWaveRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof waveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof waveABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: waveABI, ...config } as UseContractReadConfig<
    typeof waveABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link waveABI}__ and `functionName` set to `"DEFAULT_ADMIN_ROLE"`.
 */
export function useWaveDefaultAdminRole<
  TFunctionName extends 'DEFAULT_ADMIN_ROLE',
  TSelectData = ReadContractResult<typeof waveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof waveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: waveABI,
    functionName: 'DEFAULT_ADMIN_ROLE',
    ...config,
  } as UseContractReadConfig<typeof waveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link waveABI}__ and `functionName` set to `"MINTER_ROLE"`.
 */
export function useWaveMinterRole<
  TFunctionName extends 'MINTER_ROLE',
  TSelectData = ReadContractResult<typeof waveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof waveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: waveABI,
    functionName: 'MINTER_ROLE',
    ...config,
  } as UseContractReadConfig<typeof waveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link waveABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useWaveBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof waveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof waveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: waveABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof waveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link waveABI}__ and `functionName` set to `"data"`.
 */
export function useWaveData<
  TFunctionName extends 'data',
  TSelectData = ReadContractResult<typeof waveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof waveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: waveABI,
    functionName: 'data',
    ...config,
  } as UseContractReadConfig<typeof waveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link waveABI}__ and `functionName` set to `"getApproved"`.
 */
export function useWaveGetApproved<
  TFunctionName extends 'getApproved',
  TSelectData = ReadContractResult<typeof waveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof waveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: waveABI,
    functionName: 'getApproved',
    ...config,
  } as UseContractReadConfig<typeof waveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link waveABI}__ and `functionName` set to `"getRoleAdmin"`.
 */
export function useWaveGetRoleAdmin<
  TFunctionName extends 'getRoleAdmin',
  TSelectData = ReadContractResult<typeof waveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof waveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: waveABI,
    functionName: 'getRoleAdmin',
    ...config,
  } as UseContractReadConfig<typeof waveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link waveABI}__ and `functionName` set to `"hasRole"`.
 */
export function useWaveHasRole<
  TFunctionName extends 'hasRole',
  TSelectData = ReadContractResult<typeof waveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof waveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: waveABI,
    functionName: 'hasRole',
    ...config,
  } as UseContractReadConfig<typeof waveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link waveABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useWaveIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof waveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof waveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: waveABI,
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof waveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link waveABI}__ and `functionName` set to `"name"`.
 */
export function useWaveName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof waveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof waveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: waveABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof waveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link waveABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useWaveOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof waveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof waveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: waveABI,
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof waveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link waveABI}__ and `functionName` set to `"paused"`.
 */
export function useWavePaused<
  TFunctionName extends 'paused',
  TSelectData = ReadContractResult<typeof waveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof waveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: waveABI,
    functionName: 'paused',
    ...config,
  } as UseContractReadConfig<typeof waveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link waveABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useWaveSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof waveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof waveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: waveABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof waveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link waveABI}__ and `functionName` set to `"symbol"`.
 */
export function useWaveSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof waveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof waveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: waveABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof waveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link waveABI}__ and `functionName` set to `"tokenURI"`.
 */
export function useWaveTokenUri<
  TFunctionName extends 'tokenURI',
  TSelectData = ReadContractResult<typeof waveABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof waveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: waveABI,
    functionName: 'tokenURI',
    ...config,
  } as UseContractReadConfig<typeof waveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link waveABI}__.
 */
export function useWaveWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof waveABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof waveABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof waveABI, TFunctionName, TMode>({
    abi: waveABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link waveABI}__ and `functionName` set to `"approve"`.
 */
export function useWaveApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof waveABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof waveABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<typeof waveABI, 'approve', TMode>({
    abi: waveABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link waveABI}__ and `functionName` set to `"grantRole"`.
 */
export function useWaveGrantRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof waveABI,
          'grantRole'
        >['request']['abi'],
        'grantRole',
        TMode
      > & { functionName?: 'grantRole' }
    : UseContractWriteConfig<typeof waveABI, 'grantRole', TMode> & {
        abi?: never
        functionName?: 'grantRole'
      } = {} as any,
) {
  return useContractWrite<typeof waveABI, 'grantRole', TMode>({
    abi: waveABI,
    functionName: 'grantRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link waveABI}__ and `functionName` set to `"mint"`.
 */
export function useWaveMint<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof waveABI, 'mint'>['request']['abi'],
        'mint',
        TMode
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<typeof waveABI, 'mint', TMode> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<typeof waveABI, 'mint', TMode>({
    abi: waveABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link waveABI}__ and `functionName` set to `"pause"`.
 */
export function useWavePause<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof waveABI, 'pause'>['request']['abi'],
        'pause',
        TMode
      > & { functionName?: 'pause' }
    : UseContractWriteConfig<typeof waveABI, 'pause', TMode> & {
        abi?: never
        functionName?: 'pause'
      } = {} as any,
) {
  return useContractWrite<typeof waveABI, 'pause', TMode>({
    abi: waveABI,
    functionName: 'pause',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link waveABI}__ and `functionName` set to `"renounceRole"`.
 */
export function useWaveRenounceRole<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof waveABI,
          'renounceRole'
        >['request']['abi'],
        'renounceRole',
        TMode
      > & { functionName?: 'renounceRole' }
    : UseContractWriteConfig<typeof waveABI, 'renounceRole', TMode> & {
        abi?: never
        functionName?: 'renounceRole'
      } = {} as any,
) {
  return useContractWrite<typeof waveABI, 'renounceRole', TMode>({
    abi: waveABI,
    functionName: 'renounceRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link waveABI}__ and `functionName` set to `"revokeRole"`.
 */
export function useWaveRevokeRole<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof waveABI,
          'revokeRole'
        >['request']['abi'],
        'revokeRole',
        TMode
      > & { functionName?: 'revokeRole' }
    : UseContractWriteConfig<typeof waveABI, 'revokeRole', TMode> & {
        abi?: never
        functionName?: 'revokeRole'
      } = {} as any,
) {
  return useContractWrite<typeof waveABI, 'revokeRole', TMode>({
    abi: waveABI,
    functionName: 'revokeRole',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link waveABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useWaveSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof waveABI,
          'safeTransferFrom'
        >['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<typeof waveABI, 'safeTransferFrom', TMode> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof waveABI, 'safeTransferFrom', TMode>({
    abi: waveABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link waveABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useWaveSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof waveABI,
          'setApprovalForAll'
        >['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<typeof waveABI, 'setApprovalForAll', TMode> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any,
) {
  return useContractWrite<typeof waveABI, 'setApprovalForAll', TMode>({
    abi: waveABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link waveABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useWaveTransferFrom<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof waveABI,
          'transferFrom'
        >['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof waveABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<typeof waveABI, 'transferFrom', TMode>({
    abi: waveABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link waveABI}__ and `functionName` set to `"unpause"`.
 */
export function useWaveUnpause<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof waveABI, 'unpause'>['request']['abi'],
        'unpause',
        TMode
      > & { functionName?: 'unpause' }
    : UseContractWriteConfig<typeof waveABI, 'unpause', TMode> & {
        abi?: never
        functionName?: 'unpause'
      } = {} as any,
) {
  return useContractWrite<typeof waveABI, 'unpause', TMode>({
    abi: waveABI,
    functionName: 'unpause',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link waveABI}__.
 */
export function usePrepareWaveWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof waveABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: waveABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof waveABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link waveABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareWaveApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof waveABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: waveABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof waveABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link waveABI}__ and `functionName` set to `"grantRole"`.
 */
export function usePrepareWaveGrantRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof waveABI, 'grantRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: waveABI,
    functionName: 'grantRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof waveABI, 'grantRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link waveABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareWaveMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof waveABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: waveABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof waveABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link waveABI}__ and `functionName` set to `"pause"`.
 */
export function usePrepareWavePause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof waveABI, 'pause'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: waveABI,
    functionName: 'pause',
    ...config,
  } as UsePrepareContractWriteConfig<typeof waveABI, 'pause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link waveABI}__ and `functionName` set to `"renounceRole"`.
 */
export function usePrepareWaveRenounceRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof waveABI, 'renounceRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: waveABI,
    functionName: 'renounceRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof waveABI, 'renounceRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link waveABI}__ and `functionName` set to `"revokeRole"`.
 */
export function usePrepareWaveRevokeRole(
  config: Omit<
    UsePrepareContractWriteConfig<typeof waveABI, 'revokeRole'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: waveABI,
    functionName: 'revokeRole',
    ...config,
  } as UsePrepareContractWriteConfig<typeof waveABI, 'revokeRole'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link waveABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareWaveSafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof waveABI, 'safeTransferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: waveABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof waveABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link waveABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareWaveSetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof waveABI, 'setApprovalForAll'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: waveABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof waveABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link waveABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareWaveTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof waveABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: waveABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof waveABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link waveABI}__ and `functionName` set to `"unpause"`.
 */
export function usePrepareWaveUnpause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof waveABI, 'unpause'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: waveABI,
    functionName: 'unpause',
    ...config,
  } as UsePrepareContractWriteConfig<typeof waveABI, 'unpause'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link waveABI}__.
 */
export function useWaveEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof waveABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({ abi: waveABI, ...config } as UseContractEventConfig<
    typeof waveABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link waveABI}__ and `eventName` set to `"Approval"`.
 */
export function useWaveApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof waveABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: waveABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof waveABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link waveABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useWaveApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof waveABI, 'ApprovalForAll'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: waveABI,
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof waveABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link waveABI}__ and `eventName` set to `"Paused"`.
 */
export function useWavePausedEvent(
  config: Omit<
    UseContractEventConfig<typeof waveABI, 'Paused'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: waveABI,
    eventName: 'Paused',
    ...config,
  } as UseContractEventConfig<typeof waveABI, 'Paused'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link waveABI}__ and `eventName` set to `"RoleAdminChanged"`.
 */
export function useWaveRoleAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof waveABI, 'RoleAdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: waveABI,
    eventName: 'RoleAdminChanged',
    ...config,
  } as UseContractEventConfig<typeof waveABI, 'RoleAdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link waveABI}__ and `eventName` set to `"RoleGranted"`.
 */
export function useWaveRoleGrantedEvent(
  config: Omit<
    UseContractEventConfig<typeof waveABI, 'RoleGranted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: waveABI,
    eventName: 'RoleGranted',
    ...config,
  } as UseContractEventConfig<typeof waveABI, 'RoleGranted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link waveABI}__ and `eventName` set to `"RoleRevoked"`.
 */
export function useWaveRoleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof waveABI, 'RoleRevoked'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: waveABI,
    eventName: 'RoleRevoked',
    ...config,
  } as UseContractEventConfig<typeof waveABI, 'RoleRevoked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link waveABI}__ and `eventName` set to `"Transfer"`.
 */
export function useWaveTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof waveABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: waveABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof waveABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link waveABI}__ and `eventName` set to `"Unpaused"`.
 */
export function useWaveUnpausedEvent(
  config: Omit<
    UseContractEventConfig<typeof waveABI, 'Unpaused'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: waveABI,
    eventName: 'Unpaused',
    ...config,
  } as UseContractEventConfig<typeof waveABI, 'Unpaused'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link waveABI}__ and `eventName` set to `"WaveMinted"`.
 */
export function useWaveWaveMintedEvent(
  config: Omit<
    UseContractEventConfig<typeof waveABI, 'WaveMinted'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: waveABI,
    eventName: 'WaveMinted',
    ...config,
  } as UseContractEventConfig<typeof waveABI, 'WaveMinted'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link waveRegistryABI}__.
 */
export function useWaveRegistryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof waveRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof waveRegistryABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: waveRegistryABI,
    ...config,
  } as UseContractReadConfig<
    typeof waveRegistryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link waveRegistryABI}__ and `functionName` set to `"owner"`.
 */
export function useWaveRegistryOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof waveRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof waveRegistryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: waveRegistryABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof waveRegistryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link waveRegistryABI}__ and `functionName` set to `"paused"`.
 */
export function useWaveRegistryPaused<
  TFunctionName extends 'paused',
  TSelectData = ReadContractResult<typeof waveRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof waveRegistryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: waveRegistryABI,
    functionName: 'paused',
    ...config,
  } as UseContractReadConfig<
    typeof waveRegistryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link waveRegistryABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useWaveRegistryProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof waveRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof waveRegistryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: waveRegistryABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<
    typeof waveRegistryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link waveRegistryABI}__ and `functionName` set to `"waveExists"`.
 */
export function useWaveRegistryWaveExists<
  TFunctionName extends 'waveExists',
  TSelectData = ReadContractResult<typeof waveRegistryABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof waveRegistryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: waveRegistryABI,
    functionName: 'waveExists',
    ...config,
  } as UseContractReadConfig<
    typeof waveRegistryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link waveRegistryABI}__.
 */
export function useWaveRegistryWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof waveRegistryABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof waveRegistryABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof waveRegistryABI, TFunctionName, TMode>({
    abi: waveRegistryABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link waveRegistryABI}__ and `functionName` set to `"createWave"`.
 */
export function useWaveRegistryCreateWave<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof waveRegistryABI,
          'createWave'
        >['request']['abi'],
        'createWave',
        TMode
      > & { functionName?: 'createWave' }
    : UseContractWriteConfig<typeof waveRegistryABI, 'createWave', TMode> & {
        abi?: never
        functionName?: 'createWave'
      } = {} as any,
) {
  return useContractWrite<typeof waveRegistryABI, 'createWave', TMode>({
    abi: waveRegistryABI,
    functionName: 'createWave',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link waveRegistryABI}__ and `functionName` set to `"initialize"`.
 */
export function useWaveRegistryInitialize<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof waveRegistryABI,
          'initialize'
        >['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof waveRegistryABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<typeof waveRegistryABI, 'initialize', TMode>({
    abi: waveRegistryABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link waveRegistryABI}__ and `functionName` set to `"pause"`.
 */
export function useWaveRegistryPause<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof waveRegistryABI,
          'pause'
        >['request']['abi'],
        'pause',
        TMode
      > & { functionName?: 'pause' }
    : UseContractWriteConfig<typeof waveRegistryABI, 'pause', TMode> & {
        abi?: never
        functionName?: 'pause'
      } = {} as any,
) {
  return useContractWrite<typeof waveRegistryABI, 'pause', TMode>({
    abi: waveRegistryABI,
    functionName: 'pause',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link waveRegistryABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useWaveRegistryRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof waveRegistryABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        typeof waveRegistryABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof waveRegistryABI, 'renounceOwnership', TMode>({
    abi: waveRegistryABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link waveRegistryABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useWaveRegistryTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof waveRegistryABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        typeof waveRegistryABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof waveRegistryABI, 'transferOwnership', TMode>({
    abi: waveRegistryABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link waveRegistryABI}__ and `functionName` set to `"unpause"`.
 */
export function useWaveRegistryUnpause<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof waveRegistryABI,
          'unpause'
        >['request']['abi'],
        'unpause',
        TMode
      > & { functionName?: 'unpause' }
    : UseContractWriteConfig<typeof waveRegistryABI, 'unpause', TMode> & {
        abi?: never
        functionName?: 'unpause'
      } = {} as any,
) {
  return useContractWrite<typeof waveRegistryABI, 'unpause', TMode>({
    abi: waveRegistryABI,
    functionName: 'unpause',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link waveRegistryABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useWaveRegistryUpgradeTo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof waveRegistryABI,
          'upgradeTo'
        >['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<typeof waveRegistryABI, 'upgradeTo', TMode> & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any,
) {
  return useContractWrite<typeof waveRegistryABI, 'upgradeTo', TMode>({
    abi: waveRegistryABI,
    functionName: 'upgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link waveRegistryABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useWaveRegistryUpgradeToAndCall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof waveRegistryABI,
          'upgradeToAndCall'
        >['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<
        typeof waveRegistryABI,
        'upgradeToAndCall',
        TMode
      > & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any,
) {
  return useContractWrite<typeof waveRegistryABI, 'upgradeToAndCall', TMode>({
    abi: waveRegistryABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link waveRegistryABI}__.
 */
export function usePrepareWaveRegistryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof waveRegistryABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: waveRegistryABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof waveRegistryABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link waveRegistryABI}__ and `functionName` set to `"createWave"`.
 */
export function usePrepareWaveRegistryCreateWave(
  config: Omit<
    UsePrepareContractWriteConfig<typeof waveRegistryABI, 'createWave'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: waveRegistryABI,
    functionName: 'createWave',
    ...config,
  } as UsePrepareContractWriteConfig<typeof waveRegistryABI, 'createWave'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link waveRegistryABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareWaveRegistryInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof waveRegistryABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: waveRegistryABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof waveRegistryABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link waveRegistryABI}__ and `functionName` set to `"pause"`.
 */
export function usePrepareWaveRegistryPause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof waveRegistryABI, 'pause'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: waveRegistryABI,
    functionName: 'pause',
    ...config,
  } as UsePrepareContractWriteConfig<typeof waveRegistryABI, 'pause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link waveRegistryABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareWaveRegistryRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof waveRegistryABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: waveRegistryABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof waveRegistryABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link waveRegistryABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareWaveRegistryTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof waveRegistryABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: waveRegistryABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof waveRegistryABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link waveRegistryABI}__ and `functionName` set to `"unpause"`.
 */
export function usePrepareWaveRegistryUnpause(
  config: Omit<
    UsePrepareContractWriteConfig<typeof waveRegistryABI, 'unpause'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: waveRegistryABI,
    functionName: 'unpause',
    ...config,
  } as UsePrepareContractWriteConfig<typeof waveRegistryABI, 'unpause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link waveRegistryABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareWaveRegistryUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof waveRegistryABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: waveRegistryABI,
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof waveRegistryABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link waveRegistryABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareWaveRegistryUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof waveRegistryABI, 'upgradeToAndCall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: waveRegistryABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof waveRegistryABI,
    'upgradeToAndCall'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link waveRegistryABI}__.
 */
export function useWaveRegistryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof waveRegistryABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: waveRegistryABI,
    ...config,
  } as UseContractEventConfig<typeof waveRegistryABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link waveRegistryABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useWaveRegistryAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof waveRegistryABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: waveRegistryABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof waveRegistryABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link waveRegistryABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useWaveRegistryBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof waveRegistryABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: waveRegistryABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof waveRegistryABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link waveRegistryABI}__ and `eventName` set to `"Initialized"`.
 */
export function useWaveRegistryInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof waveRegistryABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: waveRegistryABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof waveRegistryABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link waveRegistryABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useWaveRegistryOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof waveRegistryABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: waveRegistryABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof waveRegistryABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link waveRegistryABI}__ and `eventName` set to `"Paused"`.
 */
export function useWaveRegistryPausedEvent(
  config: Omit<
    UseContractEventConfig<typeof waveRegistryABI, 'Paused'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: waveRegistryABI,
    eventName: 'Paused',
    ...config,
  } as UseContractEventConfig<typeof waveRegistryABI, 'Paused'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link waveRegistryABI}__ and `eventName` set to `"Unpaused"`.
 */
export function useWaveRegistryUnpausedEvent(
  config: Omit<
    UseContractEventConfig<typeof waveRegistryABI, 'Unpaused'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: waveRegistryABI,
    eventName: 'Unpaused',
    ...config,
  } as UseContractEventConfig<typeof waveRegistryABI, 'Unpaused'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link waveRegistryABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useWaveRegistryUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof waveRegistryABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: waveRegistryABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof waveRegistryABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link waveRegistryABI}__ and `eventName` set to `"WaveCreated"`.
 */
export function useWaveRegistryWaveCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof waveRegistryABI, 'WaveCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: waveRegistryABI,
    eventName: 'WaveCreated',
    ...config,
  } as UseContractEventConfig<typeof waveRegistryABI, 'WaveCreated'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link waveResolverABI}__.
 */
export function useWaveResolverRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof waveResolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof waveResolverABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: waveResolverABI,
    ...config,
  } as UseContractReadConfig<
    typeof waveResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link waveResolverABI}__ and `functionName` set to `"isPayable"`.
 */
export function useWaveResolverIsPayable<
  TFunctionName extends 'isPayable',
  TSelectData = ReadContractResult<typeof waveResolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof waveResolverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: waveResolverABI,
    functionName: 'isPayable',
    ...config,
  } as UseContractReadConfig<
    typeof waveResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link waveResolverABI}__ and `functionName` set to `"owner"`.
 */
export function useWaveResolverOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof waveResolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof waveResolverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: waveResolverABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof waveResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link waveResolverABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useWaveResolverProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof waveResolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof waveResolverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: waveResolverABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<
    typeof waveResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link waveResolverABI}__ and `functionName` set to `"version"`.
 */
export function useWaveResolverVersion<
  TFunctionName extends 'version',
  TSelectData = ReadContractResult<typeof waveResolverABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof waveResolverABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: waveResolverABI,
    functionName: 'version',
    ...config,
  } as UseContractReadConfig<
    typeof waveResolverABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link waveResolverABI}__.
 */
export function useWaveResolverWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof waveResolverABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof waveResolverABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof waveResolverABI, TFunctionName, TMode>({
    abi: waveResolverABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link waveResolverABI}__ and `functionName` set to `"attest"`.
 */
export function useWaveResolverAttest<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof waveResolverABI,
          'attest'
        >['request']['abi'],
        'attest',
        TMode
      > & { functionName?: 'attest' }
    : UseContractWriteConfig<typeof waveResolverABI, 'attest', TMode> & {
        abi?: never
        functionName?: 'attest'
      } = {} as any,
) {
  return useContractWrite<typeof waveResolverABI, 'attest', TMode>({
    abi: waveResolverABI,
    functionName: 'attest',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link waveResolverABI}__ and `functionName` set to `"initialize"`.
 */
export function useWaveResolverInitialize<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof waveResolverABI,
          'initialize'
        >['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof waveResolverABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<typeof waveResolverABI, 'initialize', TMode>({
    abi: waveResolverABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link waveResolverABI}__ and `functionName` set to `"multiAttest"`.
 */
export function useWaveResolverMultiAttest<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof waveResolverABI,
          'multiAttest'
        >['request']['abi'],
        'multiAttest',
        TMode
      > & { functionName?: 'multiAttest' }
    : UseContractWriteConfig<typeof waveResolverABI, 'multiAttest', TMode> & {
        abi?: never
        functionName?: 'multiAttest'
      } = {} as any,
) {
  return useContractWrite<typeof waveResolverABI, 'multiAttest', TMode>({
    abi: waveResolverABI,
    functionName: 'multiAttest',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link waveResolverABI}__ and `functionName` set to `"multiRevoke"`.
 */
export function useWaveResolverMultiRevoke<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof waveResolverABI,
          'multiRevoke'
        >['request']['abi'],
        'multiRevoke',
        TMode
      > & { functionName?: 'multiRevoke' }
    : UseContractWriteConfig<typeof waveResolverABI, 'multiRevoke', TMode> & {
        abi?: never
        functionName?: 'multiRevoke'
      } = {} as any,
) {
  return useContractWrite<typeof waveResolverABI, 'multiRevoke', TMode>({
    abi: waveResolverABI,
    functionName: 'multiRevoke',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link waveResolverABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useWaveResolverRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof waveResolverABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        typeof waveResolverABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof waveResolverABI, 'renounceOwnership', TMode>({
    abi: waveResolverABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link waveResolverABI}__ and `functionName` set to `"revoke"`.
 */
export function useWaveResolverRevoke<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof waveResolverABI,
          'revoke'
        >['request']['abi'],
        'revoke',
        TMode
      > & { functionName?: 'revoke' }
    : UseContractWriteConfig<typeof waveResolverABI, 'revoke', TMode> & {
        abi?: never
        functionName?: 'revoke'
      } = {} as any,
) {
  return useContractWrite<typeof waveResolverABI, 'revoke', TMode>({
    abi: waveResolverABI,
    functionName: 'revoke',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link waveResolverABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useWaveResolverTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof waveResolverABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        typeof waveResolverABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof waveResolverABI, 'transferOwnership', TMode>({
    abi: waveResolverABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link waveResolverABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useWaveResolverUpgradeTo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof waveResolverABI,
          'upgradeTo'
        >['request']['abi'],
        'upgradeTo',
        TMode
      > & { functionName?: 'upgradeTo' }
    : UseContractWriteConfig<typeof waveResolverABI, 'upgradeTo', TMode> & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any,
) {
  return useContractWrite<typeof waveResolverABI, 'upgradeTo', TMode>({
    abi: waveResolverABI,
    functionName: 'upgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link waveResolverABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useWaveResolverUpgradeToAndCall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof waveResolverABI,
          'upgradeToAndCall'
        >['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<
        typeof waveResolverABI,
        'upgradeToAndCall',
        TMode
      > & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any,
) {
  return useContractWrite<typeof waveResolverABI, 'upgradeToAndCall', TMode>({
    abi: waveResolverABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link waveResolverABI}__.
 */
export function usePrepareWaveResolverWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof waveResolverABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: waveResolverABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof waveResolverABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link waveResolverABI}__ and `functionName` set to `"attest"`.
 */
export function usePrepareWaveResolverAttest(
  config: Omit<
    UsePrepareContractWriteConfig<typeof waveResolverABI, 'attest'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: waveResolverABI,
    functionName: 'attest',
    ...config,
  } as UsePrepareContractWriteConfig<typeof waveResolverABI, 'attest'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link waveResolverABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareWaveResolverInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof waveResolverABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: waveResolverABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof waveResolverABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link waveResolverABI}__ and `functionName` set to `"multiAttest"`.
 */
export function usePrepareWaveResolverMultiAttest(
  config: Omit<
    UsePrepareContractWriteConfig<typeof waveResolverABI, 'multiAttest'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: waveResolverABI,
    functionName: 'multiAttest',
    ...config,
  } as UsePrepareContractWriteConfig<typeof waveResolverABI, 'multiAttest'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link waveResolverABI}__ and `functionName` set to `"multiRevoke"`.
 */
export function usePrepareWaveResolverMultiRevoke(
  config: Omit<
    UsePrepareContractWriteConfig<typeof waveResolverABI, 'multiRevoke'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: waveResolverABI,
    functionName: 'multiRevoke',
    ...config,
  } as UsePrepareContractWriteConfig<typeof waveResolverABI, 'multiRevoke'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link waveResolverABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareWaveResolverRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof waveResolverABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: waveResolverABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof waveResolverABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link waveResolverABI}__ and `functionName` set to `"revoke"`.
 */
export function usePrepareWaveResolverRevoke(
  config: Omit<
    UsePrepareContractWriteConfig<typeof waveResolverABI, 'revoke'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: waveResolverABI,
    functionName: 'revoke',
    ...config,
  } as UsePrepareContractWriteConfig<typeof waveResolverABI, 'revoke'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link waveResolverABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareWaveResolverTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof waveResolverABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: waveResolverABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof waveResolverABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link waveResolverABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareWaveResolverUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof waveResolverABI, 'upgradeTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: waveResolverABI,
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof waveResolverABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link waveResolverABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareWaveResolverUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof waveResolverABI, 'upgradeToAndCall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: waveResolverABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof waveResolverABI,
    'upgradeToAndCall'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link waveResolverABI}__.
 */
export function useWaveResolverEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof waveResolverABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: waveResolverABI,
    ...config,
  } as UseContractEventConfig<typeof waveResolverABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link waveResolverABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useWaveResolverAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof waveResolverABI, 'AdminChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: waveResolverABI,
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof waveResolverABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link waveResolverABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useWaveResolverBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof waveResolverABI, 'BeaconUpgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: waveResolverABI,
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof waveResolverABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link waveResolverABI}__ and `eventName` set to `"Initialized"`.
 */
export function useWaveResolverInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof waveResolverABI, 'Initialized'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: waveResolverABI,
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof waveResolverABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link waveResolverABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useWaveResolverOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof waveResolverABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: waveResolverABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof waveResolverABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link waveResolverABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useWaveResolverUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof waveResolverABI, 'Upgraded'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: waveResolverABI,
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof waveResolverABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1822ProxiableUpgradeableABI}__.
 */
export function useIerc1822ProxiableUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<
    typeof ierc1822ProxiableUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1822ProxiableUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1822ProxiableUpgradeableABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc1822ProxiableUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1822ProxiableUpgradeableABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useIerc1822ProxiableUpgradeableProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<
    typeof ierc1822ProxiableUpgradeableABI,
    TFunctionName
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof ierc1822ProxiableUpgradeableABI,
      TFunctionName,
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc1822ProxiableUpgradeableABI,
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<
    typeof ierc1822ProxiableUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wavesPaymasterABI}__.
 */
export function useWavesPaymasterRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof wavesPaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof wavesPaymasterABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: wavesPaymasterABI,
    ...config,
  } as UseContractReadConfig<
    typeof wavesPaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wavesPaymasterABI}__ and `functionName` set to `"CALLDATA_SIZE_LIMIT"`.
 */
export function useWavesPaymasterCalldataSizeLimit<
  TFunctionName extends 'CALLDATA_SIZE_LIMIT',
  TSelectData = ReadContractResult<typeof wavesPaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof wavesPaymasterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: wavesPaymasterABI,
    functionName: 'CALLDATA_SIZE_LIMIT',
    ...config,
  } as UseContractReadConfig<
    typeof wavesPaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wavesPaymasterABI}__ and `functionName` set to `"FORWARDER_HUB_OVERHEAD"`.
 */
export function useWavesPaymasterForwarderHubOverhead<
  TFunctionName extends 'FORWARDER_HUB_OVERHEAD',
  TSelectData = ReadContractResult<typeof wavesPaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof wavesPaymasterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: wavesPaymasterABI,
    functionName: 'FORWARDER_HUB_OVERHEAD',
    ...config,
  } as UseContractReadConfig<
    typeof wavesPaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wavesPaymasterABI}__ and `functionName` set to `"PAYMASTER_ACCEPTANCE_BUDGET"`.
 */
export function useWavesPaymasterPaymasterAcceptanceBudget<
  TFunctionName extends 'PAYMASTER_ACCEPTANCE_BUDGET',
  TSelectData = ReadContractResult<typeof wavesPaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof wavesPaymasterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: wavesPaymasterABI,
    functionName: 'PAYMASTER_ACCEPTANCE_BUDGET',
    ...config,
  } as UseContractReadConfig<
    typeof wavesPaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wavesPaymasterABI}__ and `functionName` set to `"POST_RELAYED_CALL_GAS_LIMIT"`.
 */
export function useWavesPaymasterPostRelayedCallGasLimit<
  TFunctionName extends 'POST_RELAYED_CALL_GAS_LIMIT',
  TSelectData = ReadContractResult<typeof wavesPaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof wavesPaymasterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: wavesPaymasterABI,
    functionName: 'POST_RELAYED_CALL_GAS_LIMIT',
    ...config,
  } as UseContractReadConfig<
    typeof wavesPaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wavesPaymasterABI}__ and `functionName` set to `"PRE_RELAYED_CALL_GAS_LIMIT"`.
 */
export function useWavesPaymasterPreRelayedCallGasLimit<
  TFunctionName extends 'PRE_RELAYED_CALL_GAS_LIMIT',
  TSelectData = ReadContractResult<typeof wavesPaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof wavesPaymasterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: wavesPaymasterABI,
    functionName: 'PRE_RELAYED_CALL_GAS_LIMIT',
    ...config,
  } as UseContractReadConfig<
    typeof wavesPaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wavesPaymasterABI}__ and `functionName` set to `"getGasAndDataLimits"`.
 */
export function useWavesPaymasterGetGasAndDataLimits<
  TFunctionName extends 'getGasAndDataLimits',
  TSelectData = ReadContractResult<typeof wavesPaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof wavesPaymasterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: wavesPaymasterABI,
    functionName: 'getGasAndDataLimits',
    ...config,
  } as UseContractReadConfig<
    typeof wavesPaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wavesPaymasterABI}__ and `functionName` set to `"getRelayHub"`.
 */
export function useWavesPaymasterGetRelayHub<
  TFunctionName extends 'getRelayHub',
  TSelectData = ReadContractResult<typeof wavesPaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof wavesPaymasterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: wavesPaymasterABI,
    functionName: 'getRelayHub',
    ...config,
  } as UseContractReadConfig<
    typeof wavesPaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wavesPaymasterABI}__ and `functionName` set to `"getTrustedForwarder"`.
 */
export function useWavesPaymasterGetTrustedForwarder<
  TFunctionName extends 'getTrustedForwarder',
  TSelectData = ReadContractResult<typeof wavesPaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof wavesPaymasterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: wavesPaymasterABI,
    functionName: 'getTrustedForwarder',
    ...config,
  } as UseContractReadConfig<
    typeof wavesPaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wavesPaymasterABI}__ and `functionName` set to `"methodWhitelist"`.
 */
export function useWavesPaymasterMethodWhitelist<
  TFunctionName extends 'methodWhitelist',
  TSelectData = ReadContractResult<typeof wavesPaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof wavesPaymasterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: wavesPaymasterABI,
    functionName: 'methodWhitelist',
    ...config,
  } as UseContractReadConfig<
    typeof wavesPaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wavesPaymasterABI}__ and `functionName` set to `"owner"`.
 */
export function useWavesPaymasterOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof wavesPaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof wavesPaymasterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: wavesPaymasterABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<
    typeof wavesPaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wavesPaymasterABI}__ and `functionName` set to `"senderWhitelist"`.
 */
export function useWavesPaymasterSenderWhitelist<
  TFunctionName extends 'senderWhitelist',
  TSelectData = ReadContractResult<typeof wavesPaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof wavesPaymasterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: wavesPaymasterABI,
    functionName: 'senderWhitelist',
    ...config,
  } as UseContractReadConfig<
    typeof wavesPaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wavesPaymasterABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useWavesPaymasterSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof wavesPaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof wavesPaymasterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: wavesPaymasterABI,
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<
    typeof wavesPaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wavesPaymasterABI}__ and `functionName` set to `"targetWhitelist"`.
 */
export function useWavesPaymasterTargetWhitelist<
  TFunctionName extends 'targetWhitelist',
  TSelectData = ReadContractResult<typeof wavesPaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof wavesPaymasterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: wavesPaymasterABI,
    functionName: 'targetWhitelist',
    ...config,
  } as UseContractReadConfig<
    typeof wavesPaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wavesPaymasterABI}__ and `functionName` set to `"useMethodWhitelist"`.
 */
export function useWavesPaymasterUseMethodWhitelist<
  TFunctionName extends 'useMethodWhitelist',
  TSelectData = ReadContractResult<typeof wavesPaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof wavesPaymasterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: wavesPaymasterABI,
    functionName: 'useMethodWhitelist',
    ...config,
  } as UseContractReadConfig<
    typeof wavesPaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wavesPaymasterABI}__ and `functionName` set to `"useRejectOnRecipientRevert"`.
 */
export function useWavesPaymasterUseRejectOnRecipientRevert<
  TFunctionName extends 'useRejectOnRecipientRevert',
  TSelectData = ReadContractResult<typeof wavesPaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof wavesPaymasterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: wavesPaymasterABI,
    functionName: 'useRejectOnRecipientRevert',
    ...config,
  } as UseContractReadConfig<
    typeof wavesPaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wavesPaymasterABI}__ and `functionName` set to `"useSenderWhitelist"`.
 */
export function useWavesPaymasterUseSenderWhitelist<
  TFunctionName extends 'useSenderWhitelist',
  TSelectData = ReadContractResult<typeof wavesPaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof wavesPaymasterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: wavesPaymasterABI,
    functionName: 'useSenderWhitelist',
    ...config,
  } as UseContractReadConfig<
    typeof wavesPaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wavesPaymasterABI}__ and `functionName` set to `"useTargetWhitelist"`.
 */
export function useWavesPaymasterUseTargetWhitelist<
  TFunctionName extends 'useTargetWhitelist',
  TSelectData = ReadContractResult<typeof wavesPaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof wavesPaymasterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: wavesPaymasterABI,
    functionName: 'useTargetWhitelist',
    ...config,
  } as UseContractReadConfig<
    typeof wavesPaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link wavesPaymasterABI}__ and `functionName` set to `"versionPaymaster"`.
 */
export function useWavesPaymasterVersionPaymaster<
  TFunctionName extends 'versionPaymaster',
  TSelectData = ReadContractResult<typeof wavesPaymasterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof wavesPaymasterABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: wavesPaymasterABI,
    functionName: 'versionPaymaster',
    ...config,
  } as UseContractReadConfig<
    typeof wavesPaymasterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wavesPaymasterABI}__.
 */
export function useWavesPaymasterWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wavesPaymasterABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof wavesPaymasterABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<typeof wavesPaymasterABI, TFunctionName, TMode>({
    abi: wavesPaymasterABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wavesPaymasterABI}__ and `functionName` set to `"postRelayedCall"`.
 */
export function useWavesPaymasterPostRelayedCall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wavesPaymasterABI,
          'postRelayedCall'
        >['request']['abi'],
        'postRelayedCall',
        TMode
      > & { functionName?: 'postRelayedCall' }
    : UseContractWriteConfig<
        typeof wavesPaymasterABI,
        'postRelayedCall',
        TMode
      > & {
        abi?: never
        functionName?: 'postRelayedCall'
      } = {} as any,
) {
  return useContractWrite<typeof wavesPaymasterABI, 'postRelayedCall', TMode>({
    abi: wavesPaymasterABI,
    functionName: 'postRelayedCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wavesPaymasterABI}__ and `functionName` set to `"preRelayedCall"`.
 */
export function useWavesPaymasterPreRelayedCall<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wavesPaymasterABI,
          'preRelayedCall'
        >['request']['abi'],
        'preRelayedCall',
        TMode
      > & { functionName?: 'preRelayedCall' }
    : UseContractWriteConfig<
        typeof wavesPaymasterABI,
        'preRelayedCall',
        TMode
      > & {
        abi?: never
        functionName?: 'preRelayedCall'
      } = {} as any,
) {
  return useContractWrite<typeof wavesPaymasterABI, 'preRelayedCall', TMode>({
    abi: wavesPaymasterABI,
    functionName: 'preRelayedCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wavesPaymasterABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useWavesPaymasterRenounceOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wavesPaymasterABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<
        typeof wavesPaymasterABI,
        'renounceOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof wavesPaymasterABI, 'renounceOwnership', TMode>(
    {
      abi: wavesPaymasterABI,
      functionName: 'renounceOwnership',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wavesPaymasterABI}__ and `functionName` set to `"setConfiguration"`.
 */
export function useWavesPaymasterSetConfiguration<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wavesPaymasterABI,
          'setConfiguration'
        >['request']['abi'],
        'setConfiguration',
        TMode
      > & { functionName?: 'setConfiguration' }
    : UseContractWriteConfig<
        typeof wavesPaymasterABI,
        'setConfiguration',
        TMode
      > & {
        abi?: never
        functionName?: 'setConfiguration'
      } = {} as any,
) {
  return useContractWrite<typeof wavesPaymasterABI, 'setConfiguration', TMode>({
    abi: wavesPaymasterABI,
    functionName: 'setConfiguration',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wavesPaymasterABI}__ and `functionName` set to `"setRelayHub"`.
 */
export function useWavesPaymasterSetRelayHub<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wavesPaymasterABI,
          'setRelayHub'
        >['request']['abi'],
        'setRelayHub',
        TMode
      > & { functionName?: 'setRelayHub' }
    : UseContractWriteConfig<typeof wavesPaymasterABI, 'setRelayHub', TMode> & {
        abi?: never
        functionName?: 'setRelayHub'
      } = {} as any,
) {
  return useContractWrite<typeof wavesPaymasterABI, 'setRelayHub', TMode>({
    abi: wavesPaymasterABI,
    functionName: 'setRelayHub',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wavesPaymasterABI}__ and `functionName` set to `"setTrustedForwarder"`.
 */
export function useWavesPaymasterSetTrustedForwarder<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wavesPaymasterABI,
          'setTrustedForwarder'
        >['request']['abi'],
        'setTrustedForwarder',
        TMode
      > & { functionName?: 'setTrustedForwarder' }
    : UseContractWriteConfig<
        typeof wavesPaymasterABI,
        'setTrustedForwarder',
        TMode
      > & {
        abi?: never
        functionName?: 'setTrustedForwarder'
      } = {} as any,
) {
  return useContractWrite<
    typeof wavesPaymasterABI,
    'setTrustedForwarder',
    TMode
  >({
    abi: wavesPaymasterABI,
    functionName: 'setTrustedForwarder',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wavesPaymasterABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useWavesPaymasterTransferOwnership<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wavesPaymasterABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<
        typeof wavesPaymasterABI,
        'transferOwnership',
        TMode
      > & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any,
) {
  return useContractWrite<typeof wavesPaymasterABI, 'transferOwnership', TMode>(
    {
      abi: wavesPaymasterABI,
      functionName: 'transferOwnership',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wavesPaymasterABI}__ and `functionName` set to `"whitelistMethod"`.
 */
export function useWavesPaymasterWhitelistMethod<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wavesPaymasterABI,
          'whitelistMethod'
        >['request']['abi'],
        'whitelistMethod',
        TMode
      > & { functionName?: 'whitelistMethod' }
    : UseContractWriteConfig<
        typeof wavesPaymasterABI,
        'whitelistMethod',
        TMode
      > & {
        abi?: never
        functionName?: 'whitelistMethod'
      } = {} as any,
) {
  return useContractWrite<typeof wavesPaymasterABI, 'whitelistMethod', TMode>({
    abi: wavesPaymasterABI,
    functionName: 'whitelistMethod',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wavesPaymasterABI}__ and `functionName` set to `"whitelistSender"`.
 */
export function useWavesPaymasterWhitelistSender<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wavesPaymasterABI,
          'whitelistSender'
        >['request']['abi'],
        'whitelistSender',
        TMode
      > & { functionName?: 'whitelistSender' }
    : UseContractWriteConfig<
        typeof wavesPaymasterABI,
        'whitelistSender',
        TMode
      > & {
        abi?: never
        functionName?: 'whitelistSender'
      } = {} as any,
) {
  return useContractWrite<typeof wavesPaymasterABI, 'whitelistSender', TMode>({
    abi: wavesPaymasterABI,
    functionName: 'whitelistSender',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wavesPaymasterABI}__ and `functionName` set to `"whitelistTarget"`.
 */
export function useWavesPaymasterWhitelistTarget<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wavesPaymasterABI,
          'whitelistTarget'
        >['request']['abi'],
        'whitelistTarget',
        TMode
      > & { functionName?: 'whitelistTarget' }
    : UseContractWriteConfig<
        typeof wavesPaymasterABI,
        'whitelistTarget',
        TMode
      > & {
        abi?: never
        functionName?: 'whitelistTarget'
      } = {} as any,
) {
  return useContractWrite<typeof wavesPaymasterABI, 'whitelistTarget', TMode>({
    abi: wavesPaymasterABI,
    functionName: 'whitelistTarget',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link wavesPaymasterABI}__ and `functionName` set to `"withdrawRelayHubDepositTo"`.
 */
export function useWavesPaymasterWithdrawRelayHubDepositTo<
  TMode extends WriteContractMode = undefined,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof wavesPaymasterABI,
          'withdrawRelayHubDepositTo'
        >['request']['abi'],
        'withdrawRelayHubDepositTo',
        TMode
      > & { functionName?: 'withdrawRelayHubDepositTo' }
    : UseContractWriteConfig<
        typeof wavesPaymasterABI,
        'withdrawRelayHubDepositTo',
        TMode
      > & {
        abi?: never
        functionName?: 'withdrawRelayHubDepositTo'
      } = {} as any,
) {
  return useContractWrite<
    typeof wavesPaymasterABI,
    'withdrawRelayHubDepositTo',
    TMode
  >({
    abi: wavesPaymasterABI,
    functionName: 'withdrawRelayHubDepositTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wavesPaymasterABI}__.
 */
export function usePrepareWavesPaymasterWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof wavesPaymasterABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: wavesPaymasterABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof wavesPaymasterABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wavesPaymasterABI}__ and `functionName` set to `"postRelayedCall"`.
 */
export function usePrepareWavesPaymasterPostRelayedCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof wavesPaymasterABI, 'postRelayedCall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: wavesPaymasterABI,
    functionName: 'postRelayedCall',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof wavesPaymasterABI,
    'postRelayedCall'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wavesPaymasterABI}__ and `functionName` set to `"preRelayedCall"`.
 */
export function usePrepareWavesPaymasterPreRelayedCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof wavesPaymasterABI, 'preRelayedCall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: wavesPaymasterABI,
    functionName: 'preRelayedCall',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof wavesPaymasterABI,
    'preRelayedCall'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wavesPaymasterABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareWavesPaymasterRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof wavesPaymasterABI,
      'renounceOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: wavesPaymasterABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof wavesPaymasterABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wavesPaymasterABI}__ and `functionName` set to `"setConfiguration"`.
 */
export function usePrepareWavesPaymasterSetConfiguration(
  config: Omit<
    UsePrepareContractWriteConfig<typeof wavesPaymasterABI, 'setConfiguration'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: wavesPaymasterABI,
    functionName: 'setConfiguration',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof wavesPaymasterABI,
    'setConfiguration'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wavesPaymasterABI}__ and `functionName` set to `"setRelayHub"`.
 */
export function usePrepareWavesPaymasterSetRelayHub(
  config: Omit<
    UsePrepareContractWriteConfig<typeof wavesPaymasterABI, 'setRelayHub'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: wavesPaymasterABI,
    functionName: 'setRelayHub',
    ...config,
  } as UsePrepareContractWriteConfig<typeof wavesPaymasterABI, 'setRelayHub'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wavesPaymasterABI}__ and `functionName` set to `"setTrustedForwarder"`.
 */
export function usePrepareWavesPaymasterSetTrustedForwarder(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof wavesPaymasterABI,
      'setTrustedForwarder'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: wavesPaymasterABI,
    functionName: 'setTrustedForwarder',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof wavesPaymasterABI,
    'setTrustedForwarder'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wavesPaymasterABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareWavesPaymasterTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof wavesPaymasterABI,
      'transferOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: wavesPaymasterABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof wavesPaymasterABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wavesPaymasterABI}__ and `functionName` set to `"whitelistMethod"`.
 */
export function usePrepareWavesPaymasterWhitelistMethod(
  config: Omit<
    UsePrepareContractWriteConfig<typeof wavesPaymasterABI, 'whitelistMethod'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: wavesPaymasterABI,
    functionName: 'whitelistMethod',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof wavesPaymasterABI,
    'whitelistMethod'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wavesPaymasterABI}__ and `functionName` set to `"whitelistSender"`.
 */
export function usePrepareWavesPaymasterWhitelistSender(
  config: Omit<
    UsePrepareContractWriteConfig<typeof wavesPaymasterABI, 'whitelistSender'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: wavesPaymasterABI,
    functionName: 'whitelistSender',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof wavesPaymasterABI,
    'whitelistSender'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wavesPaymasterABI}__ and `functionName` set to `"whitelistTarget"`.
 */
export function usePrepareWavesPaymasterWhitelistTarget(
  config: Omit<
    UsePrepareContractWriteConfig<typeof wavesPaymasterABI, 'whitelistTarget'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: wavesPaymasterABI,
    functionName: 'whitelistTarget',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof wavesPaymasterABI,
    'whitelistTarget'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link wavesPaymasterABI}__ and `functionName` set to `"withdrawRelayHubDepositTo"`.
 */
export function usePrepareWavesPaymasterWithdrawRelayHubDepositTo(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof wavesPaymasterABI,
      'withdrawRelayHubDepositTo'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: wavesPaymasterABI,
    functionName: 'withdrawRelayHubDepositTo',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof wavesPaymasterABI,
    'withdrawRelayHubDepositTo'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link wavesPaymasterABI}__.
 */
export function useWavesPaymasterEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof wavesPaymasterABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: wavesPaymasterABI,
    ...config,
  } as UseContractEventConfig<typeof wavesPaymasterABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link wavesPaymasterABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useWavesPaymasterOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof wavesPaymasterABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: wavesPaymasterABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof wavesPaymasterABI, 'OwnershipTransferred'>)
}
